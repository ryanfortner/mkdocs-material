{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"alternatives/","text":"Alternatives \u00b6 There are tons of static site generators and themes out there and choosing the right one for your tech stack is a tough decision. If you're unsure if Material for MkDocs is the right solution for you, this section should help you evaluate alternative solutions. Docusaurus \u00b6 Docusaurus by Facebook is a very popular documentation generator and a good choice if you or your company are already using React to build your site. It will generate a single page application which is fundamentally different from the site Material for MkDocs generates for you. Advantages Very powerful, customizable and extendable Provides many components that aid in technical writing Large and rich ecosystem, backed by Facebook Challenges High learning curve, JavaScript knowledge mandatory JavaScript ecosystem is very volatile, rather high maintenance More time needed to get up and running While Docusaurus is one of the best choices when it comes to documentation sites that output a single page applications, there are many more solutions, including Docz , Gatsby , Vuepress and Docsify that approach this problem similarily. Jekyll \u00b6 Jekyll is probably one of the most mature and widespread static site generators and is written in Ruby . It is not specifically geared towards technical project documentation and has many themes to choose from, which can be challenging. Advantages Battle-tested, rich ecosystem, many themes to choose from Brings great capabilities for blogging (permalinks, tags, etc.) Generates a SEO-friendly site, similar to Material for MkDocs Challenges Not specifically geared towards technical project documentation Limited Markdown capabilities, not as advanced as Python Markdown More time needed to get up and running Sphinx \u00b6 Sphinx is an alternative static site generator specifically geared towards generating reference documentation, offering powerful capabilities that are lacking in MkDocs. It uses reStructured text , a format similar to Markdown, which some users find harder to use. Advantages Very powerful, customizable and extendable Generates reference documentation from Python Docstrings Large and rich ecosystem, used by many Python projects Challenges High learning curve, reStructured text syntax might be challenging Search is less powerful than the one provided by MkDocs More time needed to get up and running Sphinx Immaterial is a great port of Material for MkDocs to Sphinx, as it follows the upstream repository closely. Furo is another great theme. Alternatively, mkdocstrings builds on top of MkDocs to allow the generation of reference documentation. GitBook \u00b6 GitBook offers a hosted documentation solution that generates a beautiful and functional site from Markdown files in your GitHub repository. However, it was once Open Source, but turned into a closed source solution some time ago. Advantages Hosted solution, minimal technical knowledge required Custom domains, authentication and other enterprise features Great collaboration features for teams Challenges Closed source, not free for proprietary projects Limited Markdown capabilities, not as advanced as Python Markdown Many Open Source projects moved away from GitBook Many users switched from GitBook to Material for MkDocs, as they want to keep control and ownership of their documentation, favoring an Open Source solution.","title":"Alternatives"},{"location":"alternatives/#alternatives","text":"There are tons of static site generators and themes out there and choosing the right one for your tech stack is a tough decision. If you're unsure if Material for MkDocs is the right solution for you, this section should help you evaluate alternative solutions.","title":"Alternatives"},{"location":"alternatives/#docusaurus","text":"Docusaurus by Facebook is a very popular documentation generator and a good choice if you or your company are already using React to build your site. It will generate a single page application which is fundamentally different from the site Material for MkDocs generates for you. Advantages Very powerful, customizable and extendable Provides many components that aid in technical writing Large and rich ecosystem, backed by Facebook Challenges High learning curve, JavaScript knowledge mandatory JavaScript ecosystem is very volatile, rather high maintenance More time needed to get up and running While Docusaurus is one of the best choices when it comes to documentation sites that output a single page applications, there are many more solutions, including Docz , Gatsby , Vuepress and Docsify that approach this problem similarily.","title":"Docusaurus"},{"location":"alternatives/#jekyll","text":"Jekyll is probably one of the most mature and widespread static site generators and is written in Ruby . It is not specifically geared towards technical project documentation and has many themes to choose from, which can be challenging. Advantages Battle-tested, rich ecosystem, many themes to choose from Brings great capabilities for blogging (permalinks, tags, etc.) Generates a SEO-friendly site, similar to Material for MkDocs Challenges Not specifically geared towards technical project documentation Limited Markdown capabilities, not as advanced as Python Markdown More time needed to get up and running","title":"Jekyll"},{"location":"alternatives/#sphinx","text":"Sphinx is an alternative static site generator specifically geared towards generating reference documentation, offering powerful capabilities that are lacking in MkDocs. It uses reStructured text , a format similar to Markdown, which some users find harder to use. Advantages Very powerful, customizable and extendable Generates reference documentation from Python Docstrings Large and rich ecosystem, used by many Python projects Challenges High learning curve, reStructured text syntax might be challenging Search is less powerful than the one provided by MkDocs More time needed to get up and running Sphinx Immaterial is a great port of Material for MkDocs to Sphinx, as it follows the upstream repository closely. Furo is another great theme. Alternatively, mkdocstrings builds on top of MkDocs to allow the generation of reference documentation.","title":"Sphinx"},{"location":"alternatives/#gitbook","text":"GitBook offers a hosted documentation solution that generates a beautiful and functional site from Markdown files in your GitHub repository. However, it was once Open Source, but turned into a closed source solution some time ago. Advantages Hosted solution, minimal technical knowledge required Custom domains, authentication and other enterprise features Great collaboration features for teams Challenges Closed source, not free for proprietary projects Limited Markdown capabilities, not as advanced as Python Markdown Many Open Source projects moved away from GitBook Many users switched from GitBook to Material for MkDocs, as they want to keep control and ownership of their documentation, favoring an Open Source solution.","title":"GitBook"},{"location":"browser-support/","text":"Browser support \u00b6 Material for MkDocs goes at great lengths to support the largest possible range of browsers while retaining the simplemost possibilities for customization via modern CSS features like custom properties and mask images . Supported browsers \u00b6 The following table lists all browsers for which Material for MkDocs offers full support, so it can be assumed that all features work without degradation. If you find a feature not to be working in a browser in the supported version range, please open an issue : Browser Version Release date Usage desktop mobile overall Chrome 49+ 03/2016 25.65% 38.33% 63.98% Safari 10+ 09/2016 4.63% 14.96% 19.59% Edge 79+ 01/2020 3.95% n/a 3.95% Firefox 53+ 04/2017 3.40% .30% 3.70% Opera 36+ 03/2016 1.44% .01% 1.45% 92.67% Browser support matrix sourced from caniuse.com . 1 Note that the usage data is based on global browser market share, so it could in fact be entirely different for your target demographic. It's a good idea to check the distribution of browser types and versions among your users. Other browsers \u00b6 Albeit your site might not look as perfect as when viewed with a modern browser, the following older browser versions might work with some additional effort: Firefox 31-52 \u2013 icons will render as little boxes due to missing support for mask images . While this cannot be polyfilled, it might be mitigated by hiding icons with additional CSS . Edge 16-18 \u2013 the spacing of some elements might be a little of due to missing support for the :is pseudo selector , which can be mitigated with some additional CSS . Internet Explorer - no support, mainly due to missing support for custom properties . The last version of Material for MkDocs to support Internet Explorer is 4.6.3 . The data was collected from caniuse.com in January 2022, and is primarily based on browser support for custom properties , mask images and the :is pseudo selector which are not entirely polyfillable. Browsers with a cumulated market share of less than 1% were not considered, but might still be fully or partially supported. \u21a9","title":"Browser support"},{"location":"browser-support/#browser-support","text":"Material for MkDocs goes at great lengths to support the largest possible range of browsers while retaining the simplemost possibilities for customization via modern CSS features like custom properties and mask images .","title":"Browser support"},{"location":"browser-support/#supported-browsers","text":"The following table lists all browsers for which Material for MkDocs offers full support, so it can be assumed that all features work without degradation. If you find a feature not to be working in a browser in the supported version range, please open an issue : Browser Version Release date Usage desktop mobile overall Chrome 49+ 03/2016 25.65% 38.33% 63.98% Safari 10+ 09/2016 4.63% 14.96% 19.59% Edge 79+ 01/2020 3.95% n/a 3.95% Firefox 53+ 04/2017 3.40% .30% 3.70% Opera 36+ 03/2016 1.44% .01% 1.45% 92.67% Browser support matrix sourced from caniuse.com . 1 Note that the usage data is based on global browser market share, so it could in fact be entirely different for your target demographic. It's a good idea to check the distribution of browser types and versions among your users.","title":"Supported browsers"},{"location":"browser-support/#other-browsers","text":"Albeit your site might not look as perfect as when viewed with a modern browser, the following older browser versions might work with some additional effort: Firefox 31-52 \u2013 icons will render as little boxes due to missing support for mask images . While this cannot be polyfilled, it might be mitigated by hiding icons with additional CSS . Edge 16-18 \u2013 the spacing of some elements might be a little of due to missing support for the :is pseudo selector , which can be mitigated with some additional CSS . Internet Explorer - no support, mainly due to missing support for custom properties . The last version of Material for MkDocs to support Internet Explorer is 4.6.3 . The data was collected from caniuse.com in January 2022, and is primarily based on browser support for custom properties , mask images and the :is pseudo selector which are not entirely polyfillable. Browsers with a cumulated market share of less than 1% were not considered, but might still be fully or partially supported. \u21a9","title":"Other browsers"},{"location":"creating-your-site/","text":"Creating your site \u00b6 After you've installed Material for MkDocs, you can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: mkdocs new . Alternatively, if you're running Material for MkDocs from within Docker, use: Unix, Powershell Windows docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Configuration \u00b6 Minimal configuration \u00b6 Simply add the following lines to mkdocs.yml to enable the theme. Note that since there are several installation methods , minimal configuration might be slightly different: pip docker git theme : name : material theme : name : material theme : name : null custom_dir : mkdocs-material/material # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en font : text : Roboto code : Roboto Mono favicon : assets/favicon.png icon : logo : logo When you clone from GitHub, you must list all of the themes' defaults explicitly, because mkdocs_theme.yml is not loaded automatically as described in the custom theme guide . Advanced configuration \u00b6 Material for MkDocs comes with many configuration options. The setup section explains in great detail how to configure and customize colors, fonts, icons and much more: Changing the colors Changing the fonts Changing the language Changing the logo and icons Setting up navigation Setting up site search Setting up site analytics Setting up social cards Setting up tags Setting up versioning Setting up the header Setting up the footer Adding a git repository Adding a comment system Furthermore, see the list of supported Markdown extensions that are natively integrated with Material for MkDocs, delivering a low-effort and unprecedented technical writing experience. Previewing as you write \u00b6 MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve # (1)! If you have a large documentation project, it might take minutes until MkDocs has rebuilt all pages for you to preview. If you're only interested in the current page, the --dirtyreload flag will make rebuilds much faster: mkdocs serve --dirtyreload If you're running Material for MkDocs from within Docker, use: Unix, Powershell Windows docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to localhost:8000 and you should see: Building your site \u00b6 When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages , GitLab Pages , a CDN of your choice or your private web space.","title":"Creating your site"},{"location":"creating-your-site/#creating-your-site","text":"After you've installed Material for MkDocs, you can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: mkdocs new . Alternatively, if you're running Material for MkDocs from within Docker, use: Unix, Powershell Windows docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Creating your site"},{"location":"creating-your-site/#configuration","text":"","title":"Configuration"},{"location":"creating-your-site/#minimal-configuration","text":"Simply add the following lines to mkdocs.yml to enable the theme. Note that since there are several installation methods , minimal configuration might be slightly different: pip docker git theme : name : material theme : name : material theme : name : null custom_dir : mkdocs-material/material # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en font : text : Roboto code : Roboto Mono favicon : assets/favicon.png icon : logo : logo When you clone from GitHub, you must list all of the themes' defaults explicitly, because mkdocs_theme.yml is not loaded automatically as described in the custom theme guide .","title":"Minimal configuration"},{"location":"creating-your-site/#advanced-configuration","text":"Material for MkDocs comes with many configuration options. The setup section explains in great detail how to configure and customize colors, fonts, icons and much more: Changing the colors Changing the fonts Changing the language Changing the logo and icons Setting up navigation Setting up site search Setting up site analytics Setting up social cards Setting up tags Setting up versioning Setting up the header Setting up the footer Adding a git repository Adding a comment system Furthermore, see the list of supported Markdown extensions that are natively integrated with Material for MkDocs, delivering a low-effort and unprecedented technical writing experience.","title":"Advanced configuration"},{"location":"creating-your-site/#previewing-as-you-write","text":"MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve # (1)! If you have a large documentation project, it might take minutes until MkDocs has rebuilt all pages for you to preview. If you're only interested in the current page, the --dirtyreload flag will make rebuilds much faster: mkdocs serve --dirtyreload If you're running Material for MkDocs from within Docker, use: Unix, Powershell Windows docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to localhost:8000 and you should see:","title":"Previewing as you write"},{"location":"creating-your-site/#building-your-site","text":"When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages , GitLab Pages , a CDN of your choice or your private web space.","title":"Building your site"},{"location":"customization/","text":"Customization \u00b6 Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style. Adding assets \u00b6 MkDocs provides several ways to customize a theme. In order to make a few small tweaks to Material for MkDocs, you can just add CSS and JavaScript files to the docs directory. Additional CSS \u00b6 If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate style sheet. The easiest way is by creating a new style sheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_css : - stylesheets/extra.css Additional JavaScript \u00b6 If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_javascript : - javascripts/extra.js Extending the theme \u00b6 If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily. Setup and theme structure \u00b6 Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir setting: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir setting is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name setting in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials \u00b6 In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding blocks recommended \u00b6 Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} The following template blocks are provided by the theme: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the style sheets (also extra sources) tabs Wraps the tabs navigation (if available) Theme development \u00b6 Material for MkDocs is built on top of TypeScript , RxJS and SASS , and uses a lean, custom build process to put everything together. 1 If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the theme and recompile it. Environment setup \u00b6 In order to start development on Material for MkDocs, a Node.js version of at least 14 is required. First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install Development mode \u00b6 Start the watcher with: npm start Then, in a second terminal window, start the MkDocs live preview server with: mkdocs serve --watch-theme Point your browser to localhost:8000 and you should see this very documentation in front of you. Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overwritten when the theme is built. Building the theme \u00b6 When you're finished making your changes, you can build the theme by invoking: npm run build This triggers the production-level compilation and minification of all style sheets and JavaScript files. After the command exits, the compiled files are located in the material directory. When running mkdocs build , you should now see your changes to the original theme. Prior to 7.0.0 the build was based on Webpack, resulting in occasional broken builds due to incompatibilities with loaders and plugins. Therefore, we decided to swap Webpack for a leaner solution which is now based on RxJS as the application itself. This allowed for the pruning of more than 500 dependencies (~30% less). \u21a9","title":"Customization"},{"location":"customization/#customization","text":"Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style.","title":"Customization"},{"location":"customization/#adding-assets","text":"MkDocs provides several ways to customize a theme. In order to make a few small tweaks to Material for MkDocs, you can just add CSS and JavaScript files to the docs directory.","title":"Adding assets"},{"location":"customization/#additional-css","text":"If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate style sheet. The easiest way is by creating a new style sheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_css : - stylesheets/extra.css","title":"Additional CSS"},{"location":"customization/#additional-javascript","text":"If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_javascript : - javascripts/extra.js","title":"Additional JavaScript"},{"location":"customization/#extending-the-theme","text":"If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily.","title":"Extending the theme"},{"location":"customization/#setup-and-theme-structure","text":"Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir setting: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir setting is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name setting in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page","title":"Setup and theme structure"},{"location":"customization/#overriding-partials","text":"In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file.","title":"Overriding partials"},{"location":"customization/#overriding-blocks","text":"Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} The following template blocks are provided by the theme: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the style sheets (also extra sources) tabs Wraps the tabs navigation (if available)","title":"Overriding blocks"},{"location":"customization/#theme-development","text":"Material for MkDocs is built on top of TypeScript , RxJS and SASS , and uses a lean, custom build process to put everything together. 1 If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the theme and recompile it.","title":"Theme development"},{"location":"customization/#environment-setup","text":"In order to start development on Material for MkDocs, a Node.js version of at least 14 is required. First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install","title":"Environment setup"},{"location":"customization/#development-mode","text":"Start the watcher with: npm start Then, in a second terminal window, start the MkDocs live preview server with: mkdocs serve --watch-theme Point your browser to localhost:8000 and you should see this very documentation in front of you. Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overwritten when the theme is built.","title":"Development mode"},{"location":"customization/#building-the-theme","text":"When you're finished making your changes, you can build the theme by invoking: npm run build This triggers the production-level compilation and minification of all style sheets and JavaScript files. After the command exits, the compiled files are located in the material directory. When running mkdocs build , you should now see your changes to the original theme. Prior to 7.0.0 the build was based on Webpack, resulting in occasional broken builds due to incompatibilities with loaders and plugins. Therefore, we decided to swap Webpack for a leaner solution which is now based on RxJS as the application itself. This allowed for the pruning of more than 500 dependencies (~30% less). \u21a9","title":"Building the theme"},{"location":"getting-started/","text":"Getting started \u00b6 Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . Installation \u00b6 with pip recommended \u00b6 Material for MkDocs can be installed with pip : Latest 8.x pip install mkdocs-material pip install mkdocs-material == \"8.*\" #(1)! Material for MkDocs uses semantic versioning 1 , which is why it's a good idea to limit upgrades to the current major version. This will make sure that you don't accidentally upgrade to the next major version , which may include breaking changes that silently break your site. Additionally, you can use pip freeze to create a lockfile, so builds are reproducible at all times: pip freeze > requirements.txt Now, the lockfile can be used for installation: pip install -r requirements.txt This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. with docker \u00b6 The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: Latest 8.x docker pull squidfunk/mkdocs-material docker pull squidfunk/mkdocs-material:8 The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image. Apple Silicon (M1) and Raspberry Pi The official Docker image is only available for linux/amd64 . We recommend the third-party image by @afritzler if you want to run Material for MkDocs via Docker on arm64 or armv7 , as it is automatically built on every release: docker pull ghcr.io/afritzler/mkdocs-material with git \u00b6 Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -e mkdocs-material Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features. \u21a9","title":"Installation"},{"location":"getting-started/#getting-started","text":"Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker .","title":"Getting started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-pip","text":"Material for MkDocs can be installed with pip : Latest 8.x pip install mkdocs-material pip install mkdocs-material == \"8.*\" #(1)! Material for MkDocs uses semantic versioning 1 , which is why it's a good idea to limit upgrades to the current major version. This will make sure that you don't accidentally upgrade to the next major version , which may include breaking changes that silently break your site. Additionally, you can use pip freeze to create a lockfile, so builds are reproducible at all times: pip freeze > requirements.txt Now, the lockfile can be used for installation: pip install -r requirements.txt This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.","title":"with pip"},{"location":"getting-started/#with-docker","text":"The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: Latest 8.x docker pull squidfunk/mkdocs-material docker pull squidfunk/mkdocs-material:8 The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image. Apple Silicon (M1) and Raspberry Pi The official Docker image is only available for linux/amd64 . We recommend the third-party image by @afritzler if you want to run Material for MkDocs via Docker on arm64 or armv7 , as it is automatically built on every release: docker pull ghcr.io/afritzler/mkdocs-material","title":"with docker"},{"location":"getting-started/#with-git","text":"Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -e mkdocs-material Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features. \u21a9","title":"with git"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2016-2022 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2016-2022 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"publishing-your-site/","text":"Publishing your site \u00b6 The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple. GitHub Pages \u00b6 If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up. with GitHub Actions \u00b6 Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs Insiders name : ci # (1)! on : push : branches : - master # (2)! - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest if : github.event.repository.fork == false steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - run : mkdocs gh-deploy --force env : GH_TOKEN : ${{ secrets.GH_TOKEN }} # (1)! Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using GitHub secrets . Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. If the GitHub Page doesn't show up after a few minutes, go to your settings of your repository and ensure that the publishing source branch for your GitHub Page is set to gh-pages . Your documentation should shortly appear at <username>.github.io/<repository> . with MkDocs \u00b6 If you prefer to deploy your project documentation manually, you can just invoke the following command from the directory containing the mkdocs.yml file: mkdocs gh-deploy --force GitLab Pages \u00b6 If you're hosting your code on GitLab, deploying to GitLab Pages can be done by using the GitLab CI task runner. At the root of your repository, create a task definition named .gitlab-ci.yml and copy and paste the following contents: Material for MkDocs Insiders image : python:latest pages : stage : deploy only : - master # (1)! - main script : - pip install mkdocs-material - mkdocs build --site-dir public artifacts : paths : - public At some point, GitLab renamed master to main . If your default branch is named master , you can safely remove main , vice versa. image : python:latest pages : stage : deploy only : - master - main script : # (1)! - pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - mkdocs build --site-dir public artifacts : paths : - public Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using masked custom variables . Now, when a new commit is pushed to master , the static site is automatically built and deployed. Commit and push the file to your repository to see the workflow in action. Your documentation should shortly appear at <username>.gitlab.io/<repository> .","title":"Publishing your site"},{"location":"publishing-your-site/#publishing-your-site","text":"The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple.","title":"Publishing your site"},{"location":"publishing-your-site/#github-pages","text":"If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up.","title":"GitHub Pages"},{"location":"publishing-your-site/#with-github-actions","text":"Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs Insiders name : ci # (1)! on : push : branches : - master # (2)! - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest if : github.event.repository.fork == false steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - run : mkdocs gh-deploy --force env : GH_TOKEN : ${{ secrets.GH_TOKEN }} # (1)! Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using GitHub secrets . Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. If the GitHub Page doesn't show up after a few minutes, go to your settings of your repository and ensure that the publishing source branch for your GitHub Page is set to gh-pages . Your documentation should shortly appear at <username>.github.io/<repository> .","title":"with GitHub Actions"},{"location":"publishing-your-site/#with-mkdocs","text":"If you prefer to deploy your project documentation manually, you can just invoke the following command from the directory containing the mkdocs.yml file: mkdocs gh-deploy --force","title":"with MkDocs"},{"location":"publishing-your-site/#gitlab-pages","text":"If you're hosting your code on GitLab, deploying to GitLab Pages can be done by using the GitLab CI task runner. At the root of your repository, create a task definition named .gitlab-ci.yml and copy and paste the following contents: Material for MkDocs Insiders image : python:latest pages : stage : deploy only : - master # (1)! - main script : - pip install mkdocs-material - mkdocs build --site-dir public artifacts : paths : - public At some point, GitLab renamed master to main . If your default branch is named master , you can safely remove main , vice versa. image : python:latest pages : stage : deploy only : - master - main script : # (1)! - pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - mkdocs build --site-dir public artifacts : paths : - public Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using masked custom variables . Now, when a new commit is pushed to master , the static site is automatically built and deployed. Commit and push the file to your repository to see the workflow in action. Your documentation should shortly appear at <username>.gitlab.io/<repository> .","title":"GitLab Pages"},{"location":"upgrade/","text":"How to upgrade \u00b6 Upgrade to the latest version with: pip install --upgrade mkdocs-material Show the currently installed version with: pip show mkdocs-material Upgrading from 7.x to 8.x \u00b6 What's new? \u00b6 Added support for code annotations Added support for anchor tracking Added support for version warning Added copyright partial for easier override Removed deprecated content tabs legacy implementation Removed deprecated seealso admonition type Removed deprecated site_keywords setting (unsupported by MkDocs) Removed deprecated prebuilt search index support Removed deprecated web app manifest \u2013 use customization Removed extracopyright variable \u2013 use new copyright partial Removed Disqus integation \u2013 use customization Switched to :is() selectors for simple selector lists Switched autoprefixer from last 4 years to last 2 years Improved CSS overall to match modern standards Improved CSS variable semantics for fonts Improved extensibility by restructuring partials Improved handling of details when printing Improved keyboard navigation for footnotes Fixed #3214 : Search highlighting breaks site when empty Changes to mkdocs.yml \u00b6 pymdownx.tabbed \u00b6 Support for the legacy style of the Tabbed extension was dropped in favor of the new, alternate implementation which has better behavior on mobile viewports : 8.x 7.x markdown_extensions : - pymdownx.tabbed : alternate_style : true markdown_extensions : - pymdownx.tabbed pymdownx.superfences \u00b6 The *-experimental suffix must be removed from the custom fence class property, which is used to target code blocks to be rendered as diagrams using Mermaid.js : 8.x 7.x markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid-experimental format : !!python/name:pymdownx.superfences.fence_code_format google_analytics \u00b6 This option was deprecated in MkDocs 1.2.0 , as the implementation of a JavaScript-based analytics integration is the responsibility of a theme. The following lines must be changed: 8.x 7.x extra : analytics : provider : google property : UA-XXXXXXXX-X google_analytics : - UA-XXXXXXXX-X - auto Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/copyright.html partials/footer.html partials/social.html @@ -13,11 +13,6 @@ {% elif config.site_description %} <meta name=\"description\" content=\"{{ config.site_description }}\"> {% endif %} - {% if page and page.meta and page.meta.keywords %} - <meta name=\"keywords\" content=\"{{ page.meta.keywords }}\"> - {% elif config.site_keywords %} - <meta name=\"keywords\" content=\"{{ config.site_keywords }}\"> - {% endif %} {% if page and page.meta and page.meta.author %} <meta name=\"author\" content=\"{{ page.meta.author }}\"> {% elif config.site_author %} @@ -61,15 +56,13 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> + <style>:root{--md-text-font:\"{{ font.text }}\";--md-code-font:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} - {% if config.extra.manifest %} - <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> - {% endif %} {% for path in config[\"extra_css\"] %} <link rel=\"stylesheet\" href=\"{{ path | url }}\"> {% endfor %} + {% include \"partials/javascripts/base.html\" %} {% block analytics %} {% include \"partials/integrations/analytics.html\" %} {% endblock %} @@ -89,7 +82,6 @@ <body dir=\"{{ direction }}\"> {% endif %} {% set features = config.theme.features or [] %} - {% include \"partials/javascripts/base.html\" %} {% if not config.theme.palette is mapping %} {% include \"partials/javascripts/palette.html\" %} {% endif %} @@ -106,13 +98,25 @@ </div> <div data-md-component=\"announce\"> {% if self.announce() %} - <aside class=\"md-banner md-announce\"> - <div class=\"md-banner__inner md-announce__inner md-grid md-typeset\"> + <aside class=\"md-banner\"> + <div class=\"md-banner__inner md-grid md-typeset\"> {% block announce %}{% endblock %} </div> </aside> {% endif %} </div> + {% if config.extra.version %} + <div data-md-component=\"outdated\" hidden> + <aside class=\"md-banner md-banner--warning\"> + {% if self.outdated() %} + <div class=\"md-banner__inner md-grid md-typeset\"> + {% block outdated %}{% endblock %} + </div> + {% include \"partials/javascripts/outdated.html\" %} + {% endif %} + </aside> + </div> + {% endif %} {% block header %} {% include \"partials/header.html\" %} {% endblock %} @@ -156,25 +160,7 @@ <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} - {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> - {% include \".icons/material/pencil.svg\" %} - </a> - {% endif %} - {% if not \"\\x3ch1\" in page.content %} - <h1>{{ page.title | d(config.site_name, true)}}</h1> - {% endif %} - {{ page.content }} - {% if page and page.meta %} - {% if page.meta.git_revision_date_localized or - page.meta.revision_date - %} - {% include \"partials/source-file.html\" %} - {% endif %} - {% endif %} - {% endblock %} - {% block disqus %} - {% include \"partials/integrations/disqus.html\" %} + {% include \"partials/content.html\" %} {% endblock %} </article> </div> @@ -38,13 +38,6 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Page keywords --> - {% if page and page.meta and page.meta.keywords %} - <meta name=\"keywords\" content=\"{{ page.meta.keywords }}\" /> - {% elif config.site_keywords %} - <meta name=\"keywords\" content=\"{{ config.site_keywords }}\" /> - {% endif %} - <!-- Page author --> {% if page and page.meta and page.meta.author %} <meta name=\"author\" content=\"{{ page.meta.author }}\" /> @@ -120,27 +113,21 @@ /> <style> :root { - --md-text-font-family: \"{{ font.text }}\"; - --md-code-font-family: \"{{ font.code }}\"; + --md-text-font: \"{{ font.text }}\"; + --md-code-font: \"{{ font.code }}\"; } </style> {% endif %} {% endblock %} - <!-- Progressive Web App Manifest --> - {% if config.extra.manifest %} - <link - rel=\"manifest\" - href=\"{{ config.extra.manifest | url }}\" - crossorigin=\"use-credentials\" - /> - {% endif %} - <!-- Custom style sheets --> {% for path in config[\"extra_css\"] %} <link rel=\"stylesheet\" href=\"{{ path | url }}\" /> {% endfor %} + <!-- Helper functions for inline scripts --> + {% include \"partials/javascripts/base.html\" %} + <!-- Analytics --> {% block analytics %} {% include \"partials/integrations/analytics.html\" %} @@ -172,7 +159,6 @@ <!-- Retrieve features from configuration --> {% set features = config.theme.features or [] %} - {% include \"partials/javascripts/base.html\" %} <!-- User preference: color palette --> {% if not config.theme.palette is mapping %} @@ -214,14 +200,28 @@ <!-- Announcement bar --> <div data-md-component=\"announce\"> {% if self.announce() %} - <aside class=\"md-banner md-announce\"> - <div class=\"md-banner__inner md-announce__inner md-grid md-typeset\"> + <aside class=\"md-banner\"> + <div class=\"md-banner__inner md-grid md-typeset\"> {% block announce %}{% endblock %} </div> </aside> {% endif %} </div> + <!-- Version warning --> + {% if config.extra.version %} + <div data-md-component=\"outdated\" hidden> + <aside class=\"md-banner md-banner--warning\"> + {% if self.outdated() %} + <div class=\"md-banner__inner md-grid md-typeset\"> + {% block outdated %}{% endblock %} + </div> + {% include \"partials/javascripts/outdated.html\" %} + {% endif %} + </aside> + </div> + {% endif %} + <!-- Header --> {% block header %} {% include \"partials/header.html\" %} @@ -295,49 +295,11 @@ {% block content %} - - <!-- Edit button --> - {% if page.edit_url %} - <a - href=\"{{ page.edit_url }}\" - title=\"{{ lang.t('edit.link.title') }}\" - class=\"md-content__button md-icon\" - > - {% include \".icons/material/pencil.svg\" %} - </a> - {% endif %} - - <!-- - Hack: check whether the content contains a h1 headline. If it - doesn't, the page title (or respectively site name) is used - as the main headline. - --> - {% if not \"\\x3ch1\" in page.content %} - <h1>{{ page.title | d(config.site_name, true)}}</h1> - {% endif %} - - <!-- Markdown content --> - {{ page.content }} - - <!-- Last update of source file --> - {% if page and page.meta %} - {% if page.meta.git_revision_date_localized or - page.meta.revision_date - %} - {% include \"partials/source-file.html\" %} - {% endif %} - {% endif %} - {% endblock %} - - <!-- Disqus integration --> - {% block disqus %} - {% include \"partials/integrations/disqus.html\" %} + {% include \"partials/content.html\" %} {% endblock %} </article> </div> @@ -0,0 +1,16 @@ +{#- + This file was automatically generated - do not edit +-#} +<div class=\"md-copyright\"> + {% if config.copyright %} + <div class=\"md-copyright__highlight\"> + {{ config.copyright }} + </div> + {% endif %} + {% if not config.extra.generator == false %} + Made with + <a href=\"https://squidfunk.github.io/mkdocs-material/\" target=\"_blank\" rel=\"noopener\"> + Material for MkDocs + </a> + {% endif %} +</div> @@ -41,21 +40,10 @@ {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> - <div class=\"md-footer-copyright\"> - {% if config.copyright %} - <div class=\"md-footer-copyright__highlight\"> - {{ config.copyright }} - </div> - {% endif %} - {% if not config.extra.generator == false %} - Made with - <a href=\"https://squidfunk.github.io/mkdocs-material/\" target=\"_blank\" rel=\"noopener\"> - Material for MkDocs - </a> - {% endif %} - {{ extracopyright }} - </div> - {% include \"partials/social.html\" %} + {% include \"partials/copyright.html\" %} + {% if config.extra.social %} + {% include \"partials/social.html\" %} + {% endif %} </div> </div> </footer> @@ -4,17 +4,15 @@ -{% if config.extra.social %} - <div class=\"md-footer-social\"> - {% for social in config.extra.social %} - {% set title = social.name %} - {% if not title and \"//\" in social.link %} - {% set _,url = social.link.split(\"//\") %} - {% set title = url.split(\"/\")[0] %} - {% endif %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ title | e }}\" class=\"md-footer-social__link\"> - {% include \".icons/\" ~ social.icon ~ \".svg\" %} - </a> - {% endfor %} - </div> -{% endif %} +<div class=\"md-social\"> + {% for social in config.extra.social %} + {% set title = social.name %} + {% if not title and \"//\" in social.link %} + {% set _, url = social.link.split(\"//\") %} + {% set title = url.split(\"/\")[0] %} + {% endif %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ title | e }}\" class=\"md-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> + {% endfor %} +</div> Upgrading from 6.x to 7.x \u00b6 What's new? \u00b6 Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (\u2013480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch Changes to mkdocs.yml \u00b6 extra.version.method \u00b6 The versioning method configuration was renamed to extra.version.provider to allow for different versioning strategies in the future: 7.x 6.x extra : version : provider : mike extra : version : method : mike Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/footer.html partials/header.html partials/source.html partials/toc.html @@ -61,7 +61,7 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>body,input{font-family:\"{{ font.text }}\",-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",SFMono-Regular,Consolas,Menlo,monospace}</style> + <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} {% if config.extra.manifest %} @@ -131,7 +131,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"navigation\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"sidebar\" data-md-type=\"navigation\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/nav.html\" %} @@ -143,7 +143,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"toc\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"toc\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"toc\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/toc.html\" %} @@ -152,7 +152,7 @@ </div> {% endif %} {% endblock %} - <div class=\"md-content\"> + <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} @@ -183,10 +183,18 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> - {% block scripts %} - <script src=\"{{ 'assets/javascripts/vendor.18f0862e.min.js' | url }}\"></script> - <script src=\"{{ 'assets/javascripts/bundle.994580cf.min.js' | url }}\"></script> - {%- set translations = {} -%} + <div class=\"md-dialog\" data-md-component=\"dialog\"> + <div class=\"md-dialog__inner md-typeset\"></div> + </div> + {% block config %} + {%- set app = { + \"base\": base_url, + \"features\": features, + \"translations\": {}, + \"search\": \"assets/javascripts/workers/search.217ffd95.min.js\" | url, + \"version\": config.extra.version or None + } -%} + {%- set translations = app.translations -%} {%- for key in [ \"clipboard.copy\", \"clipboard.copied\", @@ -204,19 +212,12 @@ ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} - <script id=\"__lang\" type=\"application/json\"> - {{- translations | tojson -}} - </script> - {% block config %}{% endblock %} - <script> - app = initialize({ - base: \"{{ base_url }}\", - features: {{ features or [] | tojson }}, - search: Object.assign({ - worker: \"{{ 'assets/javascripts/worker/search.9c0e82ba.min.js' | url }}\" - }, typeof search !== \"undefined\" && search) - }) + <script id=\"__config\" type=\"application/json\"> + {{- app | tojson -}} </script> + {% endblock %} + {% block scripts %} + <script src=\"{{ 'assets/javascripts/bundle.926459b3.min.js' | url }}\"></script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} - <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> - {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-left.svg\" %} - </div> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.previous\") }} - </span> - {{ page.previous_page.title }} - </div> - </div> - </a> - {% endif %} - {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.next\") }} - </span> - {{ page.next_page.title }} - </div> + <nav class=\"md-footer__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> + {% if page.previous_page %} + <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer__link md-footer__link--prev\" rel=\"prev\"> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </div> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.previous\") }} + </span> + {{ page.previous_page.title }} </div> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + {% if page.next_page %} + <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer__link md-footer__link--next\" rel=\"next\"> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.next\") }} + </span> + {{ page.next_page.title }} </div> - </a> - {% endif %} - </nav> - </div> + </div> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + </nav> {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> @@ -6,21 +6,21 @@ {% set site_url = site_url ~ \"/index.html\" %} {% endif %} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> - <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + <nav class=\"md-header__inner md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header__button md-logo\" aria-label=\"{{ config.site_name }}\"> {% include \"partials/logo.html\" %} </a> - <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + <label class=\"md-header__button md-icon\" for=\"__drawer\"> {% include \".icons/material/menu\" ~ \".svg\" %} </label> - <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> - <div class=\"md-header-nav__ellipsis\"> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__title\" data-md-component=\"header-title\"> + <div class=\"md-header__ellipsis\"> + <div class=\"md-header__topic\"> <span class=\"md-ellipsis\"> {{ config.site_name }} </span> </div> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__topic\" data-md-component=\"header-topic\"> <span class=\"md-ellipsis\"> {% if page and page.meta and page.meta.title %} {{ page.meta.title }} @@ -31,14 +31,35 @@ </div> </div> </div> + <div class=\"md-header__options\"> + {% if config.extra.alternate %} + <div class=\"md-select\"> + {% set icon = config.theme.icon.alternate or \"material/translate\" %} + <span class=\"md-header__button md-icon\"> + {% include \".icons/\" ~ icon ~ \".svg\" %} + </span> + <div class=\"md-select__inner\"> + <ul class=\"md-select__list\"> + {% for alt in config.extra.alternate %} + <li class=\"md-select__item\"> + <a href=\"{{ alt.link | url }}\" class=\"md-select__link\"> + {{ alt.name }} + </a> + </li> + {% endfor %} + </ul> + </div> + </div> + {% endif %} + </div> {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + <label class=\"md-header__button md-icon\" for=\"__search\"> {% include \".icons/material/magnify.svg\" %} </label> {% include \"partials/search.html\" %} {% endif %} {% if config.repo_url %} - <div class=\"md-header-nav__source\"> + <div class=\"md-header__source\"> {% include \"partials/source.html\" %} </div> {% endif %} @@ -4,5 +4,5 @@ {% import \"partials/language.html\" as lang with context %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-component=\"source\"> <div class=\"md-source__icon md-icon\"> {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} {% include \".icons/\" ~ icon ~ \".svg\" %} @@ -12,7 +12,7 @@ <span class=\"md-nav__icon md-icon\"></span> {{ lang.t(\"toc.title\") }} </label> - <ul class=\"md-nav__list\" data-md-scrollfix> + <ul class=\"md-nav__list\" data-md-component=\"toc\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} Upgrading from 5.x to 6.x \u00b6 What's new? \u00b6 Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% (84kb \u2192 67kb) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features Changes to mkdocs.yml \u00b6 Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it. theme.features \u00b6 All feature flags that can be set from mkdocs.yml , like tabs and instant loading , are now prefixed with the name of the component or function they apply to, e.g. navigation.* : 6.x 5.x theme : features : - navigation.tabs - navigation.instant theme : features : - tabs - instant Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/hero.html partials/source-link @@ -22,13 +22,6 @@ {% import \"partials/language.html\" as lang with context %} -<!-- Theme options --> -{% set palette = config.theme.palette %} -{% if not palette is mapping %} - {% set palette = palette | first %} -{% endif %} -{% set font = config.theme.font %} - <!doctype html> <html lang=\"{{ lang.t('language') }}\" class=\"no-js\"> <head> @@ -45,21 +38,8 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Redirect --> - {% if page and page.meta and page.meta.redirect %} - <script> - var anchor = window.location.hash.substr(1) - location.href = '{{ page.meta.redirect }}' + - (anchor ? '#' + anchor : '') - </script> - - <!-- Fallback in case JavaScript is not available --> - <meta http-equiv=\"refresh\" content=\"0; url={{ page.meta.redirect }}\" /> - <meta name=\"robots\" content=\"noindex\" /> - <link rel=\"canonical\" href=\"{{ page.meta.redirect }}\" /> - <!-- Canonical --> - {% elif page.canonical_url %} + {% if page.canonical_url %} <link rel=\"canonical\" href=\"{{ page.canonical_url }}\" /> {% endif %} @@ -96,20 +76,21 @@ <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.css' | url }}\" /> <!-- Extra color palette --> - {% if palette.scheme or palette.primary or palette.accent %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.css' | url }}\" /> - {% endif %} - <!-- Theme-color meta tag for Android --> - {% if palette.primary %} - {% import \"partials/palette.html\" as map %} - {% set primary = map.primary( - palette.primary | replace(\" \", \"-\") | lower - ) %} - <meta name=\"theme-color\" content=\"{{ primary }}\" /> + <!-- Theme-color meta tag for Android --> + {% if palette.primary %} + {% import \"partials/palette.html\" as map %} + {% set primary = map.primary( + palette.primary | replace(\" \", \"-\") | lower + ) %} + <meta name=\"theme-color\" content=\"{{ primary }}\" /> + {% endif %} {% endif %} {% endblock %} @@ -120,7 +101,8 @@ {% block fonts %} <!-- Load fonts from Google --> - {% if font != false %} + {% if config.theme.font != false %} + {% set font = config.theme.font %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin /> <link rel=\"stylesheet\" @@ -169,8 +151,12 @@ <!-- Text direction and color palette, if defined --> {% set direction = config.theme.direction or lang.t('direction') %} - {% if palette.scheme or palette.primary or palette.accent %} - {% set scheme = palette.scheme | lower %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} + {% if not palette is mapping %} + {% set palette = palette | first %} + {% endif %} + {% set scheme = palette.scheme | replace(\" \", \"-\") | lower %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} <body @@ -179,18 +165,19 @@ data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\" > + + <!-- Experimental: set color scheme based on preference --> + {% if \"preference\" == scheme %} + <script> + if (matchMedia(\"(prefers-color-scheme: dark)\").matches) + document.body.setAttribute(\"data-md-color-scheme\", \"slate\") + </script> + {% endif %} + {% else %} <body dir=\"{{ direction }}\"> {% endif %} - <!-- Experimental: set color scheme based on preference --> - {% if \"preference\" == palette.scheme %} - <script> - if (matchMedia(\"(prefers-color-scheme: dark)\").matches) - document.body.setAttribute(\"data-md-color-scheme\", \"slate\") - </script> - {% endif %} - <!-- State toggles - we need to set autocomplete=\"off\" in order to reset the drawer on back button invocation in some browsers @@ -243,15 +230,11 @@ <div class=\"md-container\" data-md-component=\"container\"> <!-- Hero teaser --> - {% block hero %} - {% if page and page.meta and page.meta.hero %} - {% include \"partials/hero.html\" with context %} - {% endif %} - {% endblock %} + {% block hero %}{% endblock %} <!-- Tabs navigation --> {% block tabs %} - {% if \"tabs\" in config.theme.features %} + {% if \"navigation.tabs\" in config.theme.features %} {% include \"partials/tabs.html\" %} {% endif %} {% endblock %} @@ -310,13 +293,6 @@ </a> {% endif %} - <!-- Link to source file --> - {% block source %} - {% if page and page.meta and page.meta.source %} - {% include \"partials/source-link.html\" %} - {% endif %} - {% endblock %} - <!-- Hack: check whether the content contains a h1 headline. If it doesn't, the page title (or respectively site name) is used @@ -370,7 +346,10 @@ \"search.result.placeholder\", \"search.result.none\", \"search.result.one\", - \"search.result.other\" + \"search.result.other\", + \"search.result.more.one\", + \"search.result.more.other\", + \"search.result.term.missing\" ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} @@ -1,12 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% set class = \"md-hero\" %} -{% if \"tabs\" not in config.theme.features %} - {% set class = \"md-hero md-hero--expand\" %} -{% endif %} -<div class=\"{{ class }}\" data-md-component=\"hero\"> - <div class=\"md-hero__inner md-grid\"> - {{ page.meta.hero }} - </div> -</div> @@ -1,14 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% import \"partials/language.html\" as lang with context %} -{% set repo = config.repo_url %} -{% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} -{% endif %} -{% set path = page.meta.path | default(\"\") %} -<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ page.meta.source }}\" class=\"md-content__button md-icon\"> - {{ lang.t(\"meta.source\") }} - {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} - {% include \".icons/\" ~ icon ~ \".svg\" %} -</a> Upgrading from 4.x to 5.x \u00b6 What's new? \u00b6 Reactive architecture \u2013 try app . dialog$ . next ( \"Hi!\" ) in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (admonitions, tables, ...) Changes to mkdocs.yml \u00b6 Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it. theme.feature \u00b6 Optional features like tabs and instant loading are now implemented as flags and can be enabled by listing them in mkdocs.yml under theme.features : 5.x 4.x theme : features : - tabs - instant theme : feature : tabs : true theme.logo.icon \u00b6 The logo icon configuration was centralized under theme.icon.logo and can now be set to any of the icons bundled with the theme : 5.x 4.x theme : icon : logo : material/cloud theme : logo : icon : cloud extra.repo_icon \u00b6 The repo icon configuration was centralized under theme.icon.repo and can now be set to any of the icons bundled with the theme : 5.x 4.x theme : icon : repo : fontawesome/brands/gitlab extra : repo_icon : gitlab extra.search.* \u00b6 Search is now configured as part of the plugin options . Note that the search languages must now be listed as an array of strings and the tokenizer was renamed to separator : 5.x 4.x plugins : - search : separator : '[\\s\\-\\.]+' lang : - en - de - ru extra : search : language : en, de, ru tokenizer : '[\\s\\-\\.]+' extra.social.* \u00b6 Social links stayed in the same place, but the type key was renamed to icon in order to match the new way of specifying which icon to be used: 5.x 4.x extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk extra : social : - type : github link : https://github.com/squidfunk Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/footer.html partials/header.html partials/hero.html partials/language.html partials/logo.html partials/nav-item.html partials/nav.html partials/search.html partials/social.html partials/source-date.html partials/source-link.html partials/source.html partials/tabs-item.html partials/tabs.html partials/toc-item.html partials/toc.html @@ -4,7 +4,6 @@ {% import \"partials/language.html\" as lang with context %} -{% set feature = config.theme.feature %} {% set palette = config.theme.palette %} {% set font = config.theme.font %} <!doctype html> @@ -30,19 +29,6 @@ {% elif config.site_author %} <meta name=\"author\" content=\"{{ config.site_author }}\"> {% endif %} - {% for key in [ - \"clipboard.copy\", - \"clipboard.copied\", - \"search.language\", - \"search.pipeline.stopwords\", - \"search.pipeline.trimmer\", - \"search.result.none\", - \"search.result.one\", - \"search.result.other\", - \"search.tokenizer\" - ] %} - <meta name=\"lang:{{ key }}\" content=\"{{ lang.t(key) }}\"> - {% endfor %} <link rel=\"shortcut icon\" href=\"{{ config.theme.favicon | url }}\"> <meta name=\"generator\" content=\"mkdocs-{{ mkdocs_version }}, mkdocs-material-5.0.0\"> {% endblock %} @@ -56,9 +42,9 @@ {% endif %} {% endblock %} {% block styles %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.********.min.css' | url }}\"> {% if palette.primary or palette.accent %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application-palette.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.********.min.css' | url }}\"> {% endif %} {% if palette.primary %} {% import \"partials/palette.html\" as map %} @@ -69,20 +55,17 @@ {% endif %} {% endblock %} {% block libs %} - <script src=\"{{ 'assets/javascripts/modernizr.********.js' | url }}\"></script> {% endblock %} {% block fonts %} {% if font != false %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family={{ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> <style>body,input{font-family:\"{{ font.text }}\",\"Helvetica Neue\",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",\"Courier New\",Courier,monospace}</style> {% endif %} {% endblock %} - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/material-icons.css' | url }}\"> {% if config.extra.manifest %} <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> {% endif %} @@ -95,47 +77,50 @@ {% endblock %} {% block extrahead %}{% endblock %} </head> + {% set direction = config.theme.direction | default(lang.t('direction')) %} {% if palette.primary or palette.accent %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} - <body dir=\"{{ lang.t('direction') }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> + <body dir=\"{{ direction }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> {% else %} - <body dir=\"{{ lang.t('direction') }}\"> + <body dir=\"{{ direction }}\"> {% endif %} - <svg class=\"md-svg\"> - <defs> - {% set platform = config.extra.repo_icon or config.repo_url %} - {% if \"github\" in platform %} - {% include \"assets/images/icons/github.f0b8504a.svg\" %} - {% elif \"gitlab\" in platform %} - {% include \"assets/images/icons/gitlab.6dd19c00.svg\" %} - {% elif \"bitbucket\" in platform %} - {% include \"assets/images/icons/bitbucket.1b09e088.svg\" %} - {% endif %} - </defs> - </svg> <input class=\"md-toggle\" data-md-toggle=\"drawer\" type=\"checkbox\" id=\"__drawer\" autocomplete=\"off\"> <input class=\"md-toggle\" data-md-toggle=\"search\" type=\"checkbox\" id=\"__search\" autocomplete=\"off\"> - <label class=\"md-overlay\" data-md-component=\"overlay\" for=\"__drawer\"></label> + <label class=\"md-overlay\" for=\"__drawer\"></label> + <div data-md-component=\"skip\"> + {% if page.toc | first is defined %} + {% set skip = page.toc | first %} + <a href=\"{{ skip.url | url }}\" class=\"md-skip\"> + {{ lang.t('skip.link.title') }} + </a> + {% endif %} + </div> + <div data-md-component=\"announce\"> + {% if self.announce() %} + <aside class=\"md-announce\"> + <div class=\"md-announce__inner md-grid md-typeset\"> + {% block announce %}{% endblock %} + </div> + </aside> + {% endif %} + </div> {% block header %} {% include \"partials/header.html\" %} {% endblock %} - <div class=\"md-container\"> + <div class=\"md-container\" data-md-component=\"container\"> {% block hero %} {% if page and page.meta and page.meta.hero %} {% include \"partials/hero.html\" with context %} {% endif %} {% endblock %} - {% if feature.tabs %} - {% include \"partials/tabs.html\" %} - {% endif %} + {% block tabs %} + {% if \"tabs\" in config.theme.features %} + {% include \"partials/tabs.html\" %} + {% endif %} + {% endblock %} - <main class=\"md-main\" role=\"main\"> - <div class=\"md-main__inner md-grid\" data-md-component=\"container\"> + <main class=\"md-main\" data-md-component=\"main\"> + <div class=\"md-main__inner md-grid\"> {% block site_nav %} {% if nav %} <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\"> @@ -160,41 +141,25 @@ <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-icon md-content__icon\">&#xE3C9;</a> + <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> + {% include \".icons/material/pencil.svg\" %} + </a> {% endif %} + {% block source %} + {% if page and page.meta and page.meta.source %} + {% include \"partials/source-link.html\" %} + {% endif %} + {% endblock %} {% if not \"\\x3ch1\" in page.content %} <h1>{{ page.title | default(config.site_name, true)}}</h1> {% endif %} {{ page.content }} - {% block source %} - {% if page and page.meta and page.meta.source %} - <h2 id=\"__source\">{{ lang.t(\"meta.source\") }}</h2> - {% set repo = config.repo_url %} - {% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} - {% endif %} - {% set path = page.meta.path | default([\"\"]) %} - {% set file = page.meta.source %} - <a href=\"{{ [repo, path, file] | join('/') }}\" title=\"{{ file }}\" class=\"md-source-file\"> - {{ file }} - </a> - {% endif %} - {% endblock %} + {% if page and page.meta %} + {% if page.meta.git_revision_date_localized or + page.meta.revision_date + %} + {% include \"partials/source-date.html\" %} - {% if page and page.meta and ( - page.meta.git_revision_date_localized or - page.meta.revision_date - ) %} - {% set label = lang.t(\"source.revision.date\") %} - <hr> - <div class=\"md-source-date\"> - <small> - {% if page.meta.git_revision_date_localized %} - {{ label }}: {{ page.meta.git_revision_date_localized }} - {% elif page.meta.revision_date %} - {{ label }}: {{ page.meta.revision_date }} - {% endif %} - </small> - </div> {% endif %} {% endblock %} {% block disqus %} @@ -208,29 +174,35 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> {% block scripts %} - <script src=\"{{ 'assets/javascripts/application.********.js' | url }}\"></script> - {% if lang.t(\"search.language\") != \"en\" %} - {% set languages = lang.t(\"search.language\").split(\",\") %} - {% if languages | length and languages[0] != \"\" %} - {% set path = \"assets/javascripts/lunr/\" %} - <script src=\"{{ (path ~ 'lunr.stemmer.support.js') | url }}\"></script> - {% for language in languages | map(\"trim\") %} - {% if language != \"en\" %} - {% if language == \"ja\" %} - <script src=\"{{ (path ~ 'tinyseg.js') | url }}\"></script> - {% endif %} - {% if language in (\"ar\", \"da\", \"de\", \"es\", \"fi\", \"fr\", \"hu\", \"it\", \"ja\", \"nl\", \"no\", \"pt\", \"ro\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\") %} - <script src=\"{{ (path ~ 'lunr.' ~ language ~ '.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endfor %} - {% if languages | length > 1 %} - <script src=\"{{ (path ~ 'lunr.multi.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endif %} - <script>app.initialize({version:\"{{ mkdocs_version }}\",url:{base:\"{{ base_url }}\"}})</script> + <script src=\"{{ 'assets/javascripts/vendor.********.min.js' | url }}\"></script> + <script src=\"{{ 'assets/javascripts/bundle.********.min.js' | url }}\"></script> + {%- set translations = {} -%} + {%- for key in [ + \"clipboard.copy\", + \"clipboard.copied\", + \"search.config.lang\", + \"search.config.pipeline\", + \"search.config.separator\", + \"search.result.placeholder\", + \"search.result.none\", + \"search.result.one\", + \"search.result.other\" + ] -%} + {%- set _ = translations.update({ key: lang.t(key) }) -%} + {%- endfor -%} + <script id=\"__lang\" type=\"application/json\"> + {{- translations | tojson -}} + </script> + {% block config %}{% endblock %} + <script> + app = initialize({ + base: \"{{ base_url }}\", + features: {{ config.theme.features | tojson }}, + search: Object.assign({ + worker: \"{{ 'assets/javascripts/worker/search.********.min.js' | url }}\" + }, typeof search !== \"undefined\" && search) + }) + </script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} @@ -5,34 +5,34 @@ <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\"> + <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-back md-footer-nav__button\"></i> + <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} </div> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.previous\") }} </span> {{ page.previous_page.title }} - </span> + </div> </div> </a> {% endif %} {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.next\") }} </span> {{ page.next_page.title }} - </span> + </div> </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-forward md-footer-nav__button\"></i> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} </div> </a> {% endif %} @@ -4,51 +4,43 @@ <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\"> - <div class=\"md-flex\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" aria-label=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"24\" height=\"24\"> - {% endif %} - </a> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <label class=\"md-icon md-icon--menu md-header-nav__button\" for=\"__drawer\"></label> - </div> - <div class=\"md-flex__cell md-flex__cell--stretch\"> - <div class=\"md-flex__ellipsis md-header-nav__title\" data-md-component=\"title\"> - {% if config.site_name == page.title %} - {{ config.site_name }} - {% else %} - <span class=\"md-header-nav__topic\"> - {{ config.site_name }} - </span> - <span class=\"md-header-nav__topic\"> - {% if page and page.meta and page.meta.title %} - {{ page.meta.title }} - {% else %} - {{ page.title }} - {% endif %} - </span> - {% endif %} + <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} + </a> + <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + {% include \".icons/material/menu\" ~ \".svg\" %} + </label> + <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> + {% if config.site_name == page.title %} + <div class=\"md-header-nav__ellipsis md-ellipsis\"> + {{ config.site_name }} </div> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-icon md-icon--search md-header-nav__button\" for=\"__search\"></label> - {% include \"partials/search.html\" %} - {% endif %} - </div> - {% if config.repo_url %} - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <div class=\"md-header-nav__source\"> - {% include \"partials/source.html\" %} - </div> + {% else %} + <div class=\"md-header-nav__ellipsis\"> + <span class=\"md-header-nav__topic md-ellipsis\"> + {{ config.site_name }} + </span> + <span class=\"md-header-nav__topic md-ellipsis\"> + {% if page and page.meta and page.meta.title %} + {{ page.meta.title }} + {% else %} + {{ page.title }} + {% endif %} + </span> </div> {% endif %} </div> + {% if \"search\" in config[\"plugins\"] %} + <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + </label> + {% include \"partials/search.html\" %} + {% endif %} + {% if config.repo_url %} + <div class=\"md-header-nav__source\"> + {% include \"partials/source.html\" %} + </div> + {% endif %} </nav> </header> @@ -4,9 +4,8 @@ -{% set feature = config.theme.feature %} {% set class = \"md-hero\" %} -{% if not feature.tabs %} +{% if \"tabs\" not in config.theme.features %} {% set class = \"md-hero md-hero--expand\" %} {% endif %} <div class=\"{{ class }}\" data-md-component=\"hero\"> @@ -4,12 +4,4 @@ {% import \"partials/language/\" + config.theme.language + \".html\" as lang %} {% import \"partials/language/en.html\" as fallback %} -{% macro t(key) %}{{ { - \"direction\": config.theme.direction, - \"search.language\": ( - config.extra.search | default({}) - ).language, - \"search.tokenizer\": ( - config.extra.search | default({}) - ).tokenizer | default(\"\", true), -}[key] or lang.t(key) or fallback.t(key) }}{% endmacro %} +{% macro t(key) %}{{ lang.t(key) | default(fallback.t(key)) }}{% endmacro %} @@ -0,0 +1,9 @@ +{#- + This file was automatically generated - do not edit +-#} +{% if config.theme.logo %} + <img src=\"{{ config.theme.logo | url }}\" alt=\"logo\"> +{% else %} + {% set icon = config.theme.icon.logo or \"material/library\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} +{% endif %} @@ -14,9 +14,15 @@ {% endif %} <label class=\"md-nav__link\" for=\"{{ path }}\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/chevron-right.svg\" %} + </span> </label> - <nav class=\"md-nav\" data-md-component=\"collapsible\" data-md-level=\"{{ level }}\"> + <nav class=\"md-nav\" aria-label=\"{{ nav_item.title }}\" data-md-level=\"{{ level }}\"> <label class=\"md-nav__title\" for=\"{{ path }}\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ nav_item.title }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> @@ -39,6 +45,9 @@ {% if toc | first is defined %} <label class=\"md-nav__link md-nav__link--active\" for=\"__toc\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/table-of-contents.svg\" %} + </span> </label> {% endif %} <a href=\"{{ nav_item.url | url }}\" title=\"{{ nav_item.title | striptags }}\" class=\"md-nav__link md-nav__link--active\"> @@ -4,14 +4,10 @@ -<nav class=\"md-nav md-nav--primary\" data-md-level=\"0\"> - <label class=\"md-nav__title md-nav__title--site\" for=\"__drawer\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"48\" height=\"48\"> - {% endif %} +<nav class=\"md-nav md-nav--primary\" aria-label=\"{{ lang.t('nav.title') }}\" data-md-level=\"0\"> + <label class=\"md-nav__title\" for=\"__drawer\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} </a> {{ config.site_name }} </label> @@ -6,15 +6,18 @@ <label class=\"md-search__overlay\" for=\"__search\"></label> <div class=\"md-search__inner\" role=\"search\"> <form class=\"md-search__form\" name=\"search\"> - <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"Search\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"query\" data-md-state=\"active\"> + <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"{{ lang.t('search.placeholder') }}\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"search-query\" data-md-state=\"active\"> <label class=\"md-search__icon md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + {% include \".icons/material/arrow-left.svg\" %} </label> - <button type=\"reset\" class=\"md-icon md-search__icon\" data-md-component=\"reset\" tabindex=\"-1\"> - &#xE5CD; + <button type=\"reset\" class=\"md-search__icon md-icon\" aria-label=\"{{ lang.t('search.reset') }}\" data-md-component=\"search-reset\" tabindex=\"-1\"> + {% include \".icons/material/close.svg\" %} </button> </form> <div class=\"md-search__output\"> <div class=\"md-search__scrollwrap\" data-md-scrollfix> - <div class=\"md-search-result\" data-md-component=\"result\"> + <div class=\"md-search-result\" data-md-component=\"search-result\"> <div class=\"md-search-result__meta\"> {{ lang.t(\"search.result.placeholder\") }} </div> @@ -4,9 +4,12 @@ {% if config.extra.social %} <div class=\"md-footer-social\"> - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/font-awesome.css' | url }}\"> {% for social in config.extra.social %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ social.type }}\" class=\"md-footer-social__link fa fa-{{ social.type }}\"></a> + {% set _,rest = social.link.split(\"//\") %} + {% set domain = rest.split(\"/\")[0] %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ domain }}\" class=\"md-footer-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> {% endfor %} </div> {% endif %} @@ -0,0 +1,15 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set label = lang.t(\"source.revision.date\") %} +<hr> +<div class=\"md-source-date\"> + <small> + {% if page.meta.git_revision_date_localized %} + {{ label }}: {{ page.meta.git_revision_date_localized }} + {% elif page.meta.revision_date %} + {{ label }}: {{ page.meta.revision_date }} + {% endif %} + </small> +</div> @@ -0,0 +1,13 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set repo = config.repo_url %} +{% if repo | last == \"/\" %} + {% set repo = repo[:-1] %} +{% endif %} +{% set path = page.meta.path | default([\"\"]) %} +<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ file }}\" class=\"md-content__button md-icon\"> + {{ lang.t(\"meta.source\") }} + {% include \".icons/\" ~ config.theme.icon.repo ~ \".svg\" %} +</a> @@ -4,24 +4,11 @@ {% import \"partials/language.html\" as lang with context %} -{% set platform = config.extra.repo_icon or config.repo_url %} -{% if \"github\" in platform %} - {% set repo_type = \"github\" %} -{% elif \"gitlab\" in platform %} - {% set repo_type = \"gitlab\" %} -{% elif \"bitbucket\" in platform %} - {% set repo_type = \"bitbucket\" %} -{% else %} - {% set repo_type = \"\" %} -{% endif %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-source=\"{{ repo_type }}\"> - {% if repo_type %} - <div class=\"md-source__icon\"> - <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"> - <use xlink:href=\"#__{{ repo_type }}\" width=\"24\" height=\"24\"></use> - </svg> - </div> - {% endif %} +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> + <div class=\"md-source__icon md-icon\"> + {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} + </div> <div class=\"md-source__repository\"> {{ config.repo_name }} </div> @@ -4,7 +4,7 @@ -{% if nav_item.is_homepage %} +{% if nav_item.is_homepage or nav_item.url == \"index.html\" %} <li class=\"md-tabs__item\"> {% if not page.ancestors | length and nav | selectattr(\"url\", page.url) %} <a href=\"{{ nav_item.url | url }}\" class=\"md-tabs__link md-tabs__link--active\"> @@ -5,7 +5,7 @@ {% if page.ancestors | length > 0 %} {% set class = \"md-tabs md-tabs--active\" %} {% endif %} -<nav class=\"{{ class }}\" data-md-component=\"tabs\"> +<nav class=\"{{ class }}\" aria-label=\"{{ lang.t('tabs.title') }}\" data-md-component=\"tabs\"> <div class=\"md-tabs__inner md-grid\"> <ul class=\"md-tabs__list\"> {% for nav_item in nav %} @@ -6,7 +6,7 @@ {{ toc_item.title }} </a> {% if toc_item.children %} - <nav class=\"md-nav\"> + <nav class=\"md-nav\" aria-label=\"{{ toc_item.title }}\"> <ul class=\"md-nav__list\"> {% for toc_item in toc_item.children %} {% include \"partials/toc-item.html\" %} @@ -4,35 +4,22 @@ {% import \"partials/language.html\" as lang with context %} -<nav class=\"md-nav md-nav--secondary\"> +<nav class=\"md-nav md-nav--secondary\" aria-label=\"{{ lang.t('toc.title') }}\"> {% endif %} {% if toc | first is defined %} <label class=\"md-nav__title\" for=\"__toc\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ lang.t(\"toc.title\") }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} - {% if page.meta.source and page.meta.source | length > 0 %} - <li class=\"md-nav__item\"> - <a href=\"#__source\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.source\") }} - </a> - </li> - {% endif %} - {% set disqus = config.extra.disqus %} - {% if page and page.meta and page.meta.disqus is string %} - {% set disqus = page.meta.disqus %} - {% endif %} - {% if not page.is_homepage and disqus %} - <li class=\"md-nav__item\"> - <a href=\"#__comments\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.comments\") }} - </a> - </li> - {% endif %} </ul> {% endif %} </nav> Upgrading from 3.x to 4.x \u00b6 What's new? \u00b6 Material for MkDocs 4 fixes incorrect layout on Chinese systems. The fix includes a mandatory change of the base font-size from 10px to 20px which means all rem values needed to be updated. Within the theme, px to rem calculation is now encapsulated in a new function called px2rem which is part of the SASS code base. If you use Material for MkDocs with custom CSS that is based on rem values, note that those values must now be divided by 2. Now, 1.0rem doesn't map to 10px , but 20px . To learn more about the problem and implications, please refer to #911 in which the problem was discovered and fixed. Changes to mkdocs.yml \u00b6 None. Changes to *.html files \u00b6 None.","title":"How to upgrade"},{"location":"upgrade/#how-to-upgrade","text":"Upgrade to the latest version with: pip install --upgrade mkdocs-material Show the currently installed version with: pip show mkdocs-material","title":"How to upgrade"},{"location":"upgrade/#upgrading-from-7x-to-8x","text":"","title":"Upgrading from 7.x to 8.x"},{"location":"upgrade/#whats-new","text":"Added support for code annotations Added support for anchor tracking Added support for version warning Added copyright partial for easier override Removed deprecated content tabs legacy implementation Removed deprecated seealso admonition type Removed deprecated site_keywords setting (unsupported by MkDocs) Removed deprecated prebuilt search index support Removed deprecated web app manifest \u2013 use customization Removed extracopyright variable \u2013 use new copyright partial Removed Disqus integation \u2013 use customization Switched to :is() selectors for simple selector lists Switched autoprefixer from last 4 years to last 2 years Improved CSS overall to match modern standards Improved CSS variable semantics for fonts Improved extensibility by restructuring partials Improved handling of details when printing Improved keyboard navigation for footnotes Fixed #3214 : Search highlighting breaks site when empty","title":"What's new?"},{"location":"upgrade/#changes-to-mkdocsyml","text":"","title":"Changes to mkdocs.yml"},{"location":"upgrade/#pymdownxtabbed","text":"Support for the legacy style of the Tabbed extension was dropped in favor of the new, alternate implementation which has better behavior on mobile viewports : 8.x 7.x markdown_extensions : - pymdownx.tabbed : alternate_style : true markdown_extensions : - pymdownx.tabbed","title":"pymdownx.tabbed"},{"location":"upgrade/#pymdownxsuperfences","text":"The *-experimental suffix must be removed from the custom fence class property, which is used to target code blocks to be rendered as diagrams using Mermaid.js : 8.x 7.x markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid-experimental format : !!python/name:pymdownx.superfences.fence_code_format","title":"pymdownx.superfences"},{"location":"upgrade/#google_analytics","text":"This option was deprecated in MkDocs 1.2.0 , as the implementation of a JavaScript-based analytics integration is the responsibility of a theme. The following lines must be changed: 8.x 7.x extra : analytics : provider : google property : UA-XXXXXXXX-X google_analytics : - UA-XXXXXXXX-X - auto","title":"google_analytics"},{"location":"upgrade/#changes-to-html-files","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/copyright.html partials/footer.html partials/social.html @@ -13,11 +13,6 @@ {% elif config.site_description %} <meta name=\"description\" content=\"{{ config.site_description }}\"> {% endif %} - {% if page and page.meta and page.meta.keywords %} - <meta name=\"keywords\" content=\"{{ page.meta.keywords }}\"> - {% elif config.site_keywords %} - <meta name=\"keywords\" content=\"{{ config.site_keywords }}\"> - {% endif %} {% if page and page.meta and page.meta.author %} <meta name=\"author\" content=\"{{ page.meta.author }}\"> {% elif config.site_author %} @@ -61,15 +56,13 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> + <style>:root{--md-text-font:\"{{ font.text }}\";--md-code-font:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} - {% if config.extra.manifest %} - <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> - {% endif %} {% for path in config[\"extra_css\"] %} <link rel=\"stylesheet\" href=\"{{ path | url }}\"> {% endfor %} + {% include \"partials/javascripts/base.html\" %} {% block analytics %} {% include \"partials/integrations/analytics.html\" %} {% endblock %} @@ -89,7 +82,6 @@ <body dir=\"{{ direction }}\"> {% endif %} {% set features = config.theme.features or [] %} - {% include \"partials/javascripts/base.html\" %} {% if not config.theme.palette is mapping %} {% include \"partials/javascripts/palette.html\" %} {% endif %} @@ -106,13 +98,25 @@ </div> <div data-md-component=\"announce\"> {% if self.announce() %} - <aside class=\"md-banner md-announce\"> - <div class=\"md-banner__inner md-announce__inner md-grid md-typeset\"> + <aside class=\"md-banner\"> + <div class=\"md-banner__inner md-grid md-typeset\"> {% block announce %}{% endblock %} </div> </aside> {% endif %} </div> + {% if config.extra.version %} + <div data-md-component=\"outdated\" hidden> + <aside class=\"md-banner md-banner--warning\"> + {% if self.outdated() %} + <div class=\"md-banner__inner md-grid md-typeset\"> + {% block outdated %}{% endblock %} + </div> + {% include \"partials/javascripts/outdated.html\" %} + {% endif %} + </aside> + </div> + {% endif %} {% block header %} {% include \"partials/header.html\" %} {% endblock %} @@ -156,25 +160,7 @@ <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} - {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> - {% include \".icons/material/pencil.svg\" %} - </a> - {% endif %} - {% if not \"\\x3ch1\" in page.content %} - <h1>{{ page.title | d(config.site_name, true)}}</h1> - {% endif %} - {{ page.content }} - {% if page and page.meta %} - {% if page.meta.git_revision_date_localized or - page.meta.revision_date - %} - {% include \"partials/source-file.html\" %} - {% endif %} - {% endif %} - {% endblock %} - {% block disqus %} - {% include \"partials/integrations/disqus.html\" %} + {% include \"partials/content.html\" %} {% endblock %} </article> </div> @@ -38,13 +38,6 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Page keywords --> - {% if page and page.meta and page.meta.keywords %} - <meta name=\"keywords\" content=\"{{ page.meta.keywords }}\" /> - {% elif config.site_keywords %} - <meta name=\"keywords\" content=\"{{ config.site_keywords }}\" /> - {% endif %} - <!-- Page author --> {% if page and page.meta and page.meta.author %} <meta name=\"author\" content=\"{{ page.meta.author }}\" /> @@ -120,27 +113,21 @@ /> <style> :root { - --md-text-font-family: \"{{ font.text }}\"; - --md-code-font-family: \"{{ font.code }}\"; + --md-text-font: \"{{ font.text }}\"; + --md-code-font: \"{{ font.code }}\"; } </style> {% endif %} {% endblock %} - <!-- Progressive Web App Manifest --> - {% if config.extra.manifest %} - <link - rel=\"manifest\" - href=\"{{ config.extra.manifest | url }}\" - crossorigin=\"use-credentials\" - /> - {% endif %} - <!-- Custom style sheets --> {% for path in config[\"extra_css\"] %} <link rel=\"stylesheet\" href=\"{{ path | url }}\" /> {% endfor %} + <!-- Helper functions for inline scripts --> + {% include \"partials/javascripts/base.html\" %} + <!-- Analytics --> {% block analytics %} {% include \"partials/integrations/analytics.html\" %} @@ -172,7 +159,6 @@ <!-- Retrieve features from configuration --> {% set features = config.theme.features or [] %} - {% include \"partials/javascripts/base.html\" %} <!-- User preference: color palette --> {% if not config.theme.palette is mapping %} @@ -214,14 +200,28 @@ <!-- Announcement bar --> <div data-md-component=\"announce\"> {% if self.announce() %} - <aside class=\"md-banner md-announce\"> - <div class=\"md-banner__inner md-announce__inner md-grid md-typeset\"> + <aside class=\"md-banner\"> + <div class=\"md-banner__inner md-grid md-typeset\"> {% block announce %}{% endblock %} </div> </aside> {% endif %} </div> + <!-- Version warning --> + {% if config.extra.version %} + <div data-md-component=\"outdated\" hidden> + <aside class=\"md-banner md-banner--warning\"> + {% if self.outdated() %} + <div class=\"md-banner__inner md-grid md-typeset\"> + {% block outdated %}{% endblock %} + </div> + {% include \"partials/javascripts/outdated.html\" %} + {% endif %} + </aside> + </div> + {% endif %} + <!-- Header --> {% block header %} {% include \"partials/header.html\" %} @@ -295,49 +295,11 @@ {% block content %} - - <!-- Edit button --> - {% if page.edit_url %} - <a - href=\"{{ page.edit_url }}\" - title=\"{{ lang.t('edit.link.title') }}\" - class=\"md-content__button md-icon\" - > - {% include \".icons/material/pencil.svg\" %} - </a> - {% endif %} - - <!-- - Hack: check whether the content contains a h1 headline. If it - doesn't, the page title (or respectively site name) is used - as the main headline. - --> - {% if not \"\\x3ch1\" in page.content %} - <h1>{{ page.title | d(config.site_name, true)}}</h1> - {% endif %} - - <!-- Markdown content --> - {{ page.content }} - - <!-- Last update of source file --> - {% if page and page.meta %} - {% if page.meta.git_revision_date_localized or - page.meta.revision_date - %} - {% include \"partials/source-file.html\" %} - {% endif %} - {% endif %} - {% endblock %} - - <!-- Disqus integration --> - {% block disqus %} - {% include \"partials/integrations/disqus.html\" %} + {% include \"partials/content.html\" %} {% endblock %} </article> </div> @@ -0,0 +1,16 @@ +{#- + This file was automatically generated - do not edit +-#} +<div class=\"md-copyright\"> + {% if config.copyright %} + <div class=\"md-copyright__highlight\"> + {{ config.copyright }} + </div> + {% endif %} + {% if not config.extra.generator == false %} + Made with + <a href=\"https://squidfunk.github.io/mkdocs-material/\" target=\"_blank\" rel=\"noopener\"> + Material for MkDocs + </a> + {% endif %} +</div> @@ -41,21 +40,10 @@ {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> - <div class=\"md-footer-copyright\"> - {% if config.copyright %} - <div class=\"md-footer-copyright__highlight\"> - {{ config.copyright }} - </div> - {% endif %} - {% if not config.extra.generator == false %} - Made with - <a href=\"https://squidfunk.github.io/mkdocs-material/\" target=\"_blank\" rel=\"noopener\"> - Material for MkDocs - </a> - {% endif %} - {{ extracopyright }} - </div> - {% include \"partials/social.html\" %} + {% include \"partials/copyright.html\" %} + {% if config.extra.social %} + {% include \"partials/social.html\" %} + {% endif %} </div> </div> </footer> @@ -4,17 +4,15 @@ -{% if config.extra.social %} - <div class=\"md-footer-social\"> - {% for social in config.extra.social %} - {% set title = social.name %} - {% if not title and \"//\" in social.link %} - {% set _,url = social.link.split(\"//\") %} - {% set title = url.split(\"/\")[0] %} - {% endif %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ title | e }}\" class=\"md-footer-social__link\"> - {% include \".icons/\" ~ social.icon ~ \".svg\" %} - </a> - {% endfor %} - </div> -{% endif %} +<div class=\"md-social\"> + {% for social in config.extra.social %} + {% set title = social.name %} + {% if not title and \"//\" in social.link %} + {% set _, url = social.link.split(\"//\") %} + {% set title = url.split(\"/\")[0] %} + {% endif %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ title | e }}\" class=\"md-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> + {% endfor %} +</div>","title":"Changes to *.html files"},{"location":"upgrade/#upgrading-from-6x-to-7x","text":"","title":"Upgrading from 6.x to 7.x"},{"location":"upgrade/#whats-new_1","text":"Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (\u2013480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch","title":"What's new?"},{"location":"upgrade/#changes-to-mkdocsyml_1","text":"","title":"Changes to mkdocs.yml"},{"location":"upgrade/#extraversionmethod","text":"The versioning method configuration was renamed to extra.version.provider to allow for different versioning strategies in the future: 7.x 6.x extra : version : provider : mike extra : version : method : mike","title":"extra.version.method"},{"location":"upgrade/#changes-to-html-files_1","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/footer.html partials/header.html partials/source.html partials/toc.html @@ -61,7 +61,7 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>body,input{font-family:\"{{ font.text }}\",-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",SFMono-Regular,Consolas,Menlo,monospace}</style> + <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} {% if config.extra.manifest %} @@ -131,7 +131,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"navigation\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"sidebar\" data-md-type=\"navigation\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/nav.html\" %} @@ -143,7 +143,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"toc\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"toc\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"toc\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/toc.html\" %} @@ -152,7 +152,7 @@ </div> {% endif %} {% endblock %} - <div class=\"md-content\"> + <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} @@ -183,10 +183,18 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> - {% block scripts %} - <script src=\"{{ 'assets/javascripts/vendor.18f0862e.min.js' | url }}\"></script> - <script src=\"{{ 'assets/javascripts/bundle.994580cf.min.js' | url }}\"></script> - {%- set translations = {} -%} + <div class=\"md-dialog\" data-md-component=\"dialog\"> + <div class=\"md-dialog__inner md-typeset\"></div> + </div> + {% block config %} + {%- set app = { + \"base\": base_url, + \"features\": features, + \"translations\": {}, + \"search\": \"assets/javascripts/workers/search.217ffd95.min.js\" | url, + \"version\": config.extra.version or None + } -%} + {%- set translations = app.translations -%} {%- for key in [ \"clipboard.copy\", \"clipboard.copied\", @@ -204,19 +212,12 @@ ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} - <script id=\"__lang\" type=\"application/json\"> - {{- translations | tojson -}} - </script> - {% block config %}{% endblock %} - <script> - app = initialize({ - base: \"{{ base_url }}\", - features: {{ features or [] | tojson }}, - search: Object.assign({ - worker: \"{{ 'assets/javascripts/worker/search.9c0e82ba.min.js' | url }}\" - }, typeof search !== \"undefined\" && search) - }) + <script id=\"__config\" type=\"application/json\"> + {{- app | tojson -}} </script> + {% endblock %} + {% block scripts %} + <script src=\"{{ 'assets/javascripts/bundle.926459b3.min.js' | url }}\"></script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} - <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> - {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-left.svg\" %} - </div> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.previous\") }} - </span> - {{ page.previous_page.title }} - </div> - </div> - </a> - {% endif %} - {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.next\") }} - </span> - {{ page.next_page.title }} - </div> + <nav class=\"md-footer__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> + {% if page.previous_page %} + <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer__link md-footer__link--prev\" rel=\"prev\"> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </div> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.previous\") }} + </span> + {{ page.previous_page.title }} </div> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + {% if page.next_page %} + <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer__link md-footer__link--next\" rel=\"next\"> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.next\") }} + </span> + {{ page.next_page.title }} </div> - </a> - {% endif %} - </nav> - </div> + </div> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + </nav> {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> @@ -6,21 +6,21 @@ {% set site_url = site_url ~ \"/index.html\" %} {% endif %} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> - <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + <nav class=\"md-header__inner md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header__button md-logo\" aria-label=\"{{ config.site_name }}\"> {% include \"partials/logo.html\" %} </a> - <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + <label class=\"md-header__button md-icon\" for=\"__drawer\"> {% include \".icons/material/menu\" ~ \".svg\" %} </label> - <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> - <div class=\"md-header-nav__ellipsis\"> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__title\" data-md-component=\"header-title\"> + <div class=\"md-header__ellipsis\"> + <div class=\"md-header__topic\"> <span class=\"md-ellipsis\"> {{ config.site_name }} </span> </div> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__topic\" data-md-component=\"header-topic\"> <span class=\"md-ellipsis\"> {% if page and page.meta and page.meta.title %} {{ page.meta.title }} @@ -31,14 +31,35 @@ </div> </div> </div> + <div class=\"md-header__options\"> + {% if config.extra.alternate %} + <div class=\"md-select\"> + {% set icon = config.theme.icon.alternate or \"material/translate\" %} + <span class=\"md-header__button md-icon\"> + {% include \".icons/\" ~ icon ~ \".svg\" %} + </span> + <div class=\"md-select__inner\"> + <ul class=\"md-select__list\"> + {% for alt in config.extra.alternate %} + <li class=\"md-select__item\"> + <a href=\"{{ alt.link | url }}\" class=\"md-select__link\"> + {{ alt.name }} + </a> + </li> + {% endfor %} + </ul> + </div> + </div> + {% endif %} + </div> {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + <label class=\"md-header__button md-icon\" for=\"__search\"> {% include \".icons/material/magnify.svg\" %} </label> {% include \"partials/search.html\" %} {% endif %} {% if config.repo_url %} - <div class=\"md-header-nav__source\"> + <div class=\"md-header__source\"> {% include \"partials/source.html\" %} </div> {% endif %} @@ -4,5 +4,5 @@ {% import \"partials/language.html\" as lang with context %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-component=\"source\"> <div class=\"md-source__icon md-icon\"> {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} {% include \".icons/\" ~ icon ~ \".svg\" %} @@ -12,7 +12,7 @@ <span class=\"md-nav__icon md-icon\"></span> {{ lang.t(\"toc.title\") }} </label> - <ul class=\"md-nav__list\" data-md-scrollfix> + <ul class=\"md-nav__list\" data-md-component=\"toc\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %}","title":"Changes to *.html files"},{"location":"upgrade/#upgrading-from-5x-to-6x","text":"","title":"Upgrading from 5.x to 6.x"},{"location":"upgrade/#whats-new_2","text":"Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% (84kb \u2192 67kb) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features","title":"What's new?"},{"location":"upgrade/#changes-to-mkdocsyml_2","text":"Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.","title":"Changes to mkdocs.yml"},{"location":"upgrade/#themefeatures","text":"All feature flags that can be set from mkdocs.yml , like tabs and instant loading , are now prefixed with the name of the component or function they apply to, e.g. navigation.* : 6.x 5.x theme : features : - navigation.tabs - navigation.instant theme : features : - tabs - instant","title":"theme.features"},{"location":"upgrade/#changes-to-html-files_2","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/hero.html partials/source-link @@ -22,13 +22,6 @@ {% import \"partials/language.html\" as lang with context %} -<!-- Theme options --> -{% set palette = config.theme.palette %} -{% if not palette is mapping %} - {% set palette = palette | first %} -{% endif %} -{% set font = config.theme.font %} - <!doctype html> <html lang=\"{{ lang.t('language') }}\" class=\"no-js\"> <head> @@ -45,21 +38,8 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Redirect --> - {% if page and page.meta and page.meta.redirect %} - <script> - var anchor = window.location.hash.substr(1) - location.href = '{{ page.meta.redirect }}' + - (anchor ? '#' + anchor : '') - </script> - - <!-- Fallback in case JavaScript is not available --> - <meta http-equiv=\"refresh\" content=\"0; url={{ page.meta.redirect }}\" /> - <meta name=\"robots\" content=\"noindex\" /> - <link rel=\"canonical\" href=\"{{ page.meta.redirect }}\" /> - <!-- Canonical --> - {% elif page.canonical_url %} + {% if page.canonical_url %} <link rel=\"canonical\" href=\"{{ page.canonical_url }}\" /> {% endif %} @@ -96,20 +76,21 @@ <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.css' | url }}\" /> <!-- Extra color palette --> - {% if palette.scheme or palette.primary or palette.accent %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.css' | url }}\" /> - {% endif %} - <!-- Theme-color meta tag for Android --> - {% if palette.primary %} - {% import \"partials/palette.html\" as map %} - {% set primary = map.primary( - palette.primary | replace(\" \", \"-\") | lower - ) %} - <meta name=\"theme-color\" content=\"{{ primary }}\" /> + <!-- Theme-color meta tag for Android --> + {% if palette.primary %} + {% import \"partials/palette.html\" as map %} + {% set primary = map.primary( + palette.primary | replace(\" \", \"-\") | lower + ) %} + <meta name=\"theme-color\" content=\"{{ primary }}\" /> + {% endif %} {% endif %} {% endblock %} @@ -120,7 +101,8 @@ {% block fonts %} <!-- Load fonts from Google --> - {% if font != false %} + {% if config.theme.font != false %} + {% set font = config.theme.font %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin /> <link rel=\"stylesheet\" @@ -169,8 +151,12 @@ <!-- Text direction and color palette, if defined --> {% set direction = config.theme.direction or lang.t('direction') %} - {% if palette.scheme or palette.primary or palette.accent %} - {% set scheme = palette.scheme | lower %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} + {% if not palette is mapping %} + {% set palette = palette | first %} + {% endif %} + {% set scheme = palette.scheme | replace(\" \", \"-\") | lower %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} <body @@ -179,18 +165,19 @@ data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\" > + + <!-- Experimental: set color scheme based on preference --> + {% if \"preference\" == scheme %} + <script> + if (matchMedia(\"(prefers-color-scheme: dark)\").matches) + document.body.setAttribute(\"data-md-color-scheme\", \"slate\") + </script> + {% endif %} + {% else %} <body dir=\"{{ direction }}\"> {% endif %} - <!-- Experimental: set color scheme based on preference --> - {% if \"preference\" == palette.scheme %} - <script> - if (matchMedia(\"(prefers-color-scheme: dark)\").matches) - document.body.setAttribute(\"data-md-color-scheme\", \"slate\") - </script> - {% endif %} - <!-- State toggles - we need to set autocomplete=\"off\" in order to reset the drawer on back button invocation in some browsers @@ -243,15 +230,11 @@ <div class=\"md-container\" data-md-component=\"container\"> <!-- Hero teaser --> - {% block hero %} - {% if page and page.meta and page.meta.hero %} - {% include \"partials/hero.html\" with context %} - {% endif %} - {% endblock %} + {% block hero %}{% endblock %} <!-- Tabs navigation --> {% block tabs %} - {% if \"tabs\" in config.theme.features %} + {% if \"navigation.tabs\" in config.theme.features %} {% include \"partials/tabs.html\" %} {% endif %} {% endblock %} @@ -310,13 +293,6 @@ </a> {% endif %} - <!-- Link to source file --> - {% block source %} - {% if page and page.meta and page.meta.source %} - {% include \"partials/source-link.html\" %} - {% endif %} - {% endblock %} - <!-- Hack: check whether the content contains a h1 headline. If it doesn't, the page title (or respectively site name) is used @@ -370,7 +346,10 @@ \"search.result.placeholder\", \"search.result.none\", \"search.result.one\", - \"search.result.other\" + \"search.result.other\", + \"search.result.more.one\", + \"search.result.more.other\", + \"search.result.term.missing\" ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} @@ -1,12 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% set class = \"md-hero\" %} -{% if \"tabs\" not in config.theme.features %} - {% set class = \"md-hero md-hero--expand\" %} -{% endif %} -<div class=\"{{ class }}\" data-md-component=\"hero\"> - <div class=\"md-hero__inner md-grid\"> - {{ page.meta.hero }} - </div> -</div> @@ -1,14 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% import \"partials/language.html\" as lang with context %} -{% set repo = config.repo_url %} -{% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} -{% endif %} -{% set path = page.meta.path | default(\"\") %} -<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ page.meta.source }}\" class=\"md-content__button md-icon\"> - {{ lang.t(\"meta.source\") }} - {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} - {% include \".icons/\" ~ icon ~ \".svg\" %} -</a>","title":"Changes to *.html files"},{"location":"upgrade/#upgrading-from-4x-to-5x","text":"","title":"Upgrading from 4.x to 5.x"},{"location":"upgrade/#whats-new_3","text":"Reactive architecture \u2013 try app . dialog$ . next ( \"Hi!\" ) in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (admonitions, tables, ...)","title":"What's new?"},{"location":"upgrade/#changes-to-mkdocsyml_3","text":"Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.","title":"Changes to mkdocs.yml"},{"location":"upgrade/#themefeature","text":"Optional features like tabs and instant loading are now implemented as flags and can be enabled by listing them in mkdocs.yml under theme.features : 5.x 4.x theme : features : - tabs - instant theme : feature : tabs : true","title":"theme.feature"},{"location":"upgrade/#themelogoicon","text":"The logo icon configuration was centralized under theme.icon.logo and can now be set to any of the icons bundled with the theme : 5.x 4.x theme : icon : logo : material/cloud theme : logo : icon : cloud","title":"theme.logo.icon"},{"location":"upgrade/#extrarepo_icon","text":"The repo icon configuration was centralized under theme.icon.repo and can now be set to any of the icons bundled with the theme : 5.x 4.x theme : icon : repo : fontawesome/brands/gitlab extra : repo_icon : gitlab","title":"extra.repo_icon"},{"location":"upgrade/#extrasearch","text":"Search is now configured as part of the plugin options . Note that the search languages must now be listed as an array of strings and the tokenizer was renamed to separator : 5.x 4.x plugins : - search : separator : '[\\s\\-\\.]+' lang : - en - de - ru extra : search : language : en, de, ru tokenizer : '[\\s\\-\\.]+'","title":"extra.search.*"},{"location":"upgrade/#extrasocial","text":"Social links stayed in the same place, but the type key was renamed to icon in order to match the new way of specifying which icon to be used: 5.x 4.x extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk extra : social : - type : github link : https://github.com/squidfunk","title":"extra.social.*"},{"location":"upgrade/#changes-to-html-files_3","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html partials/footer.html partials/header.html partials/hero.html partials/language.html partials/logo.html partials/nav-item.html partials/nav.html partials/search.html partials/social.html partials/source-date.html partials/source-link.html partials/source.html partials/tabs-item.html partials/tabs.html partials/toc-item.html partials/toc.html @@ -4,7 +4,6 @@ {% import \"partials/language.html\" as lang with context %} -{% set feature = config.theme.feature %} {% set palette = config.theme.palette %} {% set font = config.theme.font %} <!doctype html> @@ -30,19 +29,6 @@ {% elif config.site_author %} <meta name=\"author\" content=\"{{ config.site_author }}\"> {% endif %} - {% for key in [ - \"clipboard.copy\", - \"clipboard.copied\", - \"search.language\", - \"search.pipeline.stopwords\", - \"search.pipeline.trimmer\", - \"search.result.none\", - \"search.result.one\", - \"search.result.other\", - \"search.tokenizer\" - ] %} - <meta name=\"lang:{{ key }}\" content=\"{{ lang.t(key) }}\"> - {% endfor %} <link rel=\"shortcut icon\" href=\"{{ config.theme.favicon | url }}\"> <meta name=\"generator\" content=\"mkdocs-{{ mkdocs_version }}, mkdocs-material-5.0.0\"> {% endblock %} @@ -56,9 +42,9 @@ {% endif %} {% endblock %} {% block styles %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.********.min.css' | url }}\"> {% if palette.primary or palette.accent %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application-palette.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.********.min.css' | url }}\"> {% endif %} {% if palette.primary %} {% import \"partials/palette.html\" as map %} @@ -69,20 +55,17 @@ {% endif %} {% endblock %} {% block libs %} - <script src=\"{{ 'assets/javascripts/modernizr.********.js' | url }}\"></script> {% endblock %} {% block fonts %} {% if font != false %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family={{ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> <style>body,input{font-family:\"{{ font.text }}\",\"Helvetica Neue\",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",\"Courier New\",Courier,monospace}</style> {% endif %} {% endblock %} - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/material-icons.css' | url }}\"> {% if config.extra.manifest %} <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> {% endif %} @@ -95,47 +77,50 @@ {% endblock %} {% block extrahead %}{% endblock %} </head> + {% set direction = config.theme.direction | default(lang.t('direction')) %} {% if palette.primary or palette.accent %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} - <body dir=\"{{ lang.t('direction') }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> + <body dir=\"{{ direction }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> {% else %} - <body dir=\"{{ lang.t('direction') }}\"> + <body dir=\"{{ direction }}\"> {% endif %} - <svg class=\"md-svg\"> - <defs> - {% set platform = config.extra.repo_icon or config.repo_url %} - {% if \"github\" in platform %} - {% include \"assets/images/icons/github.f0b8504a.svg\" %} - {% elif \"gitlab\" in platform %} - {% include \"assets/images/icons/gitlab.6dd19c00.svg\" %} - {% elif \"bitbucket\" in platform %} - {% include \"assets/images/icons/bitbucket.1b09e088.svg\" %} - {% endif %} - </defs> - </svg> <input class=\"md-toggle\" data-md-toggle=\"drawer\" type=\"checkbox\" id=\"__drawer\" autocomplete=\"off\"> <input class=\"md-toggle\" data-md-toggle=\"search\" type=\"checkbox\" id=\"__search\" autocomplete=\"off\"> - <label class=\"md-overlay\" data-md-component=\"overlay\" for=\"__drawer\"></label> + <label class=\"md-overlay\" for=\"__drawer\"></label> + <div data-md-component=\"skip\"> + {% if page.toc | first is defined %} + {% set skip = page.toc | first %} + <a href=\"{{ skip.url | url }}\" class=\"md-skip\"> + {{ lang.t('skip.link.title') }} + </a> + {% endif %} + </div> + <div data-md-component=\"announce\"> + {% if self.announce() %} + <aside class=\"md-announce\"> + <div class=\"md-announce__inner md-grid md-typeset\"> + {% block announce %}{% endblock %} + </div> + </aside> + {% endif %} + </div> {% block header %} {% include \"partials/header.html\" %} {% endblock %} - <div class=\"md-container\"> + <div class=\"md-container\" data-md-component=\"container\"> {% block hero %} {% if page and page.meta and page.meta.hero %} {% include \"partials/hero.html\" with context %} {% endif %} {% endblock %} - {% if feature.tabs %} - {% include \"partials/tabs.html\" %} - {% endif %} + {% block tabs %} + {% if \"tabs\" in config.theme.features %} + {% include \"partials/tabs.html\" %} + {% endif %} + {% endblock %} - <main class=\"md-main\" role=\"main\"> - <div class=\"md-main__inner md-grid\" data-md-component=\"container\"> + <main class=\"md-main\" data-md-component=\"main\"> + <div class=\"md-main__inner md-grid\"> {% block site_nav %} {% if nav %} <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\"> @@ -160,41 +141,25 @@ <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-icon md-content__icon\">&#xE3C9;</a> + <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> + {% include \".icons/material/pencil.svg\" %} + </a> {% endif %} + {% block source %} + {% if page and page.meta and page.meta.source %} + {% include \"partials/source-link.html\" %} + {% endif %} + {% endblock %} {% if not \"\\x3ch1\" in page.content %} <h1>{{ page.title | default(config.site_name, true)}}</h1> {% endif %} {{ page.content }} - {% block source %} - {% if page and page.meta and page.meta.source %} - <h2 id=\"__source\">{{ lang.t(\"meta.source\") }}</h2> - {% set repo = config.repo_url %} - {% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} - {% endif %} - {% set path = page.meta.path | default([\"\"]) %} - {% set file = page.meta.source %} - <a href=\"{{ [repo, path, file] | join('/') }}\" title=\"{{ file }}\" class=\"md-source-file\"> - {{ file }} - </a> - {% endif %} - {% endblock %} + {% if page and page.meta %} + {% if page.meta.git_revision_date_localized or + page.meta.revision_date + %} + {% include \"partials/source-date.html\" %} - {% if page and page.meta and ( - page.meta.git_revision_date_localized or - page.meta.revision_date - ) %} - {% set label = lang.t(\"source.revision.date\") %} - <hr> - <div class=\"md-source-date\"> - <small> - {% if page.meta.git_revision_date_localized %} - {{ label }}: {{ page.meta.git_revision_date_localized }} - {% elif page.meta.revision_date %} - {{ label }}: {{ page.meta.revision_date }} - {% endif %} - </small> - </div> {% endif %} {% endblock %} {% block disqus %} @@ -208,29 +174,35 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> {% block scripts %} - <script src=\"{{ 'assets/javascripts/application.********.js' | url }}\"></script> - {% if lang.t(\"search.language\") != \"en\" %} - {% set languages = lang.t(\"search.language\").split(\",\") %} - {% if languages | length and languages[0] != \"\" %} - {% set path = \"assets/javascripts/lunr/\" %} - <script src=\"{{ (path ~ 'lunr.stemmer.support.js') | url }}\"></script> - {% for language in languages | map(\"trim\") %} - {% if language != \"en\" %} - {% if language == \"ja\" %} - <script src=\"{{ (path ~ 'tinyseg.js') | url }}\"></script> - {% endif %} - {% if language in (\"ar\", \"da\", \"de\", \"es\", \"fi\", \"fr\", \"hu\", \"it\", \"ja\", \"nl\", \"no\", \"pt\", \"ro\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\") %} - <script src=\"{{ (path ~ 'lunr.' ~ language ~ '.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endfor %} - {% if languages | length > 1 %} - <script src=\"{{ (path ~ 'lunr.multi.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endif %} - <script>app.initialize({version:\"{{ mkdocs_version }}\",url:{base:\"{{ base_url }}\"}})</script> + <script src=\"{{ 'assets/javascripts/vendor.********.min.js' | url }}\"></script> + <script src=\"{{ 'assets/javascripts/bundle.********.min.js' | url }}\"></script> + {%- set translations = {} -%} + {%- for key in [ + \"clipboard.copy\", + \"clipboard.copied\", + \"search.config.lang\", + \"search.config.pipeline\", + \"search.config.separator\", + \"search.result.placeholder\", + \"search.result.none\", + \"search.result.one\", + \"search.result.other\" + ] -%} + {%- set _ = translations.update({ key: lang.t(key) }) -%} + {%- endfor -%} + <script id=\"__lang\" type=\"application/json\"> + {{- translations | tojson -}} + </script> + {% block config %}{% endblock %} + <script> + app = initialize({ + base: \"{{ base_url }}\", + features: {{ config.theme.features | tojson }}, + search: Object.assign({ + worker: \"{{ 'assets/javascripts/worker/search.********.min.js' | url }}\" + }, typeof search !== \"undefined\" && search) + }) + </script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} @@ -5,34 +5,34 @@ <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\"> + <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-back md-footer-nav__button\"></i> + <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} </div> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.previous\") }} </span> {{ page.previous_page.title }} - </span> + </div> </div> </a> {% endif %} {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.next\") }} </span> {{ page.next_page.title }} - </span> + </div> </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-forward md-footer-nav__button\"></i> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} </div> </a> {% endif %} @@ -4,51 +4,43 @@ <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\"> - <div class=\"md-flex\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" aria-label=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"24\" height=\"24\"> - {% endif %} - </a> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <label class=\"md-icon md-icon--menu md-header-nav__button\" for=\"__drawer\"></label> - </div> - <div class=\"md-flex__cell md-flex__cell--stretch\"> - <div class=\"md-flex__ellipsis md-header-nav__title\" data-md-component=\"title\"> - {% if config.site_name == page.title %} - {{ config.site_name }} - {% else %} - <span class=\"md-header-nav__topic\"> - {{ config.site_name }} - </span> - <span class=\"md-header-nav__topic\"> - {% if page and page.meta and page.meta.title %} - {{ page.meta.title }} - {% else %} - {{ page.title }} - {% endif %} - </span> - {% endif %} + <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} + </a> + <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + {% include \".icons/material/menu\" ~ \".svg\" %} + </label> + <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> + {% if config.site_name == page.title %} + <div class=\"md-header-nav__ellipsis md-ellipsis\"> + {{ config.site_name }} </div> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-icon md-icon--search md-header-nav__button\" for=\"__search\"></label> - {% include \"partials/search.html\" %} - {% endif %} - </div> - {% if config.repo_url %} - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <div class=\"md-header-nav__source\"> - {% include \"partials/source.html\" %} - </div> + {% else %} + <div class=\"md-header-nav__ellipsis\"> + <span class=\"md-header-nav__topic md-ellipsis\"> + {{ config.site_name }} + </span> + <span class=\"md-header-nav__topic md-ellipsis\"> + {% if page and page.meta and page.meta.title %} + {{ page.meta.title }} + {% else %} + {{ page.title }} + {% endif %} + </span> </div> {% endif %} </div> + {% if \"search\" in config[\"plugins\"] %} + <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + </label> + {% include \"partials/search.html\" %} + {% endif %} + {% if config.repo_url %} + <div class=\"md-header-nav__source\"> + {% include \"partials/source.html\" %} + </div> + {% endif %} </nav> </header> @@ -4,9 +4,8 @@ -{% set feature = config.theme.feature %} {% set class = \"md-hero\" %} -{% if not feature.tabs %} +{% if \"tabs\" not in config.theme.features %} {% set class = \"md-hero md-hero--expand\" %} {% endif %} <div class=\"{{ class }}\" data-md-component=\"hero\"> @@ -4,12 +4,4 @@ {% import \"partials/language/\" + config.theme.language + \".html\" as lang %} {% import \"partials/language/en.html\" as fallback %} -{% macro t(key) %}{{ { - \"direction\": config.theme.direction, - \"search.language\": ( - config.extra.search | default({}) - ).language, - \"search.tokenizer\": ( - config.extra.search | default({}) - ).tokenizer | default(\"\", true), -}[key] or lang.t(key) or fallback.t(key) }}{% endmacro %} +{% macro t(key) %}{{ lang.t(key) | default(fallback.t(key)) }}{% endmacro %} @@ -0,0 +1,9 @@ +{#- + This file was automatically generated - do not edit +-#} +{% if config.theme.logo %} + <img src=\"{{ config.theme.logo | url }}\" alt=\"logo\"> +{% else %} + {% set icon = config.theme.icon.logo or \"material/library\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} +{% endif %} @@ -14,9 +14,15 @@ {% endif %} <label class=\"md-nav__link\" for=\"{{ path }}\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/chevron-right.svg\" %} + </span> </label> - <nav class=\"md-nav\" data-md-component=\"collapsible\" data-md-level=\"{{ level }}\"> + <nav class=\"md-nav\" aria-label=\"{{ nav_item.title }}\" data-md-level=\"{{ level }}\"> <label class=\"md-nav__title\" for=\"{{ path }}\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ nav_item.title }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> @@ -39,6 +45,9 @@ {% if toc | first is defined %} <label class=\"md-nav__link md-nav__link--active\" for=\"__toc\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/table-of-contents.svg\" %} + </span> </label> {% endif %} <a href=\"{{ nav_item.url | url }}\" title=\"{{ nav_item.title | striptags }}\" class=\"md-nav__link md-nav__link--active\"> @@ -4,14 +4,10 @@ -<nav class=\"md-nav md-nav--primary\" data-md-level=\"0\"> - <label class=\"md-nav__title md-nav__title--site\" for=\"__drawer\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"48\" height=\"48\"> - {% endif %} +<nav class=\"md-nav md-nav--primary\" aria-label=\"{{ lang.t('nav.title') }}\" data-md-level=\"0\"> + <label class=\"md-nav__title\" for=\"__drawer\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} </a> {{ config.site_name }} </label> @@ -6,15 +6,18 @@ <label class=\"md-search__overlay\" for=\"__search\"></label> <div class=\"md-search__inner\" role=\"search\"> <form class=\"md-search__form\" name=\"search\"> - <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"Search\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"query\" data-md-state=\"active\"> + <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"{{ lang.t('search.placeholder') }}\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"search-query\" data-md-state=\"active\"> <label class=\"md-search__icon md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + {% include \".icons/material/arrow-left.svg\" %} </label> - <button type=\"reset\" class=\"md-icon md-search__icon\" data-md-component=\"reset\" tabindex=\"-1\"> - &#xE5CD; + <button type=\"reset\" class=\"md-search__icon md-icon\" aria-label=\"{{ lang.t('search.reset') }}\" data-md-component=\"search-reset\" tabindex=\"-1\"> + {% include \".icons/material/close.svg\" %} </button> </form> <div class=\"md-search__output\"> <div class=\"md-search__scrollwrap\" data-md-scrollfix> - <div class=\"md-search-result\" data-md-component=\"result\"> + <div class=\"md-search-result\" data-md-component=\"search-result\"> <div class=\"md-search-result__meta\"> {{ lang.t(\"search.result.placeholder\") }} </div> @@ -4,9 +4,12 @@ {% if config.extra.social %} <div class=\"md-footer-social\"> - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/font-awesome.css' | url }}\"> {% for social in config.extra.social %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ social.type }}\" class=\"md-footer-social__link fa fa-{{ social.type }}\"></a> + {% set _,rest = social.link.split(\"//\") %} + {% set domain = rest.split(\"/\")[0] %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ domain }}\" class=\"md-footer-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> {% endfor %} </div> {% endif %} @@ -0,0 +1,15 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set label = lang.t(\"source.revision.date\") %} +<hr> +<div class=\"md-source-date\"> + <small> + {% if page.meta.git_revision_date_localized %} + {{ label }}: {{ page.meta.git_revision_date_localized }} + {% elif page.meta.revision_date %} + {{ label }}: {{ page.meta.revision_date }} + {% endif %} + </small> +</div> @@ -0,0 +1,13 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set repo = config.repo_url %} +{% if repo | last == \"/\" %} + {% set repo = repo[:-1] %} +{% endif %} +{% set path = page.meta.path | default([\"\"]) %} +<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ file }}\" class=\"md-content__button md-icon\"> + {{ lang.t(\"meta.source\") }} + {% include \".icons/\" ~ config.theme.icon.repo ~ \".svg\" %} +</a> @@ -4,24 +4,11 @@ {% import \"partials/language.html\" as lang with context %} -{% set platform = config.extra.repo_icon or config.repo_url %} -{% if \"github\" in platform %} - {% set repo_type = \"github\" %} -{% elif \"gitlab\" in platform %} - {% set repo_type = \"gitlab\" %} -{% elif \"bitbucket\" in platform %} - {% set repo_type = \"bitbucket\" %} -{% else %} - {% set repo_type = \"\" %} -{% endif %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-source=\"{{ repo_type }}\"> - {% if repo_type %} - <div class=\"md-source__icon\"> - <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"> - <use xlink:href=\"#__{{ repo_type }}\" width=\"24\" height=\"24\"></use> - </svg> - </div> - {% endif %} +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> + <div class=\"md-source__icon md-icon\"> + {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} + </div> <div class=\"md-source__repository\"> {{ config.repo_name }} </div> @@ -4,7 +4,7 @@ -{% if nav_item.is_homepage %} +{% if nav_item.is_homepage or nav_item.url == \"index.html\" %} <li class=\"md-tabs__item\"> {% if not page.ancestors | length and nav | selectattr(\"url\", page.url) %} <a href=\"{{ nav_item.url | url }}\" class=\"md-tabs__link md-tabs__link--active\"> @@ -5,7 +5,7 @@ {% if page.ancestors | length > 0 %} {% set class = \"md-tabs md-tabs--active\" %} {% endif %} -<nav class=\"{{ class }}\" data-md-component=\"tabs\"> +<nav class=\"{{ class }}\" aria-label=\"{{ lang.t('tabs.title') }}\" data-md-component=\"tabs\"> <div class=\"md-tabs__inner md-grid\"> <ul class=\"md-tabs__list\"> {% for nav_item in nav %} @@ -6,7 +6,7 @@ {{ toc_item.title }} </a> {% if toc_item.children %} - <nav class=\"md-nav\"> + <nav class=\"md-nav\" aria-label=\"{{ toc_item.title }}\"> <ul class=\"md-nav__list\"> {% for toc_item in toc_item.children %} {% include \"partials/toc-item.html\" %} @@ -4,35 +4,22 @@ {% import \"partials/language.html\" as lang with context %} -<nav class=\"md-nav md-nav--secondary\"> +<nav class=\"md-nav md-nav--secondary\" aria-label=\"{{ lang.t('toc.title') }}\"> {% endif %} {% if toc | first is defined %} <label class=\"md-nav__title\" for=\"__toc\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ lang.t(\"toc.title\") }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} - {% if page.meta.source and page.meta.source | length > 0 %} - <li class=\"md-nav__item\"> - <a href=\"#__source\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.source\") }} - </a> - </li> - {% endif %} - {% set disqus = config.extra.disqus %} - {% if page and page.meta and page.meta.disqus is string %} - {% set disqus = page.meta.disqus %} - {% endif %} - {% if not page.is_homepage and disqus %} - <li class=\"md-nav__item\"> - <a href=\"#__comments\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.comments\") }} - </a> - </li> - {% endif %} </ul> {% endif %} </nav>","title":"Changes to *.html files"},{"location":"upgrade/#upgrading-from-3x-to-4x","text":"","title":"Upgrading from 3.x to 4.x"},{"location":"upgrade/#whats-new_4","text":"Material for MkDocs 4 fixes incorrect layout on Chinese systems. The fix includes a mandatory change of the base font-size from 10px to 20px which means all rem values needed to be updated. Within the theme, px to rem calculation is now encapsulated in a new function called px2rem which is part of the SASS code base. If you use Material for MkDocs with custom CSS that is based on rem values, note that those values must now be divided by 2. Now, 1.0rem doesn't map to 10px , but 20px . To learn more about the problem and implications, please refer to #911 in which the problem was discovered and fixed.","title":"What's new?"},{"location":"upgrade/#changes-to-mkdocsyml_4","text":"None.","title":"Changes to mkdocs.yml"},{"location":"upgrade/#changes-to-html-files_4","text":"None.","title":"Changes to *.html files"},{"location":"blog/","text":".md-sidebar--secondary:not([hidden]) { visibility: hidden; } Blog \u00b6 The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. Continue reading","title":"The past, present and future"},{"location":"blog/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. Continue reading","title":"Excluding content from search"},{"location":"blog/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. Continue reading","title":"Search: better, faster, smaller"},{"location":"blog/2021/excluding-content-from-search/","text":"Excluding content from search \u00b6 The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that . Prior art \u00b6 MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation. What's new? \u00b6 The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it. Excluding pages \u00b6 An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] } Conclusion \u00b6 The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#excluding-content-from-search","text":"The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control. Martin Donath \u00b7 @squidfunk September 26, 2021 \u00b7 5 min read \u00b7 7.3.0+insiders-3.1.1 Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin , yielding massive improvements in usability , but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality. The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that .","title":"Excluding content from search"},{"location":"blog/2021/excluding-content-from-search/#prior-art","text":"MkDocs has a rich and thriving ecosystem of plugins , and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with: pip install mkdocs-exclude-search How it works : the plugin post-processes the search_index.json file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to mkdocs.yml . An example: plugins : - search - exclude-search : exclude : - page.md - page.md#section - directory/* - /*/page.md It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides: Exclusion patterns and content are not co-located : exclusion patterns need to be defined in mkdocs.yml , and not as part of the respective document or section to be excluded. This might result in stale exclusion patterns, leading to unintended behavior: When a headline is changed, its slug (permalink) also changes, which might suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo in a headline. As exclusion patterns support the use of wildcards, different authors might overwrite each other's patterns without any immediate feedback since the plugin does only report the number of excluded documents \u2013 not what has been excluded. 1 Exclusion control might be too coarse : The mkdocs-exclude-search plugin only allows for the exclusion of pages and sections. It's not possible to exclude parts of a section, e.g., content that is irrelevant to search but must be included as part of the documentation.","title":"Prior art"},{"location":"blog/2021/excluding-content-from-search/#whats-new","text":"The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists . Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.","title":"What's new?"},{"location":"blog/2021/excluding-content-from-search/#excluding-pages","text":"An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not: --- search: exclude: true --- # Document title ...","title":"Excluding pages"},{"location":"blog/2021/excluding-content-from-search/#excluding-sections","text":"If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called { data-search-exclude } at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"blog/2021/excluding-content-from-search/#excluding-blocks","text":"If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" }, ] }","title":"Excluding blocks"},{"location":"blog/2021/excluding-content-from-search/#conclusion","text":"The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index. When the log level is set to DEBUG , the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins. \u21a9","title":"Conclusion"},{"location":"blog/2021/search-better-faster-smaller/","text":"Search: better, faster, smaller \u00b6 This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that . Architecture \u00b6 Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER Search index \u00b6 The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews. Search worker \u00b6 The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index. Search previews \u00b6 Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block. What's new? \u00b6 After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects. Rich search previews \u00b6 As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization . Tokenizer lookahead \u00b6 The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4 Case changes \u00b6 Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5 Version numbers \u00b6 Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes. HTML/XML tags \u00b6 If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section. Accurate highlighting \u00b6 Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter . Benchmarks \u00b6 We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once. User interface \u00b6 Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly. What's next? \u00b6 Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#search-better-faster-smaller","text":"This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time. Martin Donath \u00b7 @squidfunk September 13, 2021 \u00b7 15 min read \u00b7 7.2.6+insiders-3.0.0 The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual , offline-capable , and most importantly: all client-side . It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come. The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that .","title":"Search: better, faster, smaller"},{"location":"blog/2021/search-better-faster-smaller/#architecture","text":"Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server: const index$ = document . forms . namedItem ( \"search\" ) ? __search ? . index || requestJSON < SearchIndex > ( new URL ( \"search/search_index.json\" , config . base ) ) : NEVER","title":"Architecture"},{"location":"blog/2021/search-better-faster-smaller/#search-index","text":"The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file: Expand to inspect example docs/page.md search_index.json # Example ## Text It's very easy to make some words **bold** and other words *italic* with Markdown. You can even add [ links ]( # ), or even `code` : ``` if (isAwesome) { return true } ``` ## Lists Sometimes you want numbered lists: 1. One 2. Two 3. Three Sometimes you want bullet points: * Start a line with a star * Profit! { \"config\" : { \"indexing\" : \"full\" , \"lang\" : [ \"en\" ], \"min_search_length\" : 3 , \"prebuild_index\" : false , \"separator\" : \"[\\\\s\\\\-]+\" }, \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index, we immediately see several problems: All content is included twice : the search index contains one entry with the entire contents of the page, and one entry for each section of the page, i.e., each block preceded by a headline or subheadline. This significantly contributes to the size of the search index. All structure is lost : when the search index is built, all structural information like HTML tags and attributes are stripped from the content. While this approach works well for paragraphs and inline formatting, it might be problematic for lists and code blocks. An excerpt: \u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026 Context : for an untrained eye, the result can look like gibberish, as it's not immediately apparent what classifies as text and what as code. Furthermore, it's not clear that Lists is a headline as it's merged with the code block before and the paragraph after it. Punctuation : inline elements like links that are immediately followed by punctuation are separated by whitespace (see , and : in the excerpt). This is because all extracted text is joined with a whitespace character during the construction of the search index. It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.","title":"Search index"},{"location":"blog/2021/search-better-faster-smaller/#search-worker","text":"The actual search functionality is implemented as part of a web worker 1 , which creates and manages the lunr search index. When search is initialized, the following steps are taken: Linking sections with pages : The search index is parsed, and each section is linked to its parent page. The parent page itself is not indexed , as it would lead to duplicate results, so only the sections remain. Linking is necessary, as search results are grouped by page. Tokenization : The title and text values of each section are split into tokens by using the separator as configured in mkdocs.yml . Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead. Indexing : As a final step, each section is indexed. When querying the index, if a search query includes one of the tokens as returned by step 2., the section is considered to be part of the search result and passed to the main thread. Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr , but in general, this is how data gets into and out of the index.","title":"Search worker"},{"location":"blog/2021/search-better-faster-smaller/#search-previews","text":"Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience. This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters , as can be seen here: The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are. A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered: Word boundaries : some themes 2 for static site generators generate search previews by expanding the text left and right next to an occurrence, stopping at a whitespace character when enough words have been consumed. A preview might look like this: \u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026 While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese 3 , as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens. Context-awareness : Although whitespace doesn't work for all languages, one could argue that it could be a good enough solution. Unfortunately, this is not necessarily true for code blocks, as the removal of whitespace might change meaning in some languages. Structure : Preserving structural information is not a must, but apparently beneficial to build more meaningful search previews which allow for a quick evaluation of relevance. If a word occurrence is part of a code block, it should be rendered as a code block.","title":"Search previews"},{"location":"blog/2021/search-better-faster-smaller/#whats-new","text":"After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings: Better : support for rich search previews , preserving the structural information of code blocks, inline code, and lists, so they are rendered as-is, as well as lookahead tokenization , more accurate highlighting , and improved stability of typeahead. Also, a slightly better UX . Faster and smaller : significant decrease in search index size of up to 48% due to improved extraction and construction techniques, resulting in a search experience that is up to 95% faster, which is particularly helpful for large documentation projects.","title":"What's new?"},{"location":"blog/2021/search-better-faster-smaller/#rich-search-previews","text":"As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks: Now Before Now, code blocks are first-class citizens of search previews , and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why: Expand to inspect search index Now Before { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"<p>It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even <code>code</code>:</p> <pre><code>if (isAwesome){\\n return true\\n}\\n</code></pre>\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"<p>Sometimes you want numbered lists:</p> <ol> <li>One</li> <li>Two</li> <li>Three</li> </ol> <p>Sometimes you want bullet points:</p> <ul> <li>Start a line with a star</li> <li>Profit!</li> </ul>\" } ] } { ... \"docs\" : [ { \"location\" : \"page/\" , \"title\" : \"Example\" , \"text\" : \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" }, { \"location\" : \"page/#example\" , \"title\" : \"Example\" , \"text\" : \"\" }, { \"location\" : \"page/#text\" , \"title\" : \"Text\" , \"text\" : \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\" }, { \"location\" : \"page/#lists\" , \"title\" : \"Lists\" , \"text\" : \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\" } ] } If we inspect the search index again, we can see how the situation improved: Content is included only once : the search index does not include the content of the page twice, as only the sections of a page are part of the search index. This leads to a significant reduction in size, fewer bytes to transfer, and a smaller search index. Some structure is preserved : each section of the search index includes a small subset of HTML to provide the necessary structure to allow for more sophisticated search previews. Revisiting our example from before, let's look at an excerpt: Now Before \u2026 links, or even < code > code </ code > : </ p > < pre >< code > if (isAwesome){ \u2026 }\\n </ code ></ pre > \u2026 links , or even code : if (isAwesome) { \u2026 } The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective. On to the next step in the process: tokenization .","title":"Rich search previews"},{"location":"blog/2021/search-better-faster-smaller/#tokenizer-lookahead","text":"The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the separator as defined in mkdocs.yml . This doesn't allow for more complex separators based on lookahead or multiple characters. Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value: [\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t; While the first part up to the first | contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression. 4","title":"Tokenizer lookahead"},{"location":"blog/2021/search-better-faster-smaller/#case-changes","text":"Many programming languages use PascalCase or camelCase naming conventions. When a user searches for the term case , it's quite natural to expect for PascalCase and camelCase to show up. By adding the following match group to the separator, this can now be achieved with ease: (?!\\b)(?=[A-Z][a-z]) This regular expression is a combination of a negative lookahead ( \\b , i.e., not a word boundary) and a positive lookahead ( [A-Z][a-z] , i.e., an uppercase character followed by a lowercase character), and has the following behavior: PascalCase Pascal , Case camelCase camel , Case UPPERCASE UPPERCASE Searching for searchHighlight now brings up the section discussing the search.highlight feature flag, which also demonstrates that this now even works properly for search queries. 5","title":"Case changes"},{"location":"blog/2021/search-better-faster-smaller/#version-numbers","text":"Indexing version numbers is another problem that can be solved with a small lookahead. Usually, . should be considered a separator to split words like search.highlight . However, splitting version numbers at . will make them undiscoverable. Thus, the following expression: \\.(?!\\d) This regular expression matches a . only if not immediately followed by a digit \\d , which leaves version numbers discoverable. Searching for 7.2.6 brings up the 7.2.6 release notes.","title":"Version numbers"},{"location":"blog/2021/search-better-faster-smaller/#htmlxml-tags","text":"If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Now, adding the following expression to the separator allows for just that: &[lg]t; Searching for custom search worker script brings up the section on custom search and matches the script tag among the other search terms discovered. We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.","title":"HTML/XML tags"},{"location":"blog/2021/search-better-faster-smaller/#accurate-highlighting","text":"Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions . 6 This approach has some problems with non-whitespace languages like Japanese or Chinese 3 since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter , which cannot be modeled with regular expressions. Now, as a direct result of the new tokenization approach , our new search implementation uses token positions for highlighting , making it exactly as powerful as tokenization: Word boundaries : as the new highlighter uses token positions, word boundaries are equal to token boundaries. This means that more complex cases of tokenization (e.g., case changes , version numbers , HTML/XML tags ), are now all highlighted accurately. Context-awareness : as the new search index preserves some of the structural information of the original document, the content of a section is now divided into separate content blocks \u2013 paragraphs, code blocks, and lists. Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of twitter .","title":"Accurate highlighting"},{"location":"blog/2021/search-better-faster-smaller/#benchmarks","text":"We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach: Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size ( gzip ) 105 kB 78 kB \u201327% Indexing time 7 265 ms 177 ms \u201334% KJV Markdown 8 Index size 8.2 MB 4.4 MB \u201347% Index size ( gzip ) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% Benchmark results The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster . This is a significant improvement, particularly relevant for large documentation projects. While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.","title":"Benchmarks"},{"location":"blog/2021/search-better-faster-smaller/#user-interface","text":"Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.","title":"User interface"},{"location":"blog/2021/search-better-faster-smaller/#whats-next","text":"Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up: Context-aware search summarization : currently, the first two matching content blocks are rendered as a search preview. With the new tokenization technique, we laid the groundwork for more sophisticated shortening and summarization methods, which we're tackling next. User interface improvements : as we now gained full control over the search plugin, we can now add meaningful metadata to provide more context and a better experience. We'll explore some of those paths in the future. If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation. Prior to 5.0.0, search was carried out in the main thread which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in 5.0.0. \u21a9 At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution. \u21a9 China and Japan are both within the top 5 countries of origin of users of Material for MkDocs. \u21a9 \u21a9 As a fun fact: the separator default value of the search plugin being [\\s\\-]+ always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the + is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer . \u21a9 Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with + or - , effectively disabling tokenization. \u21a9 Using the separator as defined in mkdocs.yml , a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query search highlight was transformed into the rather cumbersome regular expression (^|<separator>)(search|highlight) , which only matches at word boundaries. \u21a9 Smallest value of ten distinct runs. \u21a9 We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words. \u21a9","title":"What's next?"},{"location":"blog/2021/the-past-present-and-future/","text":"The past, present and future \u00b6 2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project. A little history \u00b6 In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021. 2021 in numbers \u00b6 2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world. Features \u00b6 It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times. Funding \u00b6 In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide. 2022 \u00b6 Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#the-past-present-and-future","text":"2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable. Martin Donath \u00b7 @squidfunk December 27, 2021 \u00b7 10 min read Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities. This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.","title":"The past, present and future"},{"location":"blog/2021/the-past-present-and-future/#a-little-history","text":"In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff , a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation. After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day. I had to build a theme. Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff , the project I wanted to release in the first place), and it looked like this: It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles: It's important to know that at this point in time I've built Material for MkDocs for protobluff , the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane. I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters : although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation . Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free. Making Open Source sustainable is, after all, possible in 2021.","title":"A little history"},{"location":"blog/2021/the-past-present-and-future/#2021-in-numbers","text":"2021 was an exciting year, as the project has seen significant growth. 166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries , which covers almost the whole world.","title":"2021 in numbers"},{"location":"blog/2021/the-past-present-and-future/#features","text":"It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders : Admonition inline blocks Advanced search highlighting Anchor tracking Back-to-top button Boosting pages in search Brand new search plugin Code annotations Code annotations: anchor links Code annotations: strip comments Code block titles Code block line anchors Color palette toggle Content tabs: improved support Content tabs: auto-linking Content tabs: animated indicator Cookie consent Custom admonition icons Dark mode support for images Dismissable announcement bar Excluding content from search Latest release tag Mermaid.js integration Navigation icons Remove generator notice Rich search previews Stay on page when switching versions Search highlighting Search sharing Search suggestions Section index pages Site language selection Social cards Sticky navigation tabs Tags with search integration Tokenizer with lookahead Versioning Version warning Was this page helpful? Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the mkdocs-material package was released 55 times, mkdocs-material-insiders was shipped 72 times.","title":"Features"},{"location":"blog/2021/the-past-present-and-future/#funding","text":"In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable: I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors , and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy. You can learn about the strategy in the Insiders guide.","title":"Funding"},{"location":"blog/2021/the-past-present-and-future/#2022","text":"Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022: Instant previews : instant previews will render a specific page section inside a tooltip when hovering an internal link, which will allow to implement things like glossaries. Further support for improving glossary functionality will also be investigated. Text annotations : as a logical progression of code annotations which were added in 2021, authors will be able to add annotations to plain text, yielding excellent opportunities for side content. Of course, text annotations will be as easy to use as code annotations. Navigation pruning : to optimize large documentation projects, Material for MkDocs will introduce a new feature flag called navigation.prune that will lead to significantly smaller HTML files for documentation projects with huge navigation hierarchies. Navigation status badge : as an addition to the recently added navigation icon support, a status will be attributable to each page, allowing to mark a page in the navigation tree with an icon as new or deprecated . Custom status types will also be supported. Card grids : as a further component in the toolkit of technical writing, card grids will allow arranging content in grids, which is especially useful for overview pages. They will allow to arrange arbitrary content, including code blocks, admonitions, etc. Blog support : blogging support is still under investigation and expected to be one of the major additions in 2022. Blogging will perfectly integrate with writing documentation, allowing to use all components available in Material for MkDocs. This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated. Happy new year!","title":"2022"},{"location":"reference/","text":"Reference \u00b6 Material for MkDocs is packed with many great features that make technical writing a pleasure. This section of the documentation explains how to set up a page, and showcases all available specimen that can be used directly from within Markdown files. Configuration \u00b6 This configuration allows to set a title and description for a page, change the template or define an icon to be rendered in the navigation. Add the following lines to mkdocs.yml : markdown_extensions : - meta See additional configuration options: Metadata Usage \u00b6 Setting the page title \u00b6 When Metadata is enabled, the page title can be overridden for a document with some custom front matter. Add the following lines at the top of a Markdown file: --- title: Lorem ipsum dolor sit amet # (1)! --- # Document title ... This will set the title inside the HTML document's head for the generated page to this value. Note that the site title, which is set via site_name , is appended with a dash. Setting the page description \u00b6 When Metadata is enabled, the page description can be overridden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- description: Nullam urna elit, malesuada eget finibus ut, ac tortor. # (1)! --- # Document title ... This will set the meta tag containing the site description inside the document head for the current page to the provided value. Setting the page icon \u00b6 Insiders \u00b7 insiders-4.5.0 \u00b7 Experimental An icon can be assigned to each page, which is then rendered as part of the navigation sidebar. Ensure Metadata is enabled and add the following lines at the top of a Markdown file: --- icon: material/emoticon-happy # (1)! --- # Document title ... Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Setting the page template \u00b6 If you're using theme extension and created a new page template in the overrides directory, you can enable it for a specific page. Add the following lines at the top of a Markdown file: --- template: custom.html --- # Document title ... Customization \u00b6 Using metadata in templates \u00b6 on all pages \u00b6 In order to add custom meta tags to your document, you can extend the theme and override the extrahead block , e.g. to add indexing policies for search engines via the robots property: {% extends \"base.html\" %} {% block extrahead %} < meta property = \"robots\" content = \"noindex, nofollow\" /> {% endblock %} on a single page \u00b6 If you want to set a meta tag on a single page, or want to set different values for different pages, you can use the page.meta object inside your template override, e.g.: {% extends \"base.html\" %} {% block extrahead %} {% if page and page.meta and page.meta.robots %} < meta property = \"robots\" content = \"{{ page.meta.robots }}\" /> {% else %} < meta property = \"robots\" content = \"index, follow\" /> {% endif %} {% endblock %} You can now use robots exactly like title and description to set values. Note that in this case, the template defines an else branch, which would set a default if none was given.","title":"Reference"},{"location":"reference/#reference","text":"Material for MkDocs is packed with many great features that make technical writing a pleasure. This section of the documentation explains how to set up a page, and showcases all available specimen that can be used directly from within Markdown files.","title":"Reference"},{"location":"reference/#configuration","text":"This configuration allows to set a title and description for a page, change the template or define an icon to be rendered in the navigation. Add the following lines to mkdocs.yml : markdown_extensions : - meta See additional configuration options: Metadata","title":"Configuration"},{"location":"reference/#usage","text":"","title":"Usage"},{"location":"reference/#setting-the-page-title","text":"When Metadata is enabled, the page title can be overridden for a document with some custom front matter. Add the following lines at the top of a Markdown file: --- title: Lorem ipsum dolor sit amet # (1)! --- # Document title ... This will set the title inside the HTML document's head for the generated page to this value. Note that the site title, which is set via site_name , is appended with a dash.","title":"Setting the page title"},{"location":"reference/#setting-the-page-description","text":"When Metadata is enabled, the page description can be overridden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- description: Nullam urna elit, malesuada eget finibus ut, ac tortor. # (1)! --- # Document title ... This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Setting the page description"},{"location":"reference/#setting-the-page-icon","text":"Insiders \u00b7 insiders-4.5.0 \u00b7 Experimental An icon can be assigned to each page, which is then rendered as part of the navigation sidebar. Ensure Metadata is enabled and add the following lines at the top of a Markdown file: --- icon: material/emoticon-happy # (1)! --- # Document title ... Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Setting the page icon"},{"location":"reference/#setting-the-page-template","text":"If you're using theme extension and created a new page template in the overrides directory, you can enable it for a specific page. Add the following lines at the top of a Markdown file: --- template: custom.html --- # Document title ...","title":"Setting the page template"},{"location":"reference/#customization","text":"","title":"Customization"},{"location":"reference/#using-metadata-in-templates","text":"","title":"Using metadata in templates"},{"location":"reference/#on-all-pages","text":"In order to add custom meta tags to your document, you can extend the theme and override the extrahead block , e.g. to add indexing policies for search engines via the robots property: {% extends \"base.html\" %} {% block extrahead %} < meta property = \"robots\" content = \"noindex, nofollow\" /> {% endblock %}","title":"on all pages"},{"location":"reference/#on-a-single-page","text":"If you want to set a meta tag on a single page, or want to set different values for different pages, you can use the page.meta object inside your template override, e.g.: {% extends \"base.html\" %} {% block extrahead %} {% if page and page.meta and page.meta.robots %} < meta property = \"robots\" content = \"{{ page.meta.robots }}\" /> {% else %} < meta property = \"robots\" content = \"index, follow\" /> {% endif %} {% endblock %} You can now use robots exactly like title and description to set values. Note that in this case, the template defines an else branch, which would set a default if none was given.","title":"on a single page"},{"location":"reference/abbreviations/","text":"Abbreviations \u00b6 Technical documentation often incurs the usage of many acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries. Configuration \u00b6 This configuration enables abbreviations and allows to build a simple project-wide glossary, sourcing definitions from a central location. Add the following line to mkdocs.yml : markdown_extensions : - abbr - pymdownx.snippets See additional configuration options: Abbreviations Snippets Usage \u00b6 Adding abbreviations \u00b6 Abbreviations can be defined by using a special syntax similar to URLs and footnotes , starting with a * and immediately followed by the term or acronym to be associated in square brackets: Text with abbreviations The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C . Adding a glossary \u00b6 The Snippets extension can be used to implement a simple glossary by moving all abbreviations in a dedicated file 1 , and embedding it with the --8<-- notation at the end of each document: docs/example.md includes/abbreviations.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium It's highly recommended to put the Markdown file containing the abbreviations outside of the docs folder (here, a folder with the name includes is used), as MkDocs might otherwise complain about an unreferenced file. \u21a9","title":"Abbreviations"},{"location":"reference/abbreviations/#abbreviations","text":"Technical documentation often incurs the usage of many acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries.","title":"Abbreviations"},{"location":"reference/abbreviations/#configuration","text":"This configuration enables abbreviations and allows to build a simple project-wide glossary, sourcing definitions from a central location. Add the following line to mkdocs.yml : markdown_extensions : - abbr - pymdownx.snippets See additional configuration options: Abbreviations Snippets","title":"Configuration"},{"location":"reference/abbreviations/#usage","text":"","title":"Usage"},{"location":"reference/abbreviations/#adding-abbreviations","text":"Abbreviations can be defined by using a special syntax similar to URLs and footnotes , starting with a * and immediately followed by the term or acronym to be associated in square brackets: Text with abbreviations The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C .","title":"Adding abbreviations"},{"location":"reference/abbreviations/#adding-a-glossary","text":"The Snippets extension can be used to implement a simple glossary by moving all abbreviations in a dedicated file 1 , and embedding it with the --8<-- notation at the end of each document: docs/example.md includes/abbreviations.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium It's highly recommended to put the Markdown file containing the abbreviations outside of the docs folder (here, a folder with the name includes is used), as MkDocs might otherwise complain about an unreferenced file. \u21a9","title":"Adding a glossary"},{"location":"reference/admonitions/","text":"Admonitions \u00b6 Admonitions, also known as call-outs , are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. Configuration \u00b6 This configuration enables admonitions, allows to make them collapsible and to nest arbitrary content inside admonitions. Add the following lines to mkdocs.yml : markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences See additional configuration options: Admonition Details SuperFences Admonition icons \u00b6 Insiders \u00b7 insiders-2.4.0 Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme, or even a custom icon . Add the following lines to mkdocs.yml : theme : icon : admonition : <type> : <icon> # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Expand to show alternate icon sets Octicons FontAwesome Admonition with alternate icon set theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 Admonition with alternate icon set theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Usage \u00b6 Admonitions follow a simple syntax: a block starts with !!! , followed by a single keyword used as a type qualifier . The content of the block follows on the next line, indented by four spaces: Admonition !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title \u00b6 By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier: Admonition with custom title !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title \u00b6 Similar to changing the title , the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks : Admonition without title !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Collapsible blocks \u00b6 When Details is enabled and an admonition block is started with ??? instead of !!! , the admonition is rendered as a collapsible block with a small toggle on the right side: Admonition, collapsible ??? note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding a + after the ??? token renders the block expanded: Admonition, collapsible and initially expanded ???+ note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Inline blocks \u00b6 7.0.0 \u00b7 Experimental Admonitions can also be rendered as inline blocks (i.e. for sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier: inline end inline Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline end Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline end to align to the right (left for rtl languages). Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline to align to the left (right for rtl languages). Important : admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports. Supported types \u00b6 Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is note : note Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Customization \u00b6 Custom admonitions \u00b6 If you want to add a custom admonition type, all you need is a color and an *.svg icon. Copy the icon's code from the .icons folder and add the following CSS to an additional style sheet : :root { --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>') } .md-typeset .admonition.pied-piper, .md-typeset details.pied-piper { border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title, .md-typeset .pied-piper > summary { background-color: rgba(43, 155, 70, 0.1); border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title::before, .md-typeset .pied-piper > summary::before { background-color: rgb(43, 155, 70); -webkit-mask-image: var(--md-admonition-icon--pied-piper); mask-image: var(--md-admonition-icon--pied-piper); } docs/stylesheets/extra.css mkdocs.yml : root { --md-admonition-icon--pied-piper : url ( 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>' ) } . md-typeset . admonition . pied-piper , . md-typeset details . pied-piper { border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title , . md-typeset . pied-piper > summary { background-color : rgba ( 43 , 155 , 70 , 0.1 ); border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title :: before , . md-typeset . pied-piper > summary :: before { background-color : rgb ( 43 , 155 , 70 ); -webkit- mask-image : var ( --md-admonition-icon--pied-piper ); mask-image : var ( --md-admonition-icon--pied-piper ); } extra_css : - stylesheets/extra.css After applying the customization, you can use the custom admonition type: Admonition with custom type !!! pied-piper \"Pied Piper\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Pied Piper Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Admonitions"},{"location":"reference/admonitions/#admonitions","text":"Admonitions, also known as call-outs , are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.","title":"Admonitions"},{"location":"reference/admonitions/#configuration","text":"This configuration enables admonitions, allows to make them collapsible and to nest arbitrary content inside admonitions. Add the following lines to mkdocs.yml : markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences See additional configuration options: Admonition Details SuperFences","title":"Configuration"},{"location":"reference/admonitions/#admonition-icons","text":"Insiders \u00b7 insiders-2.4.0 Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme, or even a custom icon . Add the following lines to mkdocs.yml : theme : icon : admonition : <type> : <icon> # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Expand to show alternate icon sets Octicons FontAwesome Admonition with alternate icon set theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 Admonition with alternate icon set theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left","title":"Admonition icons"},{"location":"reference/admonitions/#usage","text":"Admonitions follow a simple syntax: a block starts with !!! , followed by a single keyword used as a type qualifier . The content of the block follows on the next line, indented by four spaces: Admonition !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"reference/admonitions/#changing-the-title","text":"By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier: Admonition with custom title !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"reference/admonitions/#removing-the-title","text":"Similar to changing the title , the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks : Admonition without title !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"reference/admonitions/#collapsible-blocks","text":"When Details is enabled and an admonition block is started with ??? instead of !!! , the admonition is rendered as a collapsible block with a small toggle on the right side: Admonition, collapsible ??? note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding a + after the ??? token renders the block expanded: Admonition, collapsible and initially expanded ???+ note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Collapsible blocks"},{"location":"reference/admonitions/#inline-blocks","text":"7.0.0 \u00b7 Experimental Admonitions can also be rendered as inline blocks (i.e. for sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier: inline end inline Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline end Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline end to align to the right (left for rtl languages). Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline to align to the left (right for rtl languages). Important : admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports.","title":"Inline blocks"},{"location":"reference/admonitions/#supported-types","text":"Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is note : note Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Supported types"},{"location":"reference/admonitions/#customization","text":"","title":"Customization"},{"location":"reference/admonitions/#custom-admonitions","text":"If you want to add a custom admonition type, all you need is a color and an *.svg icon. Copy the icon's code from the .icons folder and add the following CSS to an additional style sheet : :root { --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>') } .md-typeset .admonition.pied-piper, .md-typeset details.pied-piper { border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title, .md-typeset .pied-piper > summary { background-color: rgba(43, 155, 70, 0.1); border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title::before, .md-typeset .pied-piper > summary::before { background-color: rgb(43, 155, 70); -webkit-mask-image: var(--md-admonition-icon--pied-piper); mask-image: var(--md-admonition-icon--pied-piper); } docs/stylesheets/extra.css mkdocs.yml : root { --md-admonition-icon--pied-piper : url ( 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>' ) } . md-typeset . admonition . pied-piper , . md-typeset details . pied-piper { border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title , . md-typeset . pied-piper > summary { background-color : rgba ( 43 , 155 , 70 , 0.1 ); border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title :: before , . md-typeset . pied-piper > summary :: before { background-color : rgb ( 43 , 155 , 70 ); -webkit- mask-image : var ( --md-admonition-icon--pied-piper ); mask-image : var ( --md-admonition-icon--pied-piper ); } extra_css : - stylesheets/extra.css After applying the customization, you can use the custom admonition type: Admonition with custom type !!! pied-piper \"Pied Piper\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Pied Piper Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Custom admonitions"},{"location":"reference/annotations/","text":"Annotations \u00b6 One of the flagship features of Material for MkDocs is the ability to inject annotations \u2013 little markers that can be added almost anywhere in a document and expand a tooltip containing arbitrary Markdown on click or keyboard focus. Configuration \u00b6 This configuration allows to add annotations to all inline- and block-level elements, as well as code blocks, and nest annotations inside each other. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list - md_in_html - pymdownx.superfences See additional configuration options: Attribute Lists Markdown in HTML SuperFences Usage \u00b6 Using annotations \u00b6 Insiders \u00b7 insiders-4.6.0 \u00b7 Experimental Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the annotate class, and content located in a list below the block containing the marker: Text with annotations Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! I can contain `code` , __formatted text__, images, ... basically anything that can be expressed in Markdown. Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Note that the annotate class must only be added to the outermost block. All nested elements can use the same list to define annotations, except when annotations are nested themselves. in annotations \u00b6 When SuperFences is enabled, annotations can be nested inside annotations by adding the annotate class to the list item hosting the annotation content, repeating the process: Text with nested annotations Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! (1) { .annotate } 1. :woman_raising_hand: I'm an annotation as well! Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! (1) I'm an annotation as well! in admonitions \u00b6 The titles and bodies of admonitions can also host annotations by adding the annotate modifier after the type qualifier, which is similar to how inline blocks work: Admonition with annotations !!! note annotate \"Phasellus posuere in sem ut cursus (1)\" Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1. :man_raising_hand: I'm an annotation! 2. :woman_raising_hand: I'm an annotation as well! Phasellus posuere in sem ut cursus (1) Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. I'm an annotation! I'm an annotation as well! in content tabs \u00b6 Content tabs can host annotations by adding the annotate class to the block of a dedicated content tab (and not to the container, which is not supported): Content tabs with annotations === \"Tab 1\" Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! === \"Tab 2\" Phasellus posuere in sem ut cursus (1) { .annotate } 1. :woman_raising_hand: I'm an annotation as well! Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well! in everything else \u00b6 The Attribute Lists extension is the key ingredient for adding annotations to most elements, but it has some limitations . However, it's always possible to leverage the Markdown in HTML extension to wrap arbitrary elements with a div with the annotate class: HTML with annotations < div class = \"annotate\" markdown > > Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. </ div > 1. :man_raising_hand: I'm an annotation! Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! With this trick, annotations can also be added to blockquotes, lists, and many other elements that are not supported by the Attribute Lists extension. Furthermore, note that code blocks follow different semantics . Known limitations Please note that annotations currently don't work in data tables as reported in #3453 , as data tables are scrollable elements and positioning is very tricky to get right. This might be fixed in the future.","title":"Annotations"},{"location":"reference/annotations/#annotations","text":"One of the flagship features of Material for MkDocs is the ability to inject annotations \u2013 little markers that can be added almost anywhere in a document and expand a tooltip containing arbitrary Markdown on click or keyboard focus.","title":"Annotations"},{"location":"reference/annotations/#configuration","text":"This configuration allows to add annotations to all inline- and block-level elements, as well as code blocks, and nest annotations inside each other. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list - md_in_html - pymdownx.superfences See additional configuration options: Attribute Lists Markdown in HTML SuperFences","title":"Configuration"},{"location":"reference/annotations/#usage","text":"","title":"Usage"},{"location":"reference/annotations/#using-annotations","text":"Insiders \u00b7 insiders-4.6.0 \u00b7 Experimental Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the annotate class, and content located in a list below the block containing the marker: Text with annotations Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! I can contain `code` , __formatted text__, images, ... basically anything that can be expressed in Markdown. Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Note that the annotate class must only be added to the outermost block. All nested elements can use the same list to define annotations, except when annotations are nested themselves.","title":"Using annotations"},{"location":"reference/annotations/#in-annotations","text":"When SuperFences is enabled, annotations can be nested inside annotations by adding the annotate class to the list item hosting the annotation content, repeating the process: Text with nested annotations Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! (1) { .annotate } 1. :woman_raising_hand: I'm an annotation as well! Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! (1) I'm an annotation as well!","title":"in annotations"},{"location":"reference/annotations/#in-admonitions","text":"The titles and bodies of admonitions can also host annotations by adding the annotate modifier after the type qualifier, which is similar to how inline blocks work: Admonition with annotations !!! note annotate \"Phasellus posuere in sem ut cursus (1)\" Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1. :man_raising_hand: I'm an annotation! 2. :woman_raising_hand: I'm an annotation as well! Phasellus posuere in sem ut cursus (1) Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. I'm an annotation! I'm an annotation as well!","title":"in admonitions"},{"location":"reference/annotations/#in-content-tabs","text":"Content tabs can host annotations by adding the annotate class to the block of a dedicated content tab (and not to the container, which is not supported): Content tabs with annotations === \"Tab 1\" Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. { .annotate } 1. :man_raising_hand: I'm an annotation! === \"Tab 2\" Phasellus posuere in sem ut cursus (1) { .annotate } 1. :woman_raising_hand: I'm an annotation as well! Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well!","title":"in content tabs"},{"location":"reference/annotations/#in-everything-else","text":"The Attribute Lists extension is the key ingredient for adding annotations to most elements, but it has some limitations . However, it's always possible to leverage the Markdown in HTML extension to wrap arbitrary elements with a div with the annotate class: HTML with annotations < div class = \"annotate\" markdown > > Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. </ div > 1. :man_raising_hand: I'm an annotation! Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! With this trick, annotations can also be added to blockquotes, lists, and many other elements that are not supported by the Attribute Lists extension. Furthermore, note that code blocks follow different semantics . Known limitations Please note that annotations currently don't work in data tables as reported in #3453 , as data tables are scrollable elements and positioning is very tricky to get right. This might be fixed in the future.","title":"in everything else"},{"location":"reference/buttons/","text":"Buttons \u00b6 Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, label or button element. This is especially useful for documents or landing pages with dedicated call-to-actions . Configuration \u00b6 This configuration allows to add attributes to all inline- and block-level elements with a simple syntax, turning any link into a button. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list See additional configuration options: Attribute Lists Usage \u00b6 Adding buttons \u00b6 In order to render a link as a button, suffix it with curly braces and add the .md-button class selector to it. The button will receive the selected primary color and accent color if active. Button [ Subscribe to our newsletter ]( # ){ .md-button } Subscribe to our newsletter Adding primary buttons \u00b6 If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the .md-button and .md-button--primary CSS class selectors. Button, primary [ Subscribe to our newsletter ]( # ){ .md-button .md-button--primary } Subscribe to our newsletter Adding icon buttons \u00b6 Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search . Button with icon [ Send :fontawesome-solid-paper-plane: ]( # ){ .md-button } Send","title":"Buttons"},{"location":"reference/buttons/#buttons","text":"Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, label or button element. This is especially useful for documents or landing pages with dedicated call-to-actions .","title":"Buttons"},{"location":"reference/buttons/#configuration","text":"This configuration allows to add attributes to all inline- and block-level elements with a simple syntax, turning any link into a button. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list See additional configuration options: Attribute Lists","title":"Configuration"},{"location":"reference/buttons/#usage","text":"","title":"Usage"},{"location":"reference/buttons/#adding-buttons","text":"In order to render a link as a button, suffix it with curly braces and add the .md-button class selector to it. The button will receive the selected primary color and accent color if active. Button [ Subscribe to our newsletter ]( # ){ .md-button } Subscribe to our newsletter","title":"Adding buttons"},{"location":"reference/buttons/#adding-primary-buttons","text":"If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the .md-button and .md-button--primary CSS class selectors. Button, primary [ Subscribe to our newsletter ]( # ){ .md-button .md-button--primary } Subscribe to our newsletter","title":"Adding primary buttons"},{"location":"reference/buttons/#adding-icon-buttons","text":"Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search . Button with icon [ Send :fontawesome-solid-paper-plane: ]( # ){ .md-button } Send","title":"Adding icon buttons"},{"location":"reference/code-blocks/","text":"Code blocks \u00b6 Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter. Configuration \u00b6 This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences The following sections discuss how to use different syntax highlighting features with Pygments , the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter. See additional configuration options: Highlight InlineHilite SuperFences Snippets Code annotations \u00b6 8.0.0 \u00b7 Feature flag \u00b7 Experimental Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to mkdocs.yml to enable them globally: theme : features : - content.code.annotate # (1)! I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Enabling code annotations for a specific code block If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension: ``` { .yaml .annotate } # Code block content ``` Note that the language shortcode which has to come first must now also be prefixed by a . . Anchor links \u00b6 Insiders \u00b7 insiders-4.4.0 \u00b7 Experimental In order to link to code annotations and share them more easily, Insiders adds an anchor link to each annotation automatically, which you can copy via right click or open in a new tab: # (1)! If you Cmd me, I'm rendered open in a new tab. You can also right-click me to copy link address to share me with others. Usage \u00b6 Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language: Code block ``` py import tensorflow as tf ``` import tensorflow as tf Adding a title \u00b6 7.3.6 \u00b7 Experimental In order to provide additional context, a custom title can be added to a code block by using the title=\"<custom title>\" option directly after the shortcode, e.g. to display the name of a file: Code block with title ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Adding annotations \u00b6 Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. 1 : Code block with annotation ``` yaml theme: features: - content.code.annotate # (1) ``` 1. :man_raising_hand: I'm a code annotation! I can contain `code` , __formatted text__, images, ... basically anything that can be written in Markdown. theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Stripping comments \u00b6 Insiders \u00b7 insiders-4.4.0 \u00b7 Experimental If you wish to strip the comment characters surrounding a code annotation, Insiders adds a new syntax that allows for just that. Simply add an ! after the closing parens of the code annotation: Code block with annotation, stripped ``` yaml # (1)! ``` 1. Look ma, less line noise! # (1)! Look ma, less line noise! Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons. Adding line numbers \u00b6 Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the shortcode, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows to split large code blocks for readability: Code block with line numbers ``` py linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines \u00b6 Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language shortcode. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums : Code block with highlighted lines ``` py hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code blocks \u00b6 When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. #! , directly followed by the corresponding language shortcode . Inline code block The `#!python range()` function is used to generate a sequence of numbers. The range () function is used to generate a sequence of numbers. Embedding external files \u00b6 When Snippets is enabled, content from other files (including source files) can be embedded by using the --8<-- notation directly from within a code block: Code block with external content ``` title=\".browserslistrc\" --8<--\u200b \".browserslistrc\" ``` .browserslistrc last 4 years Customization \u00b6 Custom syntax theme \u00b6 If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , they use the same color. You can assign a new color by using an additional style sheet : docs/stylesheets/extra.css mkdocs.yml : root > * { --md-code-hl-string-color : #0FF1CE ; } extra_css : - stylesheets/extra.css If you want to tweak a specific type of string, e.g. `backticks` , you can lookup the specific CSS class name in the syntax theme definition , and override it as part of your additional style sheet : docs/stylesheets/extra.css mkdocs.yml . highlight . sb { color : #0FF1CE ; } extra_css : - stylesheets/extra.css Annotations with numbers \u00b6 Prior to 8.1.0 , code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as + signs which are rotated if they're open to denote that clicking them again will close them. If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS: docs/stylesheets/extra.css mkdocs.yml . md-typeset . md-annotation__index > :: before { content : attr ( data -md-annotation-id ); } . md-typeset : focus-within > . md-annotation__index > :: before { transform : none ; } extra_css : - stylesheets/extra.css Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines. \u21a9","title":"Code blocks"},{"location":"reference/code-blocks/#code-blocks","text":"Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.","title":"Code blocks"},{"location":"reference/code-blocks/#configuration","text":"This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences The following sections discuss how to use different syntax highlighting features with Pygments , the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter. See additional configuration options: Highlight InlineHilite SuperFences Snippets","title":"Configuration"},{"location":"reference/code-blocks/#code-annotations","text":"8.0.0 \u00b7 Feature flag \u00b7 Experimental Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to mkdocs.yml to enable them globally: theme : features : - content.code.annotate # (1)! I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Enabling code annotations for a specific code block If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension: ``` { .yaml .annotate } # Code block content ``` Note that the language shortcode which has to come first must now also be prefixed by a . .","title":"Code annotations"},{"location":"reference/code-blocks/#anchor-links","text":"Insiders \u00b7 insiders-4.4.0 \u00b7 Experimental In order to link to code annotations and share them more easily, Insiders adds an anchor link to each annotation automatically, which you can copy via right click or open in a new tab: # (1)! If you Cmd me, I'm rendered open in a new tab. You can also right-click me to copy link address to share me with others.","title":"Anchor links"},{"location":"reference/code-blocks/#usage","text":"Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language: Code block ``` py import tensorflow as tf ``` import tensorflow as tf","title":"Usage"},{"location":"reference/code-blocks/#adding-a-title","text":"7.3.6 \u00b7 Experimental In order to provide additional context, a custom title can be added to a code block by using the title=\"<custom title>\" option directly after the shortcode, e.g. to display the name of a file: Code block with title ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding a title"},{"location":"reference/code-blocks/#adding-annotations","text":"Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. 1 : Code block with annotation ``` yaml theme: features: - content.code.annotate # (1) ``` 1. :man_raising_hand: I'm a code annotation! I can contain `code` , __formatted text__, images, ... basically anything that can be written in Markdown. theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown.","title":"Adding annotations"},{"location":"reference/code-blocks/#stripping-comments","text":"Insiders \u00b7 insiders-4.4.0 \u00b7 Experimental If you wish to strip the comment characters surrounding a code annotation, Insiders adds a new syntax that allows for just that. Simply add an ! after the closing parens of the code annotation: Code block with annotation, stripped ``` yaml # (1)! ``` 1. Look ma, less line noise! # (1)! Look ma, less line noise! Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.","title":"Stripping comments"},{"location":"reference/code-blocks/#adding-line-numbers","text":"Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the shortcode, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows to split large code blocks for readability: Code block with line numbers ``` py linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"reference/code-blocks/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language shortcode. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums : Code block with highlighted lines ``` py hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"reference/code-blocks/#highlighting-inline-code-blocks","text":"When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. #! , directly followed by the corresponding language shortcode . Inline code block The `#!python range()` function is used to generate a sequence of numbers. The range () function is used to generate a sequence of numbers.","title":"Highlighting inline code blocks"},{"location":"reference/code-blocks/#embedding-external-files","text":"When Snippets is enabled, content from other files (including source files) can be embedded by using the --8<-- notation directly from within a code block: Code block with external content ``` title=\".browserslistrc\" --8<--\u200b \".browserslistrc\" ``` .browserslistrc last 4 years","title":"Embedding external files"},{"location":"reference/code-blocks/#customization","text":"","title":"Customization"},{"location":"reference/code-blocks/#custom-syntax-theme","text":"If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , they use the same color. You can assign a new color by using an additional style sheet : docs/stylesheets/extra.css mkdocs.yml : root > * { --md-code-hl-string-color : #0FF1CE ; } extra_css : - stylesheets/extra.css If you want to tweak a specific type of string, e.g. `backticks` , you can lookup the specific CSS class name in the syntax theme definition , and override it as part of your additional style sheet : docs/stylesheets/extra.css mkdocs.yml . highlight . sb { color : #0FF1CE ; } extra_css : - stylesheets/extra.css","title":"Custom syntax theme"},{"location":"reference/code-blocks/#annotations-with-numbers","text":"Prior to 8.1.0 , code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as + signs which are rotated if they're open to denote that clicking them again will close them. If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS: docs/stylesheets/extra.css mkdocs.yml . md-typeset . md-annotation__index > :: before { content : attr ( data -md-annotation-id ); } . md-typeset : focus-within > . md-annotation__index > :: before { transform : none ; } extra_css : - stylesheets/extra.css Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines. \u21a9","title":"Annotations with numbers"},{"location":"reference/content-tabs/","text":"Content tabs \u00b6 Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content. Configuration \u00b6 This configuration enables content tabs, and allows to nest arbitrary content inside content tabs, including code blocks and ... more content tabs! Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true See additional configuration options: SuperFences Tabbed Linked content tabs \u00b6 Insiders \u00b7 insiders-2.9.0 \u00b7 Feature flag \u00b7 Experimental When enabled, all content tabs across the whole documentation site will be linked and switch to the same label when the user clicks on a tab. Add the following lines to mkdocs.yml : theme : features : - content.tabs.link Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads. Enabled Disabled Usage \u00b6 Grouping code blocks \u00b6 Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing: Content tabs with code blocks === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Grouping other content \u00b6 When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks: Content tabs === \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Embedded content \u00b6 When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions or blockquotes: Content tabs in admonition !!! example === \"Unordered List\" ``` markdown title=\"List, unordered\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` === \"Ordered List\" ``` markdown title=\"List, ordered\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` Example Unordered List Ordered List List, unordered * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci List, ordered 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci","title":"Content tabs"},{"location":"reference/content-tabs/#content-tabs","text":"Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content.","title":"Content tabs"},{"location":"reference/content-tabs/#configuration","text":"This configuration enables content tabs, and allows to nest arbitrary content inside content tabs, including code blocks and ... more content tabs! Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true See additional configuration options: SuperFences Tabbed","title":"Configuration"},{"location":"reference/content-tabs/#linked-content-tabs","text":"Insiders \u00b7 insiders-2.9.0 \u00b7 Feature flag \u00b7 Experimental When enabled, all content tabs across the whole documentation site will be linked and switch to the same label when the user clicks on a tab. Add the following lines to mkdocs.yml : theme : features : - content.tabs.link Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads. Enabled Disabled","title":"Linked content tabs"},{"location":"reference/content-tabs/#usage","text":"","title":"Usage"},{"location":"reference/content-tabs/#grouping-code-blocks","text":"Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing: Content tabs with code blocks === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Grouping code blocks"},{"location":"reference/content-tabs/#grouping-other-content","text":"When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks: Content tabs === \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Grouping other content"},{"location":"reference/content-tabs/#embedded-content","text":"When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions or blockquotes: Content tabs in admonition !!! example === \"Unordered List\" ``` markdown title=\"List, unordered\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` === \"Ordered List\" ``` markdown title=\"List, ordered\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` Example Unordered List Ordered List List, unordered * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci List, ordered 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci","title":"Embedded content"},{"location":"reference/data-tables/","text":"Data tables \u00b6 Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript . Configuration \u00b6 This configuration enables Markdown table support, which should normally be enabled by default, but to be sure, add the following lines to mkdocs.yml : markdown_extensions : - tables See additional configuration options: Tables Usage \u00b6 Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis : Data table | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Column alignment \u00b6 If you want to align a specific column to the left , center or right , you can use the regular Markdown syntax placing : characters at the beginning and/or end of the divider. Left Center Right Data table, columns aligned to left | Method | Description | | :---------- | :----------------------------------- | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Data table, columns centered | Method | Description | | :---------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Data table, columns aligned to right | Method | Description | | ----------: | -----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Customization \u00b6 Sortable tables \u00b6 If you want to make data tables sortable, you can add tablesort , which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript : docs/javascripts/tablesort.js mkdocs.yml document $ . subscribe ( function () { var tables = document . querySelectorAll ( \"article table:not([class])\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js - javascripts/tablesort.js After applying the customization, data tables can be sorted by clicking on a column: Data table, columns sortable | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Note that tablesort provides alternative comparison implementations like numbers, filesizes, dates and month names. See the tablesort documentation for more information. var tables = document.querySelectorAll(\"article table\") new Tablesort(tables.item(tables.length - 1));","title":"Data tables"},{"location":"reference/data-tables/#data-tables","text":"Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript .","title":"Data tables"},{"location":"reference/data-tables/#configuration","text":"This configuration enables Markdown table support, which should normally be enabled by default, but to be sure, add the following lines to mkdocs.yml : markdown_extensions : - tables See additional configuration options: Tables","title":"Configuration"},{"location":"reference/data-tables/#usage","text":"Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis : Data table | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Usage"},{"location":"reference/data-tables/#column-alignment","text":"If you want to align a specific column to the left , center or right , you can use the regular Markdown syntax placing : characters at the beginning and/or end of the divider. Left Center Right Data table, columns aligned to left | Method | Description | | :---------- | :----------------------------------- | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Data table, columns centered | Method | Description | | :---------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Data table, columns aligned to right | Method | Description | | ----------: | -----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Column alignment"},{"location":"reference/data-tables/#customization","text":"","title":"Customization"},{"location":"reference/data-tables/#sortable-tables","text":"If you want to make data tables sortable, you can add tablesort , which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript : docs/javascripts/tablesort.js mkdocs.yml document $ . subscribe ( function () { var tables = document . querySelectorAll ( \"article table:not([class])\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js - javascripts/tablesort.js After applying the customization, data tables can be sorted by clicking on a column: Data table, columns sortable | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Method Description GET Fetch resource PUT Update resource DELETE Delete resource Note that tablesort provides alternative comparison implementations like numbers, filesizes, dates and month names. See the tablesort documentation for more information. var tables = document.querySelectorAll(\"article table\") new Tablesort(tables.item(tables.length - 1));","title":"Sortable tables"},{"location":"reference/diagrams/","text":"Diagrams \u00b6 Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js , a very popular and flexible solution for drawing diagrams. Configuration \u00b6 Insiders \u00b7 insiders-1.15.0 \u00b7 Experimental This configuration enables native support for Mermaid.js diagrams. Material for MkDocs will automatically initialize the JavaScript runtime when a page includes a mermaid code block: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format No further configuration is necessary. Advantages over a custom integration: Works with instant loading without any additional effort Diagrams automatically use fonts and colors defined in mkdocs.yml 1 Fonts and colors can be customized with additional style sheets Support for both, light and dark color schemes \u2013 try it on this page! Usage \u00b6 Using flowcharts \u00b6 Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps: Flow chart ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Using sequence diagrams \u00b6 Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors: Sequence diagram ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Using state diagrams \u00b6 State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states: State diagram ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Using class diagrams \u00b6 Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them: Class diagram ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Using entity-relationship diagrams \u00b6 An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge: Entity-relationship diagram ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently only adjust the fonts and colors for flowcharts, sequence diagrams, class diagams, state diagrams and entity relationship diagrams. \u21a9","title":"Diagrams"},{"location":"reference/diagrams/#diagrams","text":"Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js , a very popular and flexible solution for drawing diagrams.","title":"Diagrams"},{"location":"reference/diagrams/#configuration","text":"Insiders \u00b7 insiders-1.15.0 \u00b7 Experimental This configuration enables native support for Mermaid.js diagrams. Material for MkDocs will automatically initialize the JavaScript runtime when a page includes a mermaid code block: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format No further configuration is necessary. Advantages over a custom integration: Works with instant loading without any additional effort Diagrams automatically use fonts and colors defined in mkdocs.yml 1 Fonts and colors can be customized with additional style sheets Support for both, light and dark color schemes \u2013 try it on this page!","title":"Configuration"},{"location":"reference/diagrams/#usage","text":"","title":"Usage"},{"location":"reference/diagrams/#using-flowcharts","text":"Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps: Flow chart ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Using flowcharts"},{"location":"reference/diagrams/#using-sequence-diagrams","text":"Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors: Sequence diagram ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Using sequence diagrams"},{"location":"reference/diagrams/#using-state-diagrams","text":"State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states: State diagram ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*]","title":"Using state diagrams"},{"location":"reference/diagrams/#using-class-diagrams","text":"Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them: Class diagram ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() }","title":"Using class diagrams"},{"location":"reference/diagrams/#using-entity-relationship-diagrams","text":"An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge: Entity-relationship diagram ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently only adjust the fonts and colors for flowcharts, sequence diagrams, class diagams, state diagrams and entity relationship diagrams. \u21a9","title":"Using entity-relationship diagrams"},{"location":"reference/footnotes/","text":"Footnotes \u00b6 Footnotes are a great way to add supplemental or additional information to a specific word, phrase or sentence without interrupting the flow of a document. Material for MkDocs provides the ability to define, reference and render footnotes. Configuration \u00b6 This configuration adds the ability to define inline footnotes, which are then rendered below all Markdown content of a document. Add the following lines to mkdocs.yml : markdown_extensions : - footnotes See additional configuration options: Footnotes Usage \u00b6 Adding footnote references \u00b6 A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Text with footnote references Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Adding footnote content \u00b6 The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added. on a single line \u00b6 Short footnotes can be written on the same line: Footnote [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Jump to footnote on multiple lines \u00b6 Paragraphs can be written on the next line and must be indented by four spaces: Footnote [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Jump to footnote Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Footnotes"},{"location":"reference/footnotes/#footnotes","text":"Footnotes are a great way to add supplemental or additional information to a specific word, phrase or sentence without interrupting the flow of a document. Material for MkDocs provides the ability to define, reference and render footnotes.","title":"Footnotes"},{"location":"reference/footnotes/#configuration","text":"This configuration adds the ability to define inline footnotes, which are then rendered below all Markdown content of a document. Add the following lines to mkdocs.yml : markdown_extensions : - footnotes See additional configuration options: Footnotes","title":"Configuration"},{"location":"reference/footnotes/#usage","text":"","title":"Usage"},{"location":"reference/footnotes/#adding-footnote-references","text":"A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Text with footnote references Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2","title":"Adding footnote references"},{"location":"reference/footnotes/#adding-footnote-content","text":"The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added.","title":"Adding footnote content"},{"location":"reference/footnotes/#on-a-single-line","text":"Short footnotes can be written on the same line: Footnote [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Jump to footnote","title":"on a single line"},{"location":"reference/footnotes/#on-multiple-lines","text":"Paragraphs can be written on the next line and must be indented by four spaces: Footnote [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Jump to footnote Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"on multiple lines"},{"location":"reference/formatting/","text":"Formatting \u00b6 Material for MkDocs provides support for several HTML elements that can be used to highlight sections of a document or apply specific formatting. Additionally, Critic Markup is supported, adding the ability to display suggested changes for a document. Configuration \u00b6 This configuration enables support for keyboard keys, tracking changes in documents, defining sub- and superscript and highlighting text. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.critic - pymdownx.caret - pymdownx.keys - pymdownx.mark - pymdownx.tilde See additional configuration options: Critic Caret, Mark & Tilde Keys Usage \u00b6 Highlighting changes \u00b6 When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document: Text with suggested changes Text can be {--deleted--} and replacement text {++added++}. This can also be combined into {~~one~>a single~~} operation. {==Highlighting==} is also possible {>>and comments can be added inline<<}. {== Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. ==} Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Highlighting text \u00b6 When Caret, Mark & Tilde are enabled, text can be highlighted with a simple syntax, which is more convenient that directly using the corresponding mark , ins and del HTML tags: Text with highlighting - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ This was marked This was inserted This was deleted Sub- and superscripts \u00b6 When Caret & Tilde are enabled, text can be sub- and superscripted with a simple syntax, which is more convenient that directly using the corresponding sub and sup HTML tags: Text with sub- und superscripts - H~2~0 - A^T^A H 2 0 A T A Adding keyboard keys \u00b6 When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available shortcodes: Keyboard keys ++ctrl+alt+del++ Ctrl + Alt + Del","title":"Formatting"},{"location":"reference/formatting/#formatting","text":"Material for MkDocs provides support for several HTML elements that can be used to highlight sections of a document or apply specific formatting. Additionally, Critic Markup is supported, adding the ability to display suggested changes for a document.","title":"Formatting"},{"location":"reference/formatting/#configuration","text":"This configuration enables support for keyboard keys, tracking changes in documents, defining sub- and superscript and highlighting text. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.critic - pymdownx.caret - pymdownx.keys - pymdownx.mark - pymdownx.tilde See additional configuration options: Critic Caret, Mark & Tilde Keys","title":"Configuration"},{"location":"reference/formatting/#usage","text":"","title":"Usage"},{"location":"reference/formatting/#highlighting-changes","text":"When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document: Text with suggested changes Text can be {--deleted--} and replacement text {++added++}. This can also be combined into {~~one~>a single~~} operation. {==Highlighting==} is also possible {>>and comments can be added inline<<}. {== Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. ==} Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Highlighting changes"},{"location":"reference/formatting/#highlighting-text","text":"When Caret, Mark & Tilde are enabled, text can be highlighted with a simple syntax, which is more convenient that directly using the corresponding mark , ins and del HTML tags: Text with highlighting - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ This was marked This was inserted This was deleted","title":"Highlighting text"},{"location":"reference/formatting/#sub-and-superscripts","text":"When Caret & Tilde are enabled, text can be sub- and superscripted with a simple syntax, which is more convenient that directly using the corresponding sub and sup HTML tags: Text with sub- und superscripts - H~2~0 - A^T^A H 2 0 A T A","title":"Sub- and superscripts"},{"location":"reference/formatting/#adding-keyboard-keys","text":"When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available shortcodes: Keyboard keys ++ctrl+alt+del++ Ctrl + Alt + Del","title":"Adding keyboard keys"},{"location":"reference/icons-emojis/","text":"Icons + Emojis \u00b6 One of the best features of Material for MkDocs is the possibility to use more than 8.000 icons and thousands of emojis in your project documentation with practically zero additional effort. Moreover, custom icons can be added and used in mkdocs.yml , documents and templates. Search \u00b6 Tip: Enter some keywords to find icons and emojis and click on the shortcode to copy it to your clipboard. Configuration \u00b6 This configuration enables the use of icons and emojis by using simple shortcodes which can be discovered through the icon search . Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg The following icon sets are bundled with Material for MkDocs: \u2013 Material Design \u2013 FontAwesome \u2013 Octicons See additional configuration options: Emoji Emoji with custom icons Usage \u00b6 Using emojis \u00b6 Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia : Emoji :smile: Using icons \u00b6 When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : Icon :fontawesome-regular-laugh-wink: with colors \u00b6 Custom CSS classes can be added to icons by suffixing the icon with a special syntax. While HTML allows to use inline styles , it's always recommended to add an additional style sheet and move declarations into dedicated CSS classes: .twitter { color: #1DA1F2; } docs/stylesheets/extra.css mkdocs.yml . twitter { color : #1DA1F2 ; } extra_css : - stylesheets/extra.css After applying the customization, add the CSS class to the icon shortcode: Icon with color :fontawesome-brands-twitter:{ .twitter } with animations \u00b6 Similar to adding colors , it's just as easy to add animations to icons by using an additional style sheet , defining a @keyframes rule and adding a dedicated CSS class to the icon: docs/stylesheets/extra.css mkdocs.yml @ keyframes heart { 0 %, 40 %, 80 %, 100 % { transform : scale ( 1 ); } 20 %, 60 % { transform : scale ( 1.15 ); } } . heart { animation : heart 1000 ms infinite ; } extra_css : - stylesheets/extra.css After applying the customization, add the CSS class to the icon shortcode: Icon with animation :octicons-heart-fill-24:{ .heart } Customization \u00b6 Using icons in templates \u00b6 When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's include function and wrap it with the .twemoji CSS class: < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} <!-- (1)! --> </ span > Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: This is exactly what Material for MkDocs does in its templates.","title":"Icons + Emojis"},{"location":"reference/icons-emojis/#icons-emojis","text":"One of the best features of Material for MkDocs is the possibility to use more than 8.000 icons and thousands of emojis in your project documentation with practically zero additional effort. Moreover, custom icons can be added and used in mkdocs.yml , documents and templates.","title":"Icons + Emojis"},{"location":"reference/icons-emojis/#search","text":"Tip: Enter some keywords to find icons and emojis and click on the shortcode to copy it to your clipboard.","title":"Search"},{"location":"reference/icons-emojis/#configuration","text":"This configuration enables the use of icons and emojis by using simple shortcodes which can be discovered through the icon search . Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg The following icon sets are bundled with Material for MkDocs: \u2013 Material Design \u2013 FontAwesome \u2013 Octicons See additional configuration options: Emoji Emoji with custom icons","title":"Configuration"},{"location":"reference/icons-emojis/#usage","text":"","title":"Usage"},{"location":"reference/icons-emojis/#using-emojis","text":"Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia : Emoji :smile:","title":"Using emojis"},{"location":"reference/icons-emojis/#using-icons","text":"When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : Icon :fontawesome-regular-laugh-wink:","title":"Using icons"},{"location":"reference/icons-emojis/#with-colors","text":"Custom CSS classes can be added to icons by suffixing the icon with a special syntax. While HTML allows to use inline styles , it's always recommended to add an additional style sheet and move declarations into dedicated CSS classes: .twitter { color: #1DA1F2; } docs/stylesheets/extra.css mkdocs.yml . twitter { color : #1DA1F2 ; } extra_css : - stylesheets/extra.css After applying the customization, add the CSS class to the icon shortcode: Icon with color :fontawesome-brands-twitter:{ .twitter }","title":"with colors"},{"location":"reference/icons-emojis/#with-animations","text":"Similar to adding colors , it's just as easy to add animations to icons by using an additional style sheet , defining a @keyframes rule and adding a dedicated CSS class to the icon: docs/stylesheets/extra.css mkdocs.yml @ keyframes heart { 0 %, 40 %, 80 %, 100 % { transform : scale ( 1 ); } 20 %, 60 % { transform : scale ( 1.15 ); } } . heart { animation : heart 1000 ms infinite ; } extra_css : - stylesheets/extra.css After applying the customization, add the CSS class to the icon shortcode: Icon with animation :octicons-heart-fill-24:{ .heart }","title":"with animations"},{"location":"reference/icons-emojis/#customization","text":"","title":"Customization"},{"location":"reference/icons-emojis/#using-icons-in-templates","text":"When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's include function and wrap it with the .twemoji CSS class: < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} <!-- (1)! --> </ span > Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: This is exactly what Material for MkDocs does in its templates.","title":"Using icons in templates"},{"location":"reference/images/","text":"Images \u00b6 While images are first-class citizens of Markdown and part of the core syntax, it can be difficult to work with them. Material for MkDocs makes working with images more comfortable, providing styles for image alignment and image captions. Configuration \u00b6 This configuration adds the ability to align images, add captions to images (rendering them as figures), and mark large images for lazy-loading. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list - md_in_html See additional configuration options: Attribute Lists Markdown in HTML Usage \u00b6 Image alignment \u00b6 When Attribute Lists is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right : Left Right Image, aligned to left ![ Image title ]( https://dummyimage.com/600x400/eee/aaa ){ align=left } Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Image, aligned to right ![ Image title ]( https://dummyimage.com/600x400/eee/aaa ){ align=right } Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports. Why is there no centered alignment? The align attribute doesn't allow for centered alignment, which is why this option is not supported by Material for MkDocs. 1 Instead, the image captions syntax can be used, as captions are optional. Image captions \u00b6 Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to use the Markdown in HTML extension with literal figure and figcaption tags: Image with caption < figure markdown > ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } < figcaption > Image caption </ figcaption > </ figure > Image caption Image lazy-loading \u00b6 Modern browsers provide native support for lazy-loading images through the loading=lazy directive, which degrades to eager-loading in browsers without support: Image, lazy-loaded ![ Image title ]( https://dummyimage.com/600x400/ ){ loading=lazy } Light and dark mode \u00b6 8.1.1 \u00b7 Experimental If you added a color palette toggle and want to show different images for light and dark color schemes, you can append a #only-light or #only-dark hash fragment to the image URL: Image, different for light and dark mode ![ Image title ]( https://dummyimage.com/600x400/f5f5f5/aaaaaa#only-light ) ![ Image title ]( https://dummyimage.com/600x400/21222c/d5d7e2#only-dark ) You might also realize that the align attribute has been deprecated as of HTML5, so why use it anyways? The main reason is portability \u2013 it's still supported by all browsers and clients, and is very unlikely to be completely removed, as many older websites still use it. This ensures a consistent appearance when a Markdown file with these attributes is viewed outside of a website generated by Material for MkDocs. \u21a9","title":"Images"},{"location":"reference/images/#images","text":"While images are first-class citizens of Markdown and part of the core syntax, it can be difficult to work with them. Material for MkDocs makes working with images more comfortable, providing styles for image alignment and image captions.","title":"Images"},{"location":"reference/images/#configuration","text":"This configuration adds the ability to align images, add captions to images (rendering them as figures), and mark large images for lazy-loading. Add the following lines to mkdocs.yml : markdown_extensions : - attr_list - md_in_html See additional configuration options: Attribute Lists Markdown in HTML","title":"Configuration"},{"location":"reference/images/#usage","text":"","title":"Usage"},{"location":"reference/images/#image-alignment","text":"When Attribute Lists is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right : Left Right Image, aligned to left ![ Image title ]( https://dummyimage.com/600x400/eee/aaa ){ align=left } Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Image, aligned to right ![ Image title ]( https://dummyimage.com/600x400/eee/aaa ){ align=right } Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports. Why is there no centered alignment? The align attribute doesn't allow for centered alignment, which is why this option is not supported by Material for MkDocs. 1 Instead, the image captions syntax can be used, as captions are optional.","title":"Image alignment"},{"location":"reference/images/#image-captions","text":"Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to use the Markdown in HTML extension with literal figure and figcaption tags: Image with caption < figure markdown > ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } < figcaption > Image caption </ figcaption > </ figure > Image caption","title":"Image captions"},{"location":"reference/images/#image-lazy-loading","text":"Modern browsers provide native support for lazy-loading images through the loading=lazy directive, which degrades to eager-loading in browsers without support: Image, lazy-loaded ![ Image title ]( https://dummyimage.com/600x400/ ){ loading=lazy }","title":"Image lazy-loading"},{"location":"reference/images/#light-and-dark-mode","text":"8.1.1 \u00b7 Experimental If you added a color palette toggle and want to show different images for light and dark color schemes, you can append a #only-light or #only-dark hash fragment to the image URL: Image, different for light and dark mode ![ Image title ]( https://dummyimage.com/600x400/f5f5f5/aaaaaa#only-light ) ![ Image title ]( https://dummyimage.com/600x400/21222c/d5d7e2#only-dark ) You might also realize that the align attribute has been deprecated as of HTML5, so why use it anyways? The main reason is portability \u2013 it's still supported by all browsers and clients, and is very unlikely to be completely removed, as many older websites still use it. This ensures a consistent appearance when a Markdown file with these attributes is viewed outside of a website generated by Material for MkDocs. \u21a9","title":"Light and dark mode"},{"location":"reference/lists/","text":"Lists \u00b6 Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists , which are supported through standard Markdown, as well as definition lists and task lists , which are supported through extensions. Configuration \u00b6 This configuration enables the use of definition lists and tasks lists, which are both not part of the standard Markdown syntax. Add the following lines to mkdocs.yml : markdown_extensions : - def_list - pymdownx.tasklist : custom_checkbox : true See additional configuration options: Definition Lists Tasklist Usage \u00b6 Using unordered lists \u00b6 Unordered lists can be written by prefixing a line with a - , * or + list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other: List, unordered - Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. * Nam vulputate tincidunt fringilla. * Nullam dignissim ultrices urna non auctor. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Using ordered lists \u00b6 Ordered lists must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to 1. , as they will be re-numbered when rendered: List, ordered 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Using definition lists \u00b6 When Definition Lists is enabled, lists of arbitrary key-value pairs, e.g. the parameters of functions or modules, can be enumerated with a simple syntax: Definition list `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Using task lists \u00b6 When Tasklist is enabled, unordered list items can be prefixed with [ ] to render an unchecked checkbox or [x] to render a checked checkbox, allowing for the definition of task lists: Task list - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Lists"},{"location":"reference/lists/#lists","text":"Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists , which are supported through standard Markdown, as well as definition lists and task lists , which are supported through extensions.","title":"Lists"},{"location":"reference/lists/#configuration","text":"This configuration enables the use of definition lists and tasks lists, which are both not part of the standard Markdown syntax. Add the following lines to mkdocs.yml : markdown_extensions : - def_list - pymdownx.tasklist : custom_checkbox : true See additional configuration options: Definition Lists Tasklist","title":"Configuration"},{"location":"reference/lists/#usage","text":"","title":"Usage"},{"location":"reference/lists/#using-unordered-lists","text":"Unordered lists can be written by prefixing a line with a - , * or + list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other: List, unordered - Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. * Nam vulputate tincidunt fringilla. * Nullam dignissim ultrices urna non auctor. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.","title":"Using unordered lists"},{"location":"reference/lists/#using-ordered-lists","text":"Ordered lists must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to 1. , as they will be re-numbered when rendered: List, ordered 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"Using ordered lists"},{"location":"reference/lists/#using-definition-lists","text":"When Definition Lists is enabled, lists of arbitrary key-value pairs, e.g. the parameters of functions or modules, can be enumerated with a simple syntax: Definition list `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.","title":"Using definition lists"},{"location":"reference/lists/#using-task-lists","text":"When Tasklist is enabled, unordered list items can be prefixed with [ ] to render an unchecked checkbox or [x] to render a checked checkbox, allowing for the definition of task lists: Task list - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Using task lists"},{"location":"reference/mathjax/","text":"MathJax \u00b6 MathJax is a beautiful and accessible way to display mathematical content in the browser, adds support for mathematical typesetting in different notations (e.g. LaTeX , MathML , AsciiMath ), and can be easily integrated with Material for MkDocs. Configuration \u00b6 This configuration enables support for rendering block and inline block equations through MathJax . Create a configuration file and add the following lines to mkdocs.yml : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { // (1)! MathJax . typesetPromise () }) This integrates MathJax with instant loading . markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js See additional configuration options: Arithmatex window.MathJax = { tex: { inlineMath: [[\"\\\\(\", \"\\\\)\"]], displayMath: [[\"\\\\[\", \"\\\\]\"]], processEscapes: true, processEnvironments: true }, options: { ignoreHtmlClass: \".*|\", processHtmlClass: \"arithmatex\" } }; Usage \u00b6 Using block syntax \u00b6 Blocks must be enclosed in $$ ... $$ or \\[ ... \\] on separate lines: MathJax, block syntax $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] Using inline block syntax \u00b6 Inline blocks must be enclosed in $ ... $ or \\( ... \\) : MathJax, inline syntax The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) .","title":"MathJax"},{"location":"reference/mathjax/#mathjax","text":"MathJax is a beautiful and accessible way to display mathematical content in the browser, adds support for mathematical typesetting in different notations (e.g. LaTeX , MathML , AsciiMath ), and can be easily integrated with Material for MkDocs.","title":"MathJax"},{"location":"reference/mathjax/#configuration","text":"This configuration enables support for rendering block and inline block equations through MathJax . Create a configuration file and add the following lines to mkdocs.yml : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { // (1)! MathJax . typesetPromise () }) This integrates MathJax with instant loading . markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js See additional configuration options: Arithmatex window.MathJax = { tex: { inlineMath: [[\"\\\\(\", \"\\\\)\"]], displayMath: [[\"\\\\[\", \"\\\\]\"]], processEscapes: true, processEnvironments: true }, options: { ignoreHtmlClass: \".*|\", processHtmlClass: \"arithmatex\" } };","title":"Configuration"},{"location":"reference/mathjax/#usage","text":"","title":"Usage"},{"location":"reference/mathjax/#using-block-syntax","text":"Blocks must be enclosed in $$ ... $$ or \\[ ... \\] on separate lines: MathJax, block syntax $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Using block syntax"},{"location":"reference/mathjax/#using-inline-block-syntax","text":"Inline blocks must be enclosed in $ ... $ or \\( ... \\) : MathJax, inline syntax The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) .","title":"Using inline block syntax"},{"location":"setup/adding-a-comment-system/","text":"Adding a comment system \u00b6 Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization \u00b6 Giscus integration \u00b6 Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: < script src = \"https://giscus.app/client.js\" data-repo = \"<username>/<repository>\" data-repo-id = \"...\" data-category = \"...\" data-category-id = \"...\" data-mapping = \"pathname\" data-reactions-enabled = \"1\" data-emit-metadata = \"1\" data-theme = \"light\" data-lang = \"en\" crossorigin = \"anonymous\" async > </ script > You can either integrate Giscus on every page by overriding the main.html template, or create a new template (e.g. blog.html ) to extend from main.html which includes the comment system, so you can decide for each page whether you want to allow comments or not. In order to integrate Giscus , follow the guide on theme extension and override the content block , extending the default by calling the super() function at the beginning of the block: {% extends \"base.html\" %} {% block content %} {{ super() }} <!-- Giscus --> < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > <!-- Replace with generated snippet --> <!-- Reload on palette change --> < script > var palette = __md_get ( \"__palette\" ) if ( palette && typeof palette . color === \"object\" ) if ( palette . color . scheme === \"slate\" ) { var giscus = document . querySelector ( \"script[src*=giscus]\" ) giscus . setAttribute ( \"data-theme\" , \"dark\" ) // (1)! } /* Register event handlers after documented loaded */ document . addEventListener ( \"DOMContentLoaded\" , function () { var ref = document . querySelector ( \"[data-md-component=palette]\" ) ref . addEventListener ( \"change\" , function () { var palette = __md_get ( \"__palette\" ) if ( palette && typeof palette . color === \"object\" ) { var theme = palette . color . scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document . querySelector ( \".giscus-frame\" ) frame . contentWindow . postMessage ( { giscus : { setConfig : { theme } } }, \"https://giscus.app\" ) } }) }) </ script > {% endblock %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you extended main.html , you should now see the Giscus comment system at the bottom of each page. If you created a new, separate template, you can enable Giscus by setting the page template via front matter.","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#customization","text":"","title":"Customization"},{"location":"setup/adding-a-comment-system/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: < script src = \"https://giscus.app/client.js\" data-repo = \"<username>/<repository>\" data-repo-id = \"...\" data-category = \"...\" data-category-id = \"...\" data-mapping = \"pathname\" data-reactions-enabled = \"1\" data-emit-metadata = \"1\" data-theme = \"light\" data-lang = \"en\" crossorigin = \"anonymous\" async > </ script > You can either integrate Giscus on every page by overriding the main.html template, or create a new template (e.g. blog.html ) to extend from main.html which includes the comment system, so you can decide for each page whether you want to allow comments or not. In order to integrate Giscus , follow the guide on theme extension and override the content block , extending the default by calling the super() function at the beginning of the block: {% extends \"base.html\" %} {% block content %} {{ super() }} <!-- Giscus --> < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > <!-- Replace with generated snippet --> <!-- Reload on palette change --> < script > var palette = __md_get ( \"__palette\" ) if ( palette && typeof palette . color === \"object\" ) if ( palette . color . scheme === \"slate\" ) { var giscus = document . querySelector ( \"script[src*=giscus]\" ) giscus . setAttribute ( \"data-theme\" , \"dark\" ) // (1)! } /* Register event handlers after documented loaded */ document . addEventListener ( \"DOMContentLoaded\" , function () { var ref = document . querySelector ( \"[data-md-component=palette]\" ) ref . addEventListener ( \"change\" , function () { var palette = __md_get ( \"__palette\" ) if ( palette && typeof palette . color === \"object\" ) { var theme = palette . color . scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document . querySelector ( \".giscus-frame\" ) frame . contentWindow . postMessage ( { giscus : { setConfig : { theme } } }, \"https://giscus.app\" ) } }) }) </ script > {% endblock %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you extended main.html , you should now see the Giscus comment system at the bottom of each page. If you created a new, separate template, you can enable Giscus by setting the page template via front matter.","title":"Giscus integration"},{"location":"setup/adding-a-git-repository/","text":"Adding a git repository \u00b6 If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including statistics like stars and forks. Furthermore, individual documents can be linked to specific source files. Configuration \u00b6 Repository \u00b6 0.1.0 \u00b7 Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url : https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. Repository name \u00b6 0.1.0 \u00b7 Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name : squidfunk/mkdocs-material Repository icon \u00b6 5.0.0 \u00b7 Default: fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme : icon : repo : fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: \u2013 fontawesome/brands/git \u2013 fontawesome/brands/git-alt \u2013 fontawesome/brands/git-square \u2013 fontawesome/brands/github \u2013 fontawesome/brands/github-alt \u2013 fontawesome/brands/github-square \u2013 fontawesome/brands/gitlab \u2013 fontawesome/brands/gitkraken \u2013 fontawesome/brands/bitbucket \u2013 fontawesome/solid/trash Edit button \u00b6 0.1.0 \u00b7 Default: automatically set If the repository URL points to a GitHub , GitLab or Bitbucket repository, an edit button is displayed at the top of each document. This behavior can be changed by setting edit_uri in mkdocs.yml : Customize edit path Hide edit button edit_uri : edit/master/docs/ edit_uri : \"\" Revision date \u00b6 4.6.0 \u00b7 Plugin The git-revision-date plugin adds support for displaying the date a document was last updated at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-plugin Then, add the following lines to mkdocs.yml : plugins : - git-revision-date The following configuration options are supported: enabled_if_env Default: none \u2013 When specified, the plugin will only be invoked if the environment variable exists. This makes it easy to disable extraction for cases when the repository is not available: plugins : - git-revision-date : enabled_if_env : CI The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Revision date, localized \u00b6 4.6.0 \u00b7 Plugin Similarly, the git-revision-date-localized plugin adds support for adding a localized update and creation date at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following to mkdocs.yml : plugins : - git-revision-date-localized The following configuration options are supported: type Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : plugins : - git-revision-date-localized : type : date fallback_to_build_date Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: plugins : - git-revision-date-localized : fallback_to_build_date : true enable_creation_date 7.1.4 \u00b7 Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: plugins : - git-revision-date-localized : enable_creation_date : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including statistics like stars and forks. Furthermore, individual documents can be linked to specific source files.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#configuration","text":"","title":"Configuration"},{"location":"setup/adding-a-git-repository/#repository","text":"0.1.0 \u00b7 Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url : https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered.","title":"Repository"},{"location":"setup/adding-a-git-repository/#repository-name","text":"0.1.0 \u00b7 Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name : squidfunk/mkdocs-material","title":"Repository name"},{"location":"setup/adding-a-git-repository/#repository-icon","text":"5.0.0 \u00b7 Default: fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme : icon : repo : fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: \u2013 fontawesome/brands/git \u2013 fontawesome/brands/git-alt \u2013 fontawesome/brands/git-square \u2013 fontawesome/brands/github \u2013 fontawesome/brands/github-alt \u2013 fontawesome/brands/github-square \u2013 fontawesome/brands/gitlab \u2013 fontawesome/brands/gitkraken \u2013 fontawesome/brands/bitbucket \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"setup/adding-a-git-repository/#edit-button","text":"0.1.0 \u00b7 Default: automatically set If the repository URL points to a GitHub , GitLab or Bitbucket repository, an edit button is displayed at the top of each document. This behavior can be changed by setting edit_uri in mkdocs.yml : Customize edit path Hide edit button edit_uri : edit/master/docs/ edit_uri : \"\"","title":"Edit button"},{"location":"setup/adding-a-git-repository/#revision-date","text":"4.6.0 \u00b7 Plugin The git-revision-date plugin adds support for displaying the date a document was last updated at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-plugin Then, add the following lines to mkdocs.yml : plugins : - git-revision-date The following configuration options are supported: enabled_if_env Default: none \u2013 When specified, the plugin will only be invoked if the environment variable exists. This makes it easy to disable extraction for cases when the repository is not available: plugins : - git-revision-date : enabled_if_env : CI The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Revision date"},{"location":"setup/adding-a-git-repository/#revision-date-localized","text":"4.6.0 \u00b7 Plugin Similarly, the git-revision-date-localized plugin adds support for adding a localized update and creation date at the bottom of each page. It can be installed with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following to mkdocs.yml : plugins : - git-revision-date-localized The following configuration options are supported: type Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : plugins : - git-revision-date-localized : type : date fallback_to_build_date Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: plugins : - git-revision-date-localized : fallback_to_build_date : true enable_creation_date 7.1.4 \u00b7 Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: plugins : - git-revision-date-localized : enable_creation_date : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Revision date, localized"},{"location":"setup/changing-the-colors/","text":"Changing the colors \u00b6 As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables . Configuration \u00b6 Color palette \u00b6 Color scheme \u00b6 5.2.0 \u00b7 Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme: default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span.l\") name.textContent = attr }) }) Primary color \u00b6 0.2.0 \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span.l\") name.textContent = attr.replace(\"-\", \" \") }) }) Accent color \u00b6 0.2.0 \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span.l\") name.textContent = attr.replace(\"-\", \" \") }) }) Color palette toggle \u00b6 7.1.0 \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : # (1)! - scheme : default toggle : icon : material/toggle-switch-off-outline # (2)! name : Switch to dark mode - scheme : slate # (3)! toggle : icon : material/toggle-switch name : Switch to light mode Note that the theme.palette setting is now defined as a list. Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. The following properties must be set for each toggle: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb + \u2013 material/brightness-4 + material/brightness-7 name Default: none \u00b7 Required \u2013 This property is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. It will appear on mouse hover. System preference \u00b6 7.1.0 \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media property next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" # (1)! scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" # (2)! scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode This media query is checked first . It's also the fallback when no media query matches. This media query is checked second . If it doesn't match, the first one is automatically used. When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. Customization \u00b6 Custom colors \u00b6 Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: docs/stylesheets/extra.css mkdocs.yml : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } extra_css : - stylesheets/extra.css See the file containing the color definitions for a list of all CSS variables. Custom color schemes \u00b6 Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a [data-md-color-scheme=\"...\"] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: docs/stylesheets/extra.css mkdocs.yml [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } theme : palette : scheme : youtube extra_css : - stylesheets/extra.css Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* (1)! */ } The hue value must be in the range of [0, 360]","title":"Changing the colors"},{"location":"setup/changing-the-colors/#changing-the-colors","text":"As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables .","title":"Changing the colors"},{"location":"setup/changing-the-colors/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-colors/#color-palette","text":"","title":"Color palette"},{"location":"setup/changing-the-colors/#color-scheme","text":"5.2.0 \u00b7 Default: default Material for MkDocs supports two color schemes: a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme: default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span.l\") name.textContent = attr }) })","title":"Color scheme"},{"location":"setup/changing-the-colors/#primary-color","text":"0.2.0 \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span.l\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Primary color"},{"location":"setup/changing-the-colors/#accent-color","text":"0.2.0 \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span.l\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Accent color"},{"location":"setup/changing-the-colors/#color-palette-toggle","text":"7.1.0 \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : # (1)! - scheme : default toggle : icon : material/toggle-switch-off-outline # (2)! name : Switch to dark mode - scheme : slate # (3)! toggle : icon : material/toggle-switch name : Switch to light mode Note that the theme.palette setting is now defined as a list. Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. The following properties must be set for each toggle: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb + \u2013 material/brightness-4 + material/brightness-7 name Default: none \u00b7 Required \u2013 This property is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. It will appear on mouse hover.","title":"Color palette toggle"},{"location":"setup/changing-the-colors/#system-preference","text":"7.1.0 \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media property next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" # (1)! scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" # (2)! scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode This media query is checked first . It's also the fallback when no media query matches. This media query is checked second . If it doesn't match, the first one is automatically used. When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.","title":"System preference"},{"location":"setup/changing-the-colors/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-colors/#custom-colors","text":"Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: docs/stylesheets/extra.css mkdocs.yml : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } extra_css : - stylesheets/extra.css See the file containing the color definitions for a list of all CSS variables.","title":"Custom colors"},{"location":"setup/changing-the-colors/#custom-color-schemes","text":"Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a [data-md-color-scheme=\"...\"] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: docs/stylesheets/extra.css mkdocs.yml [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } theme : palette : scheme : youtube extra_css : - stylesheets/extra.css Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* (1)! */ } The hue value must be in the range of [0, 360]","title":"Custom color schemes"},{"location":"setup/changing-the-fonts/","text":"Changing the fonts \u00b6 Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts . Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used. Configuration \u00b6 Regular font \u00b6 0.1.2 \u00b7 Default: Roboto The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via mkdocs.yml : theme : font : text : Roboto The typeface will be loaded in 300, 400, 400i and 700 . Monospaced font \u00b6 0.1.2 \u00b7 Default: Roboto Mono The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via mkdocs.yml : theme : font : code : Roboto Mono The typeface will be loaded in 400. Autoloading \u00b6 1.0.0 \u00b7 Default: none If you want to prevent typefaces from being loaded from Google Fonts , e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to mkdocs.yml : theme : font : false Customization \u00b6 Additional fonts \u00b6 If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding @font-face definition: docs/stylesheets/extra.css mkdocs.yml @ font-face { font-family : \"<font>\" ; src : \"...\" ; } extra_css : - stylesheets/extra.css The font can then be applied to specific elements, e.g. only headlines, or globally to be used as the site-wide regular or monospaced font: Regular font Monospaced font : root { --md-text-font : \"<font>\" ; /* (1)! */ } Always define fonts through CSS variables and not font-family , as this would disable the system font fallback. : root { --md-code-font : \"<font>\" ; }","title":"Changing the fonts"},{"location":"setup/changing-the-fonts/#changing-the-fonts","text":"Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts . Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used.","title":"Changing the fonts"},{"location":"setup/changing-the-fonts/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-fonts/#regular-font","text":"0.1.2 \u00b7 Default: Roboto The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via mkdocs.yml : theme : font : text : Roboto The typeface will be loaded in 300, 400, 400i and 700 .","title":"Regular font"},{"location":"setup/changing-the-fonts/#monospaced-font","text":"0.1.2 \u00b7 Default: Roboto Mono The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via mkdocs.yml : theme : font : code : Roboto Mono The typeface will be loaded in 400.","title":"Monospaced font"},{"location":"setup/changing-the-fonts/#autoloading","text":"1.0.0 \u00b7 Default: none If you want to prevent typefaces from being loaded from Google Fonts , e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to mkdocs.yml : theme : font : false","title":"Autoloading"},{"location":"setup/changing-the-fonts/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-fonts/#additional-fonts","text":"If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding @font-face definition: docs/stylesheets/extra.css mkdocs.yml @ font-face { font-family : \"<font>\" ; src : \"...\" ; } extra_css : - stylesheets/extra.css The font can then be applied to specific elements, e.g. only headlines, or globally to be used as the site-wide regular or monospaced font: Regular font Monospaced font : root { --md-text-font : \"<font>\" ; /* (1)! */ } Always define fonts through CSS variables and not font-family , as this would disable the system font fallback. : root { --md-code-font : \"<font>\" ; }","title":"Additional fonts"},{"location":"setup/changing-the-language/","text":"Changing the language \u00b6 Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 50+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available. Configuration \u00b6 Site language \u00b6 1.12.0 \u00b7 Default: en You can set the site language in mkdocs.yml with: theme : language : en The following languages are supported: af \u2013 Afrikaans ar \u2013 Arabic bg \u2013 Bulgarian bn \u2013 Bengali (Bangla) ca \u2013 Catalan cs \u2013 Czech da \u2013 Danish de \u2013 German el \u2013 Greek en \u2013 English eo \u2013 Esperanto es \u2013 Spanish et \u2013 Estonian fa \u2013 Persian (Farsi) fi \u2013 Finnish fr \u2013 French gl \u2013 Galician he \u2013 Hebrew hi \u2013 Hindi hr \u2013 Croatian hu \u2013 Hungarian id \u2013 Indonesian is \u2013 Icelandic it \u2013 Italian ja \u2013 Japanese ka \u2013 Georgian kr \u2013 Korean lv \u2013 Latvian mn \u2013 Mongolian ms \u2013 Bahasa Malaysia my \u2013 Burmese nl \u2013 Dutch nn \u2013 Norwegian (Nynorsk) no \u2013 Norwegian pl \u2013 Polish pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian sh \u2013 Serbo-Croatian si \u2013 Sinhalese sk \u2013 Slovak sl \u2013 Slovenian sr \u2013 Serbian sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish uk \u2013 Ukrainian vi \u2013 Vietnamese zh \u2013 Chinese (Simplified) zh-Hant \u2013 Chinese (Traditional) zh-TW \u2013 Chinese (Taiwanese) Add language Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function . Site language selector \u00b6 7.0.0 \u00b7 Default: none \u00b7 Experimental If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via mkdocs.yml . extra : alternate : - name : English link : /en/ # (1)! lang : en - name : Deutsch link : /de/ lang : de Note that this must be an absolute link. If it includes a domain part, it's used as defined. Otherwise the domain part of the site_url as set in mkdocs.yml is prepended to the link. The following properties must be set for each alternate language: name Default: none \u00b7 Required \u2013 This value of this property is used inside the language selector as the name of the language and must be set to a non-empty string. link Default: none \u00b7 Required \u2013 This property must be set to an absolute link, which might also point to another domain or subdomain not necessarily generated with MkDocs. lang Default: none \u00b7 Required \u2013 This property must contain an ISO 639-1 language code and is used for the hreflang attribute of the link, improving discoverability via search engines. Directionality \u00b6 2.5.0 \u00b7 Default: automatically set While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is deduced from the selected language, but can also be set with: theme : direction : ltr Click on a tile to change the directionality: ltr rtl var buttons = document.querySelectorAll(\"button[data-md-dir]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-dir\") document.body.dir = attr var name = document.querySelector(\"#__code_3 code span.l\") name.textContent = attr }) }) Customization \u00b6 Custom translations \u00b6 If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the overrides folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override: overrides/partials/languages/custom.html mkdocs.yml <!-- Import translations for language and fallback --> {% import \"partials/languages/de.html\" as language %} {% import \"partials/languages/en.html\" as fallback %} <!-- (1)! --> <!-- Define custom translations --> {% macro override(key) %}{{ { \"source.file.date.created\": \"Erstellt am\", <!-- (2)! --> \"source.file.date.updated\": \"Aktualisiert am\" }[key] }}{% endmacro %} <!-- Re-export translations --> {% macro t(key) %}{{ override(key) or language(key) or fallback.t(key) }}{% endmacro %} Note that en must always be used as a fallback language, as it's the default theme language. Check the list of available languages , pick the translation you want to override for your language and add them here. theme : language : custom","title":"Changing the language"},{"location":"setup/changing-the-language/#changing-the-language","text":"Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 50+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available.","title":"Changing the language"},{"location":"setup/changing-the-language/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-language/#site-language","text":"1.12.0 \u00b7 Default: en You can set the site language in mkdocs.yml with: theme : language : en The following languages are supported: af \u2013 Afrikaans ar \u2013 Arabic bg \u2013 Bulgarian bn \u2013 Bengali (Bangla) ca \u2013 Catalan cs \u2013 Czech da \u2013 Danish de \u2013 German el \u2013 Greek en \u2013 English eo \u2013 Esperanto es \u2013 Spanish et \u2013 Estonian fa \u2013 Persian (Farsi) fi \u2013 Finnish fr \u2013 French gl \u2013 Galician he \u2013 Hebrew hi \u2013 Hindi hr \u2013 Croatian hu \u2013 Hungarian id \u2013 Indonesian is \u2013 Icelandic it \u2013 Italian ja \u2013 Japanese ka \u2013 Georgian kr \u2013 Korean lv \u2013 Latvian mn \u2013 Mongolian ms \u2013 Bahasa Malaysia my \u2013 Burmese nl \u2013 Dutch nn \u2013 Norwegian (Nynorsk) no \u2013 Norwegian pl \u2013 Polish pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian sh \u2013 Serbo-Croatian si \u2013 Sinhalese sk \u2013 Slovak sl \u2013 Slovenian sr \u2013 Serbian sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish uk \u2013 Ukrainian vi \u2013 Vietnamese zh \u2013 Chinese (Simplified) zh-Hant \u2013 Chinese (Traditional) zh-TW \u2013 Chinese (Taiwanese) Add language Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function .","title":"Site language"},{"location":"setup/changing-the-language/#site-language-selector","text":"7.0.0 \u00b7 Default: none \u00b7 Experimental If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via mkdocs.yml . extra : alternate : - name : English link : /en/ # (1)! lang : en - name : Deutsch link : /de/ lang : de Note that this must be an absolute link. If it includes a domain part, it's used as defined. Otherwise the domain part of the site_url as set in mkdocs.yml is prepended to the link. The following properties must be set for each alternate language: name Default: none \u00b7 Required \u2013 This value of this property is used inside the language selector as the name of the language and must be set to a non-empty string. link Default: none \u00b7 Required \u2013 This property must be set to an absolute link, which might also point to another domain or subdomain not necessarily generated with MkDocs. lang Default: none \u00b7 Required \u2013 This property must contain an ISO 639-1 language code and is used for the hreflang attribute of the link, improving discoverability via search engines.","title":"Site language selector"},{"location":"setup/changing-the-language/#directionality","text":"2.5.0 \u00b7 Default: automatically set While many languages are read ltr (left-to-right), Material for MkDocs also supports rtl (right-to-left) directionality which is deduced from the selected language, but can also be set with: theme : direction : ltr Click on a tile to change the directionality: ltr rtl var buttons = document.querySelectorAll(\"button[data-md-dir]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-dir\") document.body.dir = attr var name = document.querySelector(\"#__code_3 code span.l\") name.textContent = attr }) })","title":"Directionality"},{"location":"setup/changing-the-language/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-language/#custom-translations","text":"If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the overrides folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override: overrides/partials/languages/custom.html mkdocs.yml <!-- Import translations for language and fallback --> {% import \"partials/languages/de.html\" as language %} {% import \"partials/languages/en.html\" as fallback %} <!-- (1)! --> <!-- Define custom translations --> {% macro override(key) %}{{ { \"source.file.date.created\": \"Erstellt am\", <!-- (2)! --> \"source.file.date.updated\": \"Aktualisiert am\" }[key] }}{% endmacro %} <!-- Re-export translations --> {% macro t(key) %}{{ override(key) or language(key) or fallback.t(key) }}{% endmacro %} Note that en must always be used as a fallback language, as it's the default theme language. Check the list of available languages , pick the translation you want to override for your language and add them here. theme : language : custom","title":"Custom translations"},{"location":"setup/changing-the-logo-and-icons/","text":"Changing the logo and icons \u00b6 When installing Material for MkDocs, you immediately get access to over 8.000 icons ready to be used for customization of specific parts of the theme and/or when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort. Configuration \u00b6 Logo \u00b6 0.1.0 \u00b7 Default: material/library The logo can be changed to a user-provided image (any type, incl. *.png and *.svg ) located in the docs folder, or to any icon bundled with the theme. Add the following lines to mkdocs.yml : Image Icon, bundled theme : logo : assets/logo.png theme : icon : logo : material/library # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as site_url . This behavior can be changed with the following configuration: extra : homepage : https://example.com Favicon \u00b6 0.1.0 \u00b7 Default: assets/images/favicon.png The favicon can be changed to a path pointing to a user-provided image, which must be located in the docs folder. Add the following lines to mkdocs.yml : theme : favicon : images/favicon.png Customization \u00b6 Additional icons \u00b6 In order to use custom icons, extend the theme and create a new folder named .icons in the custom_dir you want to use for overrides. Next, add your *.svg icons into a subfolder of the .icons folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 .icons/ \u2502 \u2514\u2500 bootstrap/ \u2502 \u2514\u2500 *.svg \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons You can now use all Bootstrap icons.","title":"Changing the logo and icons"},{"location":"setup/changing-the-logo-and-icons/#changing-the-logo-and-icons","text":"When installing Material for MkDocs, you immediately get access to over 8.000 icons ready to be used for customization of specific parts of the theme and/or when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort.","title":"Changing the logo and icons"},{"location":"setup/changing-the-logo-and-icons/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-logo-and-icons/#logo","text":"0.1.0 \u00b7 Default: material/library The logo can be changed to a user-provided image (any type, incl. *.png and *.svg ) located in the docs folder, or to any icon bundled with the theme. Add the following lines to mkdocs.yml : Image Icon, bundled theme : logo : assets/logo.png theme : icon : logo : material/library # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as site_url . This behavior can be changed with the following configuration: extra : homepage : https://example.com","title":"Logo"},{"location":"setup/changing-the-logo-and-icons/#favicon","text":"0.1.0 \u00b7 Default: assets/images/favicon.png The favicon can be changed to a path pointing to a user-provided image, which must be located in the docs folder. Add the following lines to mkdocs.yml : theme : favicon : images/favicon.png","title":"Favicon"},{"location":"setup/changing-the-logo-and-icons/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-logo-and-icons/#additional-icons","text":"In order to use custom icons, extend the theme and create a new folder named .icons in the custom_dir you want to use for overrides. Next, add your *.svg icons into a subfolder of the .icons folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 .icons/ \u2502 \u2514\u2500 bootstrap/ \u2502 \u2514\u2500 *.svg \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons You can now use all Bootstrap icons.","title":"Additional icons"},{"location":"setup/setting-up-navigation/","text":"Setting up navigation \u00b6 A clear and concise navigation structure is an important aspect of good project documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections , and its flag-ship feature: instant loading . Configuration \u00b6 Instant loading \u00b6 5.0.0 \u00b7 Feature flag When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to mkdocs.yml : theme : features : - navigation.instant The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application . Now, the search index survives navigation, which is especially useful for large documentation sites. Anchor tracking \u00b6 8.0.0 \u00b7 Feature flag \u00b7 Experimental When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to mkdocs.yml : theme : features : - navigation.tracking Navigation tabs \u00b6 1.1.0 \u00b7 Feature flag When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above 1220px , but remain as-is on mobile. 1 Add the following lines to mkdocs.yml : theme : features : - navigation.tabs Enabled Disabled Sticky navigation tabs \u00b6 7.3.0 \u00b7 Feature flag \u00b7 Experimental When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to mkdocs.yml : theme : features : - navigation.tabs - navigation.tabs.sticky Enabled Disabled Navigation sections \u00b6 6.2.0 \u00b7 Feature flag When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above 1220px , but remain as-is on mobile. Add the following lines to mkdocs.yml : theme : features : - navigation.sections Enabled Disabled Both feature flags, navigation.tabs and navigation.sections , can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items. Navigation expansion \u00b6 6.2.0 \u00b7 Feature flag When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to mkdocs.yml : theme : features : - navigation.expand Enabled Disabled Section index pages \u00b6 7.3.0 \u00b7 Feature flag \u00b7 Experimental When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to mkdocs.yml : theme : features : - navigation.indexes Enabled Disabled In order to link a page to a section, create a new document with the name index.md in the respective folder, and add it to the beginning of your navigation section: nav : - Section : - section/index.md - Page 1 : section/page-1.md ... - Page n : section/page-n.md This feature flag is not compatible with toc.integrate . Integrated table of contents \u00b6 6.2.0 \u00b7 Feature flag When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to mkdocs.yml : theme : features : - toc.integrate Enabled Disabled This feature flag is not compatible with navigation.indexes . Back-to-top button \u00b6 7.1.0 \u00b7 Feature flag A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to mkdocs.yml : theme : features : - navigation.top Usage \u00b6 Hiding the sidebars \u00b6 When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - navigation - toc --- # Document title ... Hide navigation Hide table of contents Hide both Customization \u00b6 Keyboard shortcuts \u00b6 Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There're two modes: search This mode is active when the search is focused . It provides several key bindings to make search accessible and navigable via keyboard: Down , Up : select next / previous result Esc , Tab : close search dialog Enter : follow selected result global This mode is active when search is not focussed and when there's no other focussed element that is susceptible to keyboard input. The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page Let's say you want to bind some action to the X key. By using additional JavaScript , you can subscribe to the keyboard$ observable and attach your custom event listener: docs/javascripts/shortcuts.js mkdocs.yml keyboard$ . subscribe ( function ( key ) { if ( key . mode === \"global\" && key . type === \"x\" ) { /* Add custom keyboard handler here */ key . claim () // (1)! } }) The call to key.claim() will execute preventDefault() on the underlying event, so the keypress will not propagate further and touch other event listeners. extra_javascript : - javascripts/shortcuts.js Content area width \u00b6 The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space. This can easily be achieved with an additional style sheet and a few lines of CSS: docs/stylesheets/extra.css mkdocs.yml . md-grid { max-width : 1440 px ; /* (1)! */ } If you want the content area to always stretch to the available screen space, reset max-width with the following CSS: . md-grid { max-width : initial ; } extra_css : - stylesheets/extra.css Prior to 6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly refefring to a *.md file) defined inside the nav entry of mkdocs.yml were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072 . From 6.2.0 on, navigation tabs include all top-level pages and sections. \u21a9","title":"Setting up navigation"},{"location":"setup/setting-up-navigation/#setting-up-navigation","text":"A clear and concise navigation structure is an important aspect of good project documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections , and its flag-ship feature: instant loading .","title":"Setting up navigation"},{"location":"setup/setting-up-navigation/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-navigation/#instant-loading","text":"5.0.0 \u00b7 Feature flag When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to mkdocs.yml : theme : features : - navigation.instant The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application . Now, the search index survives navigation, which is especially useful for large documentation sites.","title":"Instant loading"},{"location":"setup/setting-up-navigation/#anchor-tracking","text":"8.0.0 \u00b7 Feature flag \u00b7 Experimental When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to mkdocs.yml : theme : features : - navigation.tracking","title":"Anchor tracking"},{"location":"setup/setting-up-navigation/#navigation-tabs","text":"1.1.0 \u00b7 Feature flag When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above 1220px , but remain as-is on mobile. 1 Add the following lines to mkdocs.yml : theme : features : - navigation.tabs Enabled Disabled","title":"Navigation tabs"},{"location":"setup/setting-up-navigation/#sticky-navigation-tabs","text":"7.3.0 \u00b7 Feature flag \u00b7 Experimental When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to mkdocs.yml : theme : features : - navigation.tabs - navigation.tabs.sticky Enabled Disabled","title":"Sticky navigation tabs"},{"location":"setup/setting-up-navigation/#navigation-sections","text":"6.2.0 \u00b7 Feature flag When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above 1220px , but remain as-is on mobile. Add the following lines to mkdocs.yml : theme : features : - navigation.sections Enabled Disabled Both feature flags, navigation.tabs and navigation.sections , can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items.","title":"Navigation sections"},{"location":"setup/setting-up-navigation/#navigation-expansion","text":"6.2.0 \u00b7 Feature flag When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to mkdocs.yml : theme : features : - navigation.expand Enabled Disabled","title":"Navigation expansion"},{"location":"setup/setting-up-navigation/#section-index-pages","text":"7.3.0 \u00b7 Feature flag \u00b7 Experimental When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to mkdocs.yml : theme : features : - navigation.indexes Enabled Disabled In order to link a page to a section, create a new document with the name index.md in the respective folder, and add it to the beginning of your navigation section: nav : - Section : - section/index.md - Page 1 : section/page-1.md ... - Page n : section/page-n.md This feature flag is not compatible with toc.integrate .","title":"Section index pages"},{"location":"setup/setting-up-navigation/#integrated-table-of-contents","text":"6.2.0 \u00b7 Feature flag When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to mkdocs.yml : theme : features : - toc.integrate Enabled Disabled This feature flag is not compatible with navigation.indexes .","title":"Integrated table of contents"},{"location":"setup/setting-up-navigation/#back-to-top-button","text":"7.1.0 \u00b7 Feature flag A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to mkdocs.yml : theme : features : - navigation.top","title":"Back-to-top button"},{"location":"setup/setting-up-navigation/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-navigation/#hiding-the-sidebars","text":"When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - navigation - toc --- # Document title ... Hide navigation Hide table of contents Hide both","title":"Hiding the sidebars"},{"location":"setup/setting-up-navigation/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-navigation/#keyboard-shortcuts","text":"Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There're two modes: search This mode is active when the search is focused . It provides several key bindings to make search accessible and navigable via keyboard: Down , Up : select next / previous result Esc , Tab : close search dialog Enter : follow selected result global This mode is active when search is not focussed and when there's no other focussed element that is susceptible to keyboard input. The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page Let's say you want to bind some action to the X key. By using additional JavaScript , you can subscribe to the keyboard$ observable and attach your custom event listener: docs/javascripts/shortcuts.js mkdocs.yml keyboard$ . subscribe ( function ( key ) { if ( key . mode === \"global\" && key . type === \"x\" ) { /* Add custom keyboard handler here */ key . claim () // (1)! } }) The call to key.claim() will execute preventDefault() on the underlying event, so the keypress will not propagate further and touch other event listeners. extra_javascript : - javascripts/shortcuts.js","title":"Keyboard shortcuts"},{"location":"setup/setting-up-navigation/#content-area-width","text":"The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space. This can easily be achieved with an additional style sheet and a few lines of CSS: docs/stylesheets/extra.css mkdocs.yml . md-grid { max-width : 1440 px ; /* (1)! */ } If you want the content area to always stretch to the available screen space, reset max-width with the following CSS: . md-grid { max-width : initial ; } extra_css : - stylesheets/extra.css Prior to 6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly refefring to a *.md file) defined inside the nav entry of mkdocs.yml were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072 . From 6.2.0 on, navigation tabs include all top-level pages and sections. \u21a9","title":"Content area width"},{"location":"setup/setting-up-site-analytics/","text":"Setting up site analytics \u00b6 As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget . Configuration \u00b6 Google Analytics \u00b6 7.1.8 \u00b7 Default: none Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. Depending on the given property prefix, add the following lines to mkdocs.yml : Google Analytics 4 Universal Analytics extra : analytics : provider : google property : G-XXXXXXXXXX extra : analytics : provider : google property : UA-XXXXXXXX-X How to measure site search usage? Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required: Google Analytics 4 Universal Analytics Go to your Google Analytics admin settings Select the property for the respective tracking code Select the data streams tab and click the corresponding URL Click the gear icon within the enhanced measurement section Ensure that site search is enabled Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab Scroll down and enable site search settings Set the query parameter to q Was this page helpful? \u00b6 Insiders \u00b7 insiders-3.2.0 \u00b7 Default: none A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to mkdocs.yml : extra : analytics : # (1)! feedback : title : Was this page helpful? ratings : - icon : material/emoticon-happy-outline name : This page was helpful data : 1 note : >- Thanks for your feedback! - icon : material/emoticon-sad-outline name : This page could be improved data : 0 note : >- # (2)! Thanks for your feedback! Help us improve this page by using our <a href=\"...\" target=_blank>feedback form</a>. This feature is natively integrated with Google Analytics , which is why provider and property are also required. However, it's also possible to provide a custom feedback integration . You can add arbitrary HTML tags to the note which is shown after the user submitted the feedback, e.g. to link to a feedback form. Both properties, title and ratings , are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively integrated with the cookie consent feature 1 . How to visualize the collected feedback ratings? To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation. Google Analytics 4 Universal Analytics Go to your Google Analytics dashboard Go to the Configure page on the left hand menu, then select Custom Definitions Click the Custom metrics tab and then Create custom metrics , enter the following values: Metric name: Page helpful Description: Was this page helpful? Event parameter: data Unit of measurement: Standard Go to the Explore page on the left hand menu, create a new blank exploration Configure the report as follows: Dimensions: Add Event name and Page location Metrics: Add Event count and Page helpful (the custom metric created in step 3) Rows: Page location Values: Page helpful Filters: Add a new filter for Event name / exactly matches / feedback Delay in data availability The report may take 24 hours or longer to begin displaying data Go to your Google Analytics dashboard Open the customization panel on the left and go to custom reports Create a new custom report and set a custom title and name Add Avg. Value and Total Events to metric group Add Event Label to dimension drilldown Add Event Category to filters and filter for the value feedback Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved: The following properties must be set for each rating: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/emoticon-happy-outline + material/emoticon-sad-outline + \u2013 material/thumb-up-outline + material/thumb-down-outline + \u2013 material/heart + material/heart-broken name Default: none \u00b7 Required \u2013 The value of this property is shown on user interaction (i.e. keyboard focus or mouse hover), explaining the meaning of the rating behind the icon. data Default: none \u00b7 Required \u2013 The value of this property is sent as a data value with the custom event that is transmitted to Google Analytics 2 (or any custom integration). note Default: none \u00b7 Required \u2013 The value of this property is shown after the user selected the rating. It may contain arbitrary HTML tags, which is especially useful to ask the user to provide more detailed feedback for the current page through a form. It's also possible to pre-fill forms with the URL and title of the current page by using the following placeholders: {url} \u2013 Page URL {title} \u2013 Page title https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url} In this example, when clicking the link, the user is redirected to the \"new issue\" form of your repository, with a pre-filled title including the path of the current document, e.g.: [Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/ An alternative to GitHub issues is Google Forms . Cookie consent \u00b6 Insiders \u00b7 insiders-2.10.0 \u00b7 Default: none Material for MkDocs ships a native and extensible cookie consent form which asks the user for his consent prior to sending any data via analytics. Add the following to mkdocs.yml : extra : consent : title : Cookie consent description : >- # (1)! We use cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better. You can add arbitrary HTML tags in the description , e.g. to link to your terms of service or other parts of the site. Note that both, title and description , are required. If Google Analytics was configured via mkdocs.yml , the cookie consent will automatically include a setting for the user to disable it. Furthermore, custom cookies can be integrated by using the cookies field: Custom cookie name Custom initial state Custom cookie extra : consent : cookies : analytics : Custom name # (1)! The default name of the analytics cookie is Google Analytics . extra : consent : cookies : analytics : name : Google Analytics checked : false extra : consent : cookies : analytics : Google Analytics # (1)! custom : Custom cookie If you add a custom cookie to the cookies field, the analytics cookie must be added back explicitly, or analytics won't be triggered. When a user first visits your site, a cookie consent form is rendered: In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by creating a simple link as part of any document, e.g. your privacy policy: [ Change cookie settings ]( #__consent ){ .md-button } Usage \u00b6 Hiding the feedback widget \u00b6 When Metadata is enabled, the feedback widget can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - feedback --- # Document title ... Customization \u00b6 Custom site analytics \u00b6 In order to integrate another analytics service provider offering a JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the overrides folder. The name of the partial is used to configure the custom integration via mkdocs.yml : overrides/partials/integrations/analytics/custom.html mkdocs.yml < script > /* Add custom analytics integration here, e.g. */ var property = \"{{ config.extra.analytics.property }}\" // (1)! /* Wait for page to load and application to mount */ document . addEventListener ( \"DOMContentLoaded\" , function () { location$ . subscribe ( function ( url ) { /* Add custom page event tracking here */ // (2)! }) }) </ script > As an example, this variable receives the value set in mkdocs.yml , which is \"foobar\" for property . If you're using instant loading , you can use the location$ observable to listen for navigation events, which always emits the current URL . extra : analytics : provider : custom property : foobar # (1)! You can add arbitrary key-value combinations to configure your custom integration. This is especially useful if you're sharing the custom integration across multiple repositories. Custom site feedback \u00b6 A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript : docs/javascripts/feedback.js mkdocs.yml var feedback = document . forms . feedback feedback . addEventListener ( \"submit\" , function ( ev ) { ev . preventDefault () /* Retrieve page and feedback value */ var page = document . location . pathname var data = ev . submitter . getAttribute ( \"data-md-value\" ) /* Send feedback value */ console . log ( page , data ) }) extra_javascript : - javascripts/feedback.js Custom cookies \u00b6 If you've customized the cookie consent and added a custom cookie, the user will be prompted to accept your custom cookie. Use additional JavaScript to check whether the user accepted it: docs/javascripts/consent.js mkdocs.yml var consent = __md_get ( \"__consent\" ) if ( consent && consent . custom ) { /* The user accepted the cookie */ } extra_javascript : - javascripts/consent.js If the user doesn't accept the analytics cookie, the feedback widget is not shown. \u21a9 Note that for Google Analytics, the data value must be an integer. \u21a9","title":"Setting up site analytics"},{"location":"setup/setting-up-site-analytics/#setting-up-site-analytics","text":"As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget .","title":"Setting up site analytics"},{"location":"setup/setting-up-site-analytics/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-site-analytics/#google-analytics","text":"7.1.8 \u00b7 Default: none Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. Depending on the given property prefix, add the following lines to mkdocs.yml : Google Analytics 4 Universal Analytics extra : analytics : provider : google property : G-XXXXXXXXXX extra : analytics : provider : google property : UA-XXXXXXXX-X How to measure site search usage? Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required: Google Analytics 4 Universal Analytics Go to your Google Analytics admin settings Select the property for the respective tracking code Select the data streams tab and click the corresponding URL Click the gear icon within the enhanced measurement section Ensure that site search is enabled Go to your Google Analytics admin settings Select the property for the respective tracking code Go to the view settings tab Scroll down and enable site search settings Set the query parameter to q","title":"Google Analytics"},{"location":"setup/setting-up-site-analytics/#was-this-page-helpful","text":"Insiders \u00b7 insiders-3.2.0 \u00b7 Default: none A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to mkdocs.yml : extra : analytics : # (1)! feedback : title : Was this page helpful? ratings : - icon : material/emoticon-happy-outline name : This page was helpful data : 1 note : >- Thanks for your feedback! - icon : material/emoticon-sad-outline name : This page could be improved data : 0 note : >- # (2)! Thanks for your feedback! Help us improve this page by using our <a href=\"...\" target=_blank>feedback form</a>. This feature is natively integrated with Google Analytics , which is why provider and property are also required. However, it's also possible to provide a custom feedback integration . You can add arbitrary HTML tags to the note which is shown after the user submitted the feedback, e.g. to link to a feedback form. Both properties, title and ratings , are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively integrated with the cookie consent feature 1 . How to visualize the collected feedback ratings? To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation. Google Analytics 4 Universal Analytics Go to your Google Analytics dashboard Go to the Configure page on the left hand menu, then select Custom Definitions Click the Custom metrics tab and then Create custom metrics , enter the following values: Metric name: Page helpful Description: Was this page helpful? Event parameter: data Unit of measurement: Standard Go to the Explore page on the left hand menu, create a new blank exploration Configure the report as follows: Dimensions: Add Event name and Page location Metrics: Add Event count and Page helpful (the custom metric created in step 3) Rows: Page location Values: Page helpful Filters: Add a new filter for Event name / exactly matches / feedback Delay in data availability The report may take 24 hours or longer to begin displaying data Go to your Google Analytics dashboard Open the customization panel on the left and go to custom reports Create a new custom report and set a custom title and name Add Avg. Value and Total Events to metric group Add Event Label to dimension drilldown Add Event Category to filters and filter for the value feedback Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved: The following properties must be set for each rating: icon Default: none \u00b7 Required \u2013 This property must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/emoticon-happy-outline + material/emoticon-sad-outline + \u2013 material/thumb-up-outline + material/thumb-down-outline + \u2013 material/heart + material/heart-broken name Default: none \u00b7 Required \u2013 The value of this property is shown on user interaction (i.e. keyboard focus or mouse hover), explaining the meaning of the rating behind the icon. data Default: none \u00b7 Required \u2013 The value of this property is sent as a data value with the custom event that is transmitted to Google Analytics 2 (or any custom integration). note Default: none \u00b7 Required \u2013 The value of this property is shown after the user selected the rating. It may contain arbitrary HTML tags, which is especially useful to ask the user to provide more detailed feedback for the current page through a form. It's also possible to pre-fill forms with the URL and title of the current page by using the following placeholders: {url} \u2013 Page URL {title} \u2013 Page title https://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url} In this example, when clicking the link, the user is redirected to the \"new issue\" form of your repository, with a pre-filled title including the path of the current document, e.g.: [Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/ An alternative to GitHub issues is Google Forms .","title":"Was this page helpful?"},{"location":"setup/setting-up-site-analytics/#cookie-consent","text":"Insiders \u00b7 insiders-2.10.0 \u00b7 Default: none Material for MkDocs ships a native and extensible cookie consent form which asks the user for his consent prior to sending any data via analytics. Add the following to mkdocs.yml : extra : consent : title : Cookie consent description : >- # (1)! We use cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of our documentation and whether users find what they're searching for. With your consent, you're helping us to make our documentation better. You can add arbitrary HTML tags in the description , e.g. to link to your terms of service or other parts of the site. Note that both, title and description , are required. If Google Analytics was configured via mkdocs.yml , the cookie consent will automatically include a setting for the user to disable it. Furthermore, custom cookies can be integrated by using the cookies field: Custom cookie name Custom initial state Custom cookie extra : consent : cookies : analytics : Custom name # (1)! The default name of the analytics cookie is Google Analytics . extra : consent : cookies : analytics : name : Google Analytics checked : false extra : consent : cookies : analytics : Google Analytics # (1)! custom : Custom cookie If you add a custom cookie to the cookies field, the analytics cookie must be added back explicitly, or analytics won't be triggered. When a user first visits your site, a cookie consent form is rendered: In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by creating a simple link as part of any document, e.g. your privacy policy: [ Change cookie settings ]( #__consent ){ .md-button }","title":"Cookie consent"},{"location":"setup/setting-up-site-analytics/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-site-analytics/#hiding-the-feedback-widget","text":"When Metadata is enabled, the feedback widget can be hidden for a document with custom front matter. Add the following lines at the top of a Markdown file: --- hide: - feedback --- # Document title ...","title":"Hiding the feedback widget"},{"location":"setup/setting-up-site-analytics/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-site-analytics/#custom-site-analytics","text":"In order to integrate another analytics service provider offering a JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the overrides folder. The name of the partial is used to configure the custom integration via mkdocs.yml : overrides/partials/integrations/analytics/custom.html mkdocs.yml < script > /* Add custom analytics integration here, e.g. */ var property = \"{{ config.extra.analytics.property }}\" // (1)! /* Wait for page to load and application to mount */ document . addEventListener ( \"DOMContentLoaded\" , function () { location$ . subscribe ( function ( url ) { /* Add custom page event tracking here */ // (2)! }) }) </ script > As an example, this variable receives the value set in mkdocs.yml , which is \"foobar\" for property . If you're using instant loading , you can use the location$ observable to listen for navigation events, which always emits the current URL . extra : analytics : provider : custom property : foobar # (1)! You can add arbitrary key-value combinations to configure your custom integration. This is especially useful if you're sharing the custom integration across multiple repositories.","title":"Custom site analytics"},{"location":"setup/setting-up-site-analytics/#custom-site-feedback","text":"A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript : docs/javascripts/feedback.js mkdocs.yml var feedback = document . forms . feedback feedback . addEventListener ( \"submit\" , function ( ev ) { ev . preventDefault () /* Retrieve page and feedback value */ var page = document . location . pathname var data = ev . submitter . getAttribute ( \"data-md-value\" ) /* Send feedback value */ console . log ( page , data ) }) extra_javascript : - javascripts/feedback.js","title":"Custom site feedback"},{"location":"setup/setting-up-site-analytics/#custom-cookies","text":"If you've customized the cookie consent and added a custom cookie, the user will be prompted to accept your custom cookie. Use additional JavaScript to check whether the user accepted it: docs/javascripts/consent.js mkdocs.yml var consent = __md_get ( \"__consent\" ) if ( consent && consent . custom ) { /* The user accepted the cookie */ } extra_javascript : - javascripts/consent.js If the user doesn't accept the analytics cookie, the feedback widget is not shown. \u21a9 Note that for Google Analytics, the data value must be an integer. \u21a9","title":"Custom cookies"},{"location":"setup/setting-up-site-search/","text":"Setting up site search \u00b6 Material for MkDocs provides an excellent, client-side search implementation, omitting the need for the integration of third-party services, which might be tricky to integrate to be compliant with data privacy regulations. Moreover, with some effort, search can be made available offline . Configuration \u00b6 Built-in search \u00b6 0.1.0 \u00b7 Plugin The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages . It's enabled by default, but must be re-added to mkdocs.yml when other plugins are used: plugins : - search The following configuration options are supported: lang Default: automatically set \u2013 This option allows to include the language-specific stemmers provided by lunr-languages . Note that Material for MkDocs will set this automatically based on the site language , but it may be overridden, e.g. to support multiple languages: A single language Multiple languages plugins : - search : lang : ru plugins : - search : lang : # (1)! - en - ru Be aware that including support for other languages increases the general JavaScript payload by around 20kb (before gzip ) and by another 15-30kb per language. The following languages are supported: ar \u2013 Arabic da \u2013 Danish du \u2013 Dutch en \u2013 English fi \u2013 Finnish fr \u2013 French de \u2013 German hu \u2013 Hungarian it \u2013 Italian ja \u2013 Japanese no \u2013 Norwegian pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian es \u2013 Spanish sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish vi \u2013 Vietnamese Material for MkDocs goes to great lengths to support languages that are not part of this list by automatically falling back to the stemmer yielding the best result. separator Default: automatically set \u2013 The separator for indexing and query tokenization can be customized, making it possible to index parts of words separated by other characters than whitespace and - , e.g. by including . : plugins : - search : separator : '[\\s\\-\\.]' # (1)! Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. For more finegrained control over the tokenization process, see the section on tokenizer lookahead . prebuild_index 5.0.0 \u00b7 Deprecated \u00b7 8.0.0 \u00b7 Default: false \u2013 MkDocs can generate a prebuilt index of all pages during build time, which provides performance improvements at the cost of more bandwidth, as it reduces the build time of the search index: plugins : - search : prebuild_index : true Note that this configuration option was removed, as the new search plugin generates up to 50% smaller search indexes, doubling search performance. Read more on the new search plugin The other configuration options of this plugin are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Rich search previews \u00b6 Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders ships rich search previews as part of the new search plugin , which will render code blocks directly in the search result, and highlight all occurrences inside those blocks: Insiders Material for MkDocs Tokenizer lookahead \u00b6 Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders allows for more complex configurations of the separator setting as part of the new search plugin , yielding more influence on the way documents are tokenized: plugins : - search : separator : '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;' The following section explains what can be achieved with tokenizer lookahead: Case changes Version numbers HTML/XML tags (?!\\b)(?=[A-Z][a-z]) PascalCase and camelCase are used as naming conventions in many programming languages. By adding this match group to the separator , words are split at case changes , tokenizing the word PascalCase into Pascal and Case , so both terms can be searched individually. Read more on tokenizing case changes \\.(?!\\d) When . is added to the separator , version numbers would be split into parts, rendering them undiscoverable via search. By adding this match group, a small lookahead is introduced, so version numbers will remain as they are, and can be found through search. Read more on tokenizing version numbers &[lg]t; If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Adding this expression to the separator allows for just that. Read more on tokenizing HTML/XML tags Search suggestions \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the Right key. Add the following lines to mkdocs.yml : theme : features : - search.suggest Searching for search su yields search suggestions as a suggestion. Search highlighting \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to mkdocs.yml : theme : features : - search.highlight Searching for code blocks highlights all occurrences of both terms. Search sharing \u00b6 7.2.0 \u00b7 Feature flag \u00b7 Experimental When search sharing is activated, a share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to mkdocs.yml : theme : features : - search.share When a user clicks the share button, the URL is automatically copied to the clipboard. Offline search \u00b6 5.0.0 \u00b7 Plugin If you distribute your documentation as *.html files, the built-in search will not work out-of-the-box due to the restrictions modern browsers impose for security reasons. This can be mitigated with the localsearch plugin in combination with @squidfunk 's iframe-worker polyfill. For setup instructions, refer to the localsearch documentation . Tip When distributing documentation as HTML files to be opened from the file system, you will also want to set use_directory_urls: false in mkdocs.yml to make page links function correctly. Usage \u00b6 Search boosting \u00b6 Insiders \u00b7 insiders-2.8.0 When Metadata is enabled, pages can be boosted in search with custom front matter, which will make them rank higher. Add the following lines at the top of a Markdown file: --- search: boost: 2 # (1)! --- # Document title ... When boosting pages, be gentle and start with low values . Search exclusion \u00b6 Insiders \u00b7 insiders-3.1.0 \u00b7 Experimental When Metadata is enabled, pages can be excluded from search with custom front matter, removing them from the index. Add the following lines at the top of a Markdown file: --- search: exclude: true --- # Document title ... Excluding sections \u00b6 When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown heading: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] } Excluding blocks \u00b6 When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown inline- or block-level element: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" } ] } Customization \u00b6 The search implementation of Material for MkDocs is probably its most sophisticated feature, as it tries to balance a great typeahead experience, good performance, accessibility, and a result list that is easy to scan. This is where Material for MkDocs deviates from other themes. The following section explains how search can be customized to tailor it to your needs. Query transformation \u00b6 When a user enters a query into the search box, the query is pre-processed before it is submitted to the search index. Material for MkDocs will apply the following transformations, which can be customized by extending the theme : export function defaultTransform ( query : string ) : string { return query . split ( /\"([^\"]+)\"/g ) /* (1)! */ . map (( terms , index ) => index & 1 ? terms . replace ( /^\\b|^(?![^\\x00-\\x7F]|$)|\\s+/g , \" +\" ) : terms ) . join ( \"\" ) . replace ( /\"|(?:^|\\s+)[*+\\-:^~]+(?=\\s+|$)/g , \"\" ) /* (2)! */ . trim () /* (3)! */ } Search for terms in quotation marks and prepend a + modifier to denote that the resulting document must contain all terms, converting the query to an AND query (as opposed to the default OR behavior). While users may expect terms enclosed in quotation marks to map to span queries, i.e. for which order is important, lunr doesn't support them, so the best we can do is to convert the terms to an AND query. Replace control characters which are not located at the beginning of the query or preceded by white space, or are not followed by a non-whitespace character or are at the end of the query string. Furthermore, filter unmatched quotation marks. Trim excess whitespace from left and right. If you want to switch to the default behavior of the mkdocs and readthedocs themes, both of which don't transform the query prior to submission, or customize the transform function, you can do this by overriding the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { transform : function ( query ) { return query } } </ script > {% endblock %} The transform function will receive the query string as entered by the user and must return the processed query string to be submitted to the search index. Custom search \u00b6 Material for MkDocs implements search as part of a web worker . If you want to switch the web worker with your own implementation, e.g. to submit search to an external service, you can add a custom JavaScript file to the docs directory and override the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { worker : \"<url>\" } </ script > {% endblock %} Communication with the search worker is implemented using a designated message format using discriminated unions, i.e. through the type property of the message. See the following interface definitions to learn about the message formats: SearchMessage SearchIndex and SearchResult The sequence and direction of messages is rather intuitive: SearchSetupMessage SearchReadyMessage SearchQueryMessage SearchResultMessage","title":"Setting up site search"},{"location":"setup/setting-up-site-search/#setting-up-site-search","text":"Material for MkDocs provides an excellent, client-side search implementation, omitting the need for the integration of third-party services, which might be tricky to integrate to be compliant with data privacy regulations. Moreover, with some effort, search can be made available offline .","title":"Setting up site search"},{"location":"setup/setting-up-site-search/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-site-search/#built-in-search","text":"0.1.0 \u00b7 Plugin The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages . It's enabled by default, but must be re-added to mkdocs.yml when other plugins are used: plugins : - search The following configuration options are supported: lang Default: automatically set \u2013 This option allows to include the language-specific stemmers provided by lunr-languages . Note that Material for MkDocs will set this automatically based on the site language , but it may be overridden, e.g. to support multiple languages: A single language Multiple languages plugins : - search : lang : ru plugins : - search : lang : # (1)! - en - ru Be aware that including support for other languages increases the general JavaScript payload by around 20kb (before gzip ) and by another 15-30kb per language. The following languages are supported: ar \u2013 Arabic da \u2013 Danish du \u2013 Dutch en \u2013 English fi \u2013 Finnish fr \u2013 French de \u2013 German hu \u2013 Hungarian it \u2013 Italian ja \u2013 Japanese no \u2013 Norwegian pt \u2013 Portuguese ro \u2013 Romanian ru \u2013 Russian es \u2013 Spanish sv \u2013 Swedish th \u2013 Thai tr \u2013 Turkish vi \u2013 Vietnamese Material for MkDocs goes to great lengths to support languages that are not part of this list by automatically falling back to the stemmer yielding the best result. separator Default: automatically set \u2013 The separator for indexing and query tokenization can be customized, making it possible to index parts of words separated by other characters than whitespace and - , e.g. by including . : plugins : - search : separator : '[\\s\\-\\.]' # (1)! Tokenization itself is carried out by lunr's default tokenizer , which doesn't allow for lookahead or separators spanning multiple characters. For more finegrained control over the tokenization process, see the section on tokenizer lookahead . prebuild_index 5.0.0 \u00b7 Deprecated \u00b7 8.0.0 \u00b7 Default: false \u2013 MkDocs can generate a prebuilt index of all pages during build time, which provides performance improvements at the cost of more bandwidth, as it reduces the build time of the search index: plugins : - search : prebuild_index : true Note that this configuration option was removed, as the new search plugin generates up to 50% smaller search indexes, doubling search performance. Read more on the new search plugin The other configuration options of this plugin are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Built-in search"},{"location":"setup/setting-up-site-search/#rich-search-previews","text":"Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders ships rich search previews as part of the new search plugin , which will render code blocks directly in the search result, and highlight all occurrences inside those blocks: Insiders Material for MkDocs","title":"Rich search previews"},{"location":"setup/setting-up-site-search/#tokenizer-lookahead","text":"Insiders \u00b7 insiders-3.0.0 \u00b7 Experimental Insiders allows for more complex configurations of the separator setting as part of the new search plugin , yielding more influence on the way documents are tokenized: plugins : - search : separator : '[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;' The following section explains what can be achieved with tokenizer lookahead: Case changes Version numbers HTML/XML tags (?!\\b)(?=[A-Z][a-z]) PascalCase and camelCase are used as naming conventions in many programming languages. By adding this match group to the separator , words are split at case changes , tokenizing the word PascalCase into Pascal and Case , so both terms can be searched individually. Read more on tokenizing case changes \\.(?!\\d) When . is added to the separator , version numbers would be split into parts, rendering them undiscoverable via search. By adding this match group, a small lookahead is introduced, so version numbers will remain as they are, and can be found through search. Read more on tokenizing version numbers &[lg]t; If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the < and > control characters are encoded in code blocks as &lt; and &gt; . Adding this expression to the separator allows for just that. Read more on tokenizing HTML/XML tags","title":"Tokenizer lookahead"},{"location":"setup/setting-up-site-search/#search-suggestions","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the Right key. Add the following lines to mkdocs.yml : theme : features : - search.suggest Searching for search su yields search suggestions as a suggestion.","title":"Search suggestions"},{"location":"setup/setting-up-site-search/#search-highlighting","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to mkdocs.yml : theme : features : - search.highlight Searching for code blocks highlights all occurrences of both terms.","title":"Search highlighting"},{"location":"setup/setting-up-site-search/#search-sharing","text":"7.2.0 \u00b7 Feature flag \u00b7 Experimental When search sharing is activated, a share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to mkdocs.yml : theme : features : - search.share When a user clicks the share button, the URL is automatically copied to the clipboard.","title":"Search sharing"},{"location":"setup/setting-up-site-search/#offline-search","text":"5.0.0 \u00b7 Plugin If you distribute your documentation as *.html files, the built-in search will not work out-of-the-box due to the restrictions modern browsers impose for security reasons. This can be mitigated with the localsearch plugin in combination with @squidfunk 's iframe-worker polyfill. For setup instructions, refer to the localsearch documentation . Tip When distributing documentation as HTML files to be opened from the file system, you will also want to set use_directory_urls: false in mkdocs.yml to make page links function correctly.","title":"Offline search"},{"location":"setup/setting-up-site-search/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-site-search/#search-boosting","text":"Insiders \u00b7 insiders-2.8.0 When Metadata is enabled, pages can be boosted in search with custom front matter, which will make them rank higher. Add the following lines at the top of a Markdown file: --- search: boost: 2 # (1)! --- # Document title ... When boosting pages, be gentle and start with low values .","title":"Search boosting"},{"location":"setup/setting-up-site-search/#search-exclusion","text":"Insiders \u00b7 insiders-3.1.0 \u00b7 Experimental When Metadata is enabled, pages can be excluded from search with custom front matter, removing them from the index. Add the following lines at the top of a Markdown file: --- search: exclude: true --- # Document title ...","title":"Search exclusion"},{"location":"setup/setting-up-site-search/#excluding-sections","text":"When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown heading: docs/page.md search_index.json # Document title ## Section 1 The content of this section is included ## Section 2 { data-search-exclude } The content of this section is excluded { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"\" , \"title\" : \"Document title\" }, { \"location\" : \"page/#section-1\" , \"text\" : \"<p>The content of this section is included</p>\" , \"title\" : \"Section 1\" } ] }","title":"Excluding sections"},{"location":"setup/setting-up-site-search/#excluding-blocks","text":"When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the { data-search-exclude } pragma after a Markdown inline- or block-level element: docs/page.md search_index.json # Document title The content of this block is included The content of this block is excluded { data-search-exclude } { ... \"docs\" : [ { \"location\" : \"page/\" , \"text\" : \"<p>The content of this block is included</p>\" , \"title\" : \"Document title\" } ] }","title":"Excluding blocks"},{"location":"setup/setting-up-site-search/#customization","text":"The search implementation of Material for MkDocs is probably its most sophisticated feature, as it tries to balance a great typeahead experience, good performance, accessibility, and a result list that is easy to scan. This is where Material for MkDocs deviates from other themes. The following section explains how search can be customized to tailor it to your needs.","title":"Customization"},{"location":"setup/setting-up-site-search/#query-transformation","text":"When a user enters a query into the search box, the query is pre-processed before it is submitted to the search index. Material for MkDocs will apply the following transformations, which can be customized by extending the theme : export function defaultTransform ( query : string ) : string { return query . split ( /\"([^\"]+)\"/g ) /* (1)! */ . map (( terms , index ) => index & 1 ? terms . replace ( /^\\b|^(?![^\\x00-\\x7F]|$)|\\s+/g , \" +\" ) : terms ) . join ( \"\" ) . replace ( /\"|(?:^|\\s+)[*+\\-:^~]+(?=\\s+|$)/g , \"\" ) /* (2)! */ . trim () /* (3)! */ } Search for terms in quotation marks and prepend a + modifier to denote that the resulting document must contain all terms, converting the query to an AND query (as opposed to the default OR behavior). While users may expect terms enclosed in quotation marks to map to span queries, i.e. for which order is important, lunr doesn't support them, so the best we can do is to convert the terms to an AND query. Replace control characters which are not located at the beginning of the query or preceded by white space, or are not followed by a non-whitespace character or are at the end of the query string. Furthermore, filter unmatched quotation marks. Trim excess whitespace from left and right. If you want to switch to the default behavior of the mkdocs and readthedocs themes, both of which don't transform the query prior to submission, or customize the transform function, you can do this by overriding the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { transform : function ( query ) { return query } } </ script > {% endblock %} The transform function will receive the query string as entered by the user and must return the processed query string to be submitted to the search index.","title":"Query transformation"},{"location":"setup/setting-up-site-search/#custom-search","text":"Material for MkDocs implements search as part of a web worker . If you want to switch the web worker with your own implementation, e.g. to submit search to an external service, you can add a custom JavaScript file to the docs directory and override the config block : {% extends \"base.html\" %} {% block config %} {{ super() }} < script > var __search = { worker : \"<url>\" } </ script > {% endblock %} Communication with the search worker is implemented using a designated message format using discriminated unions, i.e. through the type property of the message. See the following interface definitions to learn about the message formats: SearchMessage SearchIndex and SearchResult The sequence and direction of messages is rather intuitive: SearchSetupMessage SearchReadyMessage SearchQueryMessage SearchResultMessage","title":"Custom search"},{"location":"setup/setting-up-social-cards/","text":"Setting up social cards \u00b6 Social cards, also known as social previews, are images that are displayed when a link to your project documentation is shared on social media. Material for MkDocs can generate beautiful social cards automatically, using the colors , fonts and logo 1 defined in mkdocs.yml , e.g.: The social preview image for the page on setting up site analytics . Twitter's Card validator shows how it will look when shared. Configuration \u00b6 Built-in social cards \u00b6 Insiders \u00b7 insiders-2.12.0 \u00b7 Plugin \u00b7 Experimental First, ensure you've installed all dependencies and have a valid site_url , as social preview images must be referenced via absolute URLs. Then, add the following lines to mkdocs.yml : plugins : - social The following configuration options are available: cards Default: true \u2013 This option specifies whether to generate social card images. If you want to switch the plugin off, e.g. for local builds, you can use an environment variable : plugins : - social : cards : !ENV [ SOCIAL_CARDS , false ] cards_color insiders-2.13.0 \u00b7 Default: theme.palette.primary \u2013 This option specifies the colors for the background fill and foreground text when generating the social card: plugins : - social : cards_color : fill : \"#0FF1CE\" # (1)! text : \"#FFFFFF\" Colors can either be defined as HEX colors, or as CSS color keywords . Note that HEX colors must be enclosed in quotes. cards_font insiders-4.3.0 \u00b7 Default: theme.font.text \u2013 This option specifies which font to use for rendering the social card, which can be any font hosted on Google Fonts : plugins : - social : cards_font : Roboto cards_directory Default: assets/images/social \u2013 This option specifies where the generated social card images will be written to. It's normally not necessary to change this option: plugins : - social : cards_directory : assets/images/social Dependencies \u00b6 Two Python packages are installed alongside Material for MkDocs to generate the social preview images, both of which are based on the Cairo Graphics library: Pillow \u2013 Python imaging library CairoSVG \u2013 Converter for *.svg files The Docker image for Insiders comes with all dependencies pre-installed. If you don't want to use Docker, see the following section which explains how to install all dependencies on your system: macOS Windows Linux Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies: brew install cairo freetype libffi libjpeg libpng zlib As stated in the installation guide , the easiest way to get up and running with the Cairo Graphics library on Windows is by installing GTK+ , since it has Cairo as a dependency. There are several package managers for Linux with varying availability per distribution. The installation guide explains how to install the Cairo Graphics library for your distribution: Ubuntu Fedora openSUSE apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev yum install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel zypper install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel Caching recommended \u00b6 The built-in social cards plugin automatically fetches the fonts you define in mkdocs.yml from Google Fonts, and uses them to render the text that is displayed on the social card. The font files and generated cards are both written to the .cache directory, which is used in subsequent builds to detect whether the social cards need to be regenerated. You might want to: Ignore the .cache directory in your project, by adding it to .gitignore . When building your site for publishing, use a build cache to save the .cache directory in between builds. Taking the example from the publishing guide , add the following lines: name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - uses : actions/cache@v2 with : key : ${{ github.ref }} path : .cache - run : pip install mkdocs-material - run : mkdocs gh-deploy --force Meta tags \u00b6 The built-in social cards plugin automatically sets all necessary meta tags, equivalent to the following two customizations, which you can set manually when you don't want to use it: Open Graph Twitter Cards {% extends \"base.html\" %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} {% extends \"base.html\" %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %} Usage \u00b6 If you want to adjust the title or set a custom description for the social card, you can use the Metadata extension, which takes precedence over the default values. Changing the title Changing the description Both types of logos, images ( theme.logo ) and icons ( theme.icon.logo ) are supported. While an image logo is used as-is, icons are filled with the color used in the header (white or black), which depends on the primary color. \u21a9","title":"Setting up social cards"},{"location":"setup/setting-up-social-cards/#setting-up-social-cards","text":"Social cards, also known as social previews, are images that are displayed when a link to your project documentation is shared on social media. Material for MkDocs can generate beautiful social cards automatically, using the colors , fonts and logo 1 defined in mkdocs.yml , e.g.: The social preview image for the page on setting up site analytics . Twitter's Card validator shows how it will look when shared.","title":"Setting up social cards"},{"location":"setup/setting-up-social-cards/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-social-cards/#built-in-social-cards","text":"Insiders \u00b7 insiders-2.12.0 \u00b7 Plugin \u00b7 Experimental First, ensure you've installed all dependencies and have a valid site_url , as social preview images must be referenced via absolute URLs. Then, add the following lines to mkdocs.yml : plugins : - social The following configuration options are available: cards Default: true \u2013 This option specifies whether to generate social card images. If you want to switch the plugin off, e.g. for local builds, you can use an environment variable : plugins : - social : cards : !ENV [ SOCIAL_CARDS , false ] cards_color insiders-2.13.0 \u00b7 Default: theme.palette.primary \u2013 This option specifies the colors for the background fill and foreground text when generating the social card: plugins : - social : cards_color : fill : \"#0FF1CE\" # (1)! text : \"#FFFFFF\" Colors can either be defined as HEX colors, or as CSS color keywords . Note that HEX colors must be enclosed in quotes. cards_font insiders-4.3.0 \u00b7 Default: theme.font.text \u2013 This option specifies which font to use for rendering the social card, which can be any font hosted on Google Fonts : plugins : - social : cards_font : Roboto cards_directory Default: assets/images/social \u2013 This option specifies where the generated social card images will be written to. It's normally not necessary to change this option: plugins : - social : cards_directory : assets/images/social","title":"Built-in social cards"},{"location":"setup/setting-up-social-cards/#dependencies","text":"Two Python packages are installed alongside Material for MkDocs to generate the social preview images, both of which are based on the Cairo Graphics library: Pillow \u2013 Python imaging library CairoSVG \u2013 Converter for *.svg files The Docker image for Insiders comes with all dependencies pre-installed. If you don't want to use Docker, see the following section which explains how to install all dependencies on your system: macOS Windows Linux Make sure Homebrew is installed, which is a modern package manager for macOS. Next, use the following command to install all necessary dependencies: brew install cairo freetype libffi libjpeg libpng zlib As stated in the installation guide , the easiest way to get up and running with the Cairo Graphics library on Windows is by installing GTK+ , since it has Cairo as a dependency. There are several package managers for Linux with varying availability per distribution. The installation guide explains how to install the Cairo Graphics library for your distribution: Ubuntu Fedora openSUSE apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev yum install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel zypper install cairo-devel freetype-devel libffi-devel libjpeg-devel libpng-devel zlib-devel","title":"Dependencies"},{"location":"setup/setting-up-social-cards/#caching","text":"The built-in social cards plugin automatically fetches the fonts you define in mkdocs.yml from Google Fonts, and uses them to render the text that is displayed on the social card. The font files and generated cards are both written to the .cache directory, which is used in subsequent builds to detect whether the social cards need to be regenerated. You might want to: Ignore the .cache directory in your project, by adding it to .gitignore . When building your site for publishing, use a build cache to save the .cache directory in between builds. Taking the example from the publishing guide , add the following lines: name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - uses : actions/cache@v2 with : key : ${{ github.ref }} path : .cache - run : pip install mkdocs-material - run : mkdocs gh-deploy --force","title":"Caching"},{"location":"setup/setting-up-social-cards/#meta-tags","text":"The built-in social cards plugin automatically sets all necessary meta tags, equivalent to the following two customizations, which you can set manually when you don't want to use it: Open Graph Twitter Cards {% extends \"base.html\" %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} {% extends \"base.html\" %} {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %}","title":"Meta tags"},{"location":"setup/setting-up-social-cards/#usage","text":"If you want to adjust the title or set a custom description for the social card, you can use the Metadata extension, which takes precedence over the default values. Changing the title Changing the description Both types of logos, images ( theme.logo ) and icons ( theme.icon.logo ) are supported. While an image logo is used as-is, icons are filled with the color used in the header (white or black), which depends on the primary color. \u21a9","title":"Usage"},{"location":"setup/setting-up-tags/","text":"Setting up tags \u00b6 Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster. Configuration \u00b6 Built-in tags \u00b6 Insiders \u00b7 insiders-2.7.0 \u00b7 Plugin \u00b7 Experimental The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to mkdocs.yml : plugins : - tags The following configuration options are available: tags_file Default: none \u2013 This option specifies which file should be used to render the tags index. See the section on adding a tags index for more information. If this option is specified, tags will become clickable, pointing to the corresponding section in the tags index: plugins : - tags : tags_file : tags.md The page holding the tags index can be linked anywhere in the nav section of mkdocs.yml . Note, however, that this options is not required. If this option is not specified, tags are still rendered and searchable, but without a tags index. Usage \u00b6 Adding tags \u00b6 When both, the built-in tags plugin and Metadata extension are enabled, tags can be added for a document with custom front matter. Add the following lines at the top of a Markdown file: --- tags: - insiders - brand new --- ... The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags , as shown in the following screenshots: Tags Tag search Adding a tags index \u00b6 The built-in tags plugin allows to define a file to render a tags index , which can be any page that is part of the nav section. To add a tags index, create a page, e.g. tags.md : # Tags Following is a list of relevant tags: [TAGS] The [TAGS] marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker: Hiding the tags \u00b6 While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved by using the Metadata extension: --- hide: - tags --- # Document title ...","title":"Setting up tags"},{"location":"setup/setting-up-tags/#setting-up-tags","text":"Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster.","title":"Setting up tags"},{"location":"setup/setting-up-tags/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-tags/#built-in-tags","text":"Insiders \u00b7 insiders-2.7.0 \u00b7 Plugin \u00b7 Experimental The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to mkdocs.yml : plugins : - tags The following configuration options are available: tags_file Default: none \u2013 This option specifies which file should be used to render the tags index. See the section on adding a tags index for more information. If this option is specified, tags will become clickable, pointing to the corresponding section in the tags index: plugins : - tags : tags_file : tags.md The page holding the tags index can be linked anywhere in the nav section of mkdocs.yml . Note, however, that this options is not required. If this option is not specified, tags are still rendered and searchable, but without a tags index.","title":"Built-in tags"},{"location":"setup/setting-up-tags/#usage","text":"","title":"Usage"},{"location":"setup/setting-up-tags/#adding-tags","text":"When both, the built-in tags plugin and Metadata extension are enabled, tags can be added for a document with custom front matter. Add the following lines at the top of a Markdown file: --- tags: - insiders - brand new --- ... The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags , as shown in the following screenshots: Tags Tag search","title":"Adding tags"},{"location":"setup/setting-up-tags/#adding-a-tags-index","text":"The built-in tags plugin allows to define a file to render a tags index , which can be any page that is part of the nav section. To add a tags index, create a page, e.g. tags.md : # Tags Following is a list of relevant tags: [TAGS] The [TAGS] marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker:","title":"Adding a tags index"},{"location":"setup/setting-up-tags/#hiding-the-tags","text":"While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved by using the Metadata extension: --- hide: - tags --- # Document title ...","title":"Hiding the tags"},{"location":"setup/setting-up-the-footer/","text":"Setting up the footer \u00b6 The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g. , or , which can be configured via mkdocs.yml . Configuration \u00b6 Social links \u00b6 1.0.0 \u00b7 Default: none Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in mkdocs.yml with: extra : social : - icon : fontawesome/brands/twitter # (1)! link : https://twitter.com/squidfunk Enter a few keywords to find the perfect icon using our [icon search] and click on the shortcode to copy it to your clipboard: The following properties must be set for each link: icon 5.0.0 \u00b7 Default: none \u00b7 Required \u2013 This property must contain a valid path to any icon bundled with the theme, or the build will not succeed. Some popular choices: \u2013 fontawesome/brands/behance \u2013 fontawesome/brands/docker \u2013 fontawesome/brands/github \u2013 fontawesome/brands/instagram \u2013 fontawesome/brands/linkedin \u2013 fontawesome/brands/medium \u2013 fontawesome/brands/pied-piper-alt \u2013 fontawesome/brands/product-hunt \u2013 fontawesome/brands/slack \u2013 fontawesome/brands/twitter link Default: none \u00b7 Required \u2013 This property must be set to a relative or absolute URL including the URI scheme. All URI schemes are supported, including mailto and bitcoin : Twitter Email extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk extra : social : - icon : fontawesome/solid/paper-plane link : mailto:<email-address> name 5.1.5 \u00b7 Default: domain name from link , if available \u2013 This property is used as the link's title attribute and can be set to a discernable name to improve accessibility: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk name : squidfunk on Twitter Copyright notice \u00b6 0.1.0 \u00b7 Default: none A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of mkdocs.yml : copyright : Copyright &copy; 2016 - 2020 Martin Donath Generator notice \u00b6 7.3.0 \u00b7 Default: true The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via mkdocs.yml : extra : generator : false Please read this before removing the generator notice The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk 's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return. Thus, if you remove this notice, please consider sponsoring the project. Thank you Customization \u00b6 Custom copyright \u00b6 8.0.0 \u00b7 Customization In order to customize and override the copyright notice , extend the theme and override the copyright block , which is normally set to the copyright property set in mkdocs.yml : {% extends \"base.html\" %} {% block copyright %} <!-- Add copyright here, including arbitrary HTML --> {% endblock %}","title":"Setting up the footer"},{"location":"setup/setting-up-the-footer/#setting-up-the-footer","text":"The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g. , or , which can be configured via mkdocs.yml .","title":"Setting up the footer"},{"location":"setup/setting-up-the-footer/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-the-footer/#social-links","text":"1.0.0 \u00b7 Default: none Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in mkdocs.yml with: extra : social : - icon : fontawesome/brands/twitter # (1)! link : https://twitter.com/squidfunk Enter a few keywords to find the perfect icon using our [icon search] and click on the shortcode to copy it to your clipboard: The following properties must be set for each link: icon 5.0.0 \u00b7 Default: none \u00b7 Required \u2013 This property must contain a valid path to any icon bundled with the theme, or the build will not succeed. Some popular choices: \u2013 fontawesome/brands/behance \u2013 fontawesome/brands/docker \u2013 fontawesome/brands/github \u2013 fontawesome/brands/instagram \u2013 fontawesome/brands/linkedin \u2013 fontawesome/brands/medium \u2013 fontawesome/brands/pied-piper-alt \u2013 fontawesome/brands/product-hunt \u2013 fontawesome/brands/slack \u2013 fontawesome/brands/twitter link Default: none \u00b7 Required \u2013 This property must be set to a relative or absolute URL including the URI scheme. All URI schemes are supported, including mailto and bitcoin : Twitter Email extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk extra : social : - icon : fontawesome/solid/paper-plane link : mailto:<email-address> name 5.1.5 \u00b7 Default: domain name from link , if available \u2013 This property is used as the link's title attribute and can be set to a discernable name to improve accessibility: extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/squidfunk name : squidfunk on Twitter","title":"Social links"},{"location":"setup/setting-up-the-footer/#copyright-notice","text":"0.1.0 \u00b7 Default: none A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of mkdocs.yml : copyright : Copyright &copy; 2016 - 2020 Martin Donath","title":"Copyright notice"},{"location":"setup/setting-up-the-footer/#generator-notice","text":"7.3.0 \u00b7 Default: true The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via mkdocs.yml : extra : generator : false Please read this before removing the generator notice The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk 's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return. Thus, if you remove this notice, please consider sponsoring the project. Thank you","title":"Generator notice"},{"location":"setup/setting-up-the-footer/#customization","text":"","title":"Customization"},{"location":"setup/setting-up-the-footer/#custom-copyright","text":"8.0.0 \u00b7 Customization In order to customize and override the copyright notice , extend the theme and override the copyright block , which is normally set to the copyright property set in mkdocs.yml : {% extends \"base.html\" %} {% block copyright %} <!-- Add copyright here, including arbitrary HTML --> {% endblock %}","title":"Custom copyright"},{"location":"setup/setting-up-the-header/","text":"Setting up the header \u00b6 Material for MkDocs' header can be customized to show an announcement bar that disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository , as explained in those dedicated guides. Configuration \u00b6 Automatic hiding \u00b6 6.2.0 \u00b7 Feature flag When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to mkdocs.yml : theme : features : - header.autohide Announcement bar \u00b6 5.0.0 \u00b7 Customization Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the announce block , which is empty by default: {% extends \"base.html\" %} {% block announce %} <!-- Add announcement here, including arbitrary HTML --> {% endblock %} Mark as read \u00b6 Insiders \u00b7 insiders-4.2.0 \u00b7 Feature flag \u00b7 Experimental In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to mkdocs.yml : theme : features : - announce.dismiss When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically. Scroll to the top of this page to see it in action.","title":"Setting up the header"},{"location":"setup/setting-up-the-header/#setting-up-the-header","text":"Material for MkDocs' header can be customized to show an announcement bar that disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository , as explained in those dedicated guides.","title":"Setting up the header"},{"location":"setup/setting-up-the-header/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-the-header/#automatic-hiding","text":"6.2.0 \u00b7 Feature flag When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to mkdocs.yml : theme : features : - header.autohide","title":"Automatic hiding"},{"location":"setup/setting-up-the-header/#announcement-bar","text":"5.0.0 \u00b7 Customization Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the announce block , which is empty by default: {% extends \"base.html\" %} {% block announce %} <!-- Add announcement here, including arbitrary HTML --> {% endblock %}","title":"Announcement bar"},{"location":"setup/setting-up-the-header/#mark-as-read","text":"Insiders \u00b7 insiders-4.2.0 \u00b7 Feature flag \u00b7 Experimental In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to mkdocs.yml : theme : features : - announce.dismiss When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically. Scroll to the top of this page to see it in action.","title":"Mark as read"},{"location":"setup/setting-up-versioning/","text":"Setting up versioning \u00b6 Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike . When deploying a new version, older versions of your documentation remain untouched. Configuration \u00b6 Versioning \u00b6 7.0.0 \u00b7 Utility mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via mkdocs.yml : extra : version : provider : mike This renders a version selector in the header: Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning Why use mike? mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your gh-pages branch. While mike is flexible, it's optimized around putting your docs in a <major>.<minor> directory, with optional aliases (e.g. latest or dev ) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to. Version warning \u00b6 8.0.0 \u00b7 Customization If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension , you can override the outdated block : {% extends \"base.html\" %} {% block outdated %} You're not viewing the latest version. < a href = \"{{ '../' ~ base_url }}\" > <!-- (1)! --> < strong > Click here to go to latest. </ strong > </ a > {% endblock %} Given this value for the href attribute, the link will always redirect to the root of your site, which will then redirect to the latest version. This ensures that older versions of your site do not depend on a specific alias, e.g. latest , to allow for changing the alias later on without breaking earlier versions. This will render a version warning above the header: The default version is identified by the latest alias. If you wish to set another alias as the latest version, e.g. stable , add the following lines to mkdocs.yml : extra : version : default : stable Make sure that this matches the default version . Stay on page \u00b6 Insiders \u00b7 insiders-2.6.0 Insiders improves the user experience when switching between versions: if version A and B contain a page with the same path name, the user will stay on the current page: New behavior Old behavior docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/foo/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/bar/ docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/ Usage \u00b6 While this section outlines the basic workflow for publishing new versions, it's best to check out mike's documentation to make yourself familar with its mechanics. Publishing a new version \u00b6 If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with: mike deploy --push --update-aliases 0.1 latest Note that every version will be deployed as a subdirectory of your site_url , e.g.: docs.example.com/0.1/ docs.example.com/0.2/ ... Setting a default version \u00b6 When starting with mike , a good idea is to set an alias as a default version, e.g. latest , and when publishing a new version, always update the alias to point to the latest version: mike set-default --push latest When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias: docs.example.com docs.example.com/0.1","title":"Setting up versioning"},{"location":"setup/setting-up-versioning/#setting-up-versioning","text":"Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike . When deploying a new version, older versions of your documentation remain untouched.","title":"Setting up versioning"},{"location":"setup/setting-up-versioning/#configuration","text":"","title":"Configuration"},{"location":"setup/setting-up-versioning/#versioning","text":"7.0.0 \u00b7 Utility mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via mkdocs.yml : extra : version : provider : mike This renders a version selector in the header: Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning Why use mike? mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your gh-pages branch. While mike is flexible, it's optimized around putting your docs in a <major>.<minor> directory, with optional aliases (e.g. latest or dev ) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to.","title":"Versioning"},{"location":"setup/setting-up-versioning/#version-warning","text":"8.0.0 \u00b7 Customization If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension , you can override the outdated block : {% extends \"base.html\" %} {% block outdated %} You're not viewing the latest version. < a href = \"{{ '../' ~ base_url }}\" > <!-- (1)! --> < strong > Click here to go to latest. </ strong > </ a > {% endblock %} Given this value for the href attribute, the link will always redirect to the root of your site, which will then redirect to the latest version. This ensures that older versions of your site do not depend on a specific alias, e.g. latest , to allow for changing the alias later on without breaking earlier versions. This will render a version warning above the header: The default version is identified by the latest alias. If you wish to set another alias as the latest version, e.g. stable , add the following lines to mkdocs.yml : extra : version : default : stable Make sure that this matches the default version .","title":"Version warning"},{"location":"setup/setting-up-versioning/#stay-on-page","text":"Insiders \u00b7 insiders-2.6.0 Insiders improves the user experience when switching between versions: if version A and B contain a page with the same path name, the user will stay on the current page: New behavior Old behavior docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/foo/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/bar/ docs.example.com/0.1/ -> docs.example.com/0.2/ docs.example.com/0.1/foo/ -> docs.example.com/0.2/ docs.example.com/0.1/bar/ -> docs.example.com/0.2/","title":"Stay on page"},{"location":"setup/setting-up-versioning/#usage","text":"While this section outlines the basic workflow for publishing new versions, it's best to check out mike's documentation to make yourself familar with its mechanics.","title":"Usage"},{"location":"setup/setting-up-versioning/#publishing-a-new-version","text":"If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with: mike deploy --push --update-aliases 0.1 latest Note that every version will be deployed as a subdirectory of your site_url , e.g.: docs.example.com/0.1/ docs.example.com/0.2/ ...","title":"Publishing a new version"},{"location":"setup/setting-up-versioning/#setting-a-default-version","text":"When starting with mike , a good idea is to set an alias as a default version, e.g. latest , and when publishing a new version, always update the alias to point to the latest version: mike set-default --push latest When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias: docs.example.com docs.example.com/0.1","title":"Setting a default version"},{"location":"setup/extensions/","text":"Extensions \u00b6 Markdown is a very small language with a kind-of reference implementation called John Gruber's Markdown . Python Markdown and Python Markdown Extensions are two packages that enhance the Markdown writing experience, adding useful syntax extensions for technical writing. Supported extensions \u00b6 The following extensions are all supported by Material for MkDocs and therefore strongly recommended. Click on each extension to learn about its purpose and configuration: Abbreviations Admonition Arithmatex Attribute Lists BetterEm Caret, Mark & Tilde Critic Definition Lists Details Emoji Footnotes Highlight Keys Metadata Markdown in HTML SmartSymbols Snippets SuperFences Tabbed Table of Contents Tables Tasklist Configuration \u00b6 Extensions are configured as part of mkdocs.yml \u2013 the MkDocs configuration file. The following sections contain two example configurations to bootstrap your documentation project. Minimal configuration \u00b6 This configuration is a good starting point for when you're using Material for MkDocs for the first time. The best idea is to explore the reference , and gradually add what you want to use: markdown_extensions : # Python Markdown - meta - toc : permalink : true # Python Markdown Extensions - pymdownx.highlight - pymdownx.superfences Recommended configuration \u00b6 This configuration enables all Markdown-related features of Material for MkDocs and is great for experienced users bootstrapping a new documentation project: markdown_extensions : # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true # Python Markdown Extensions - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Extensions"},{"location":"setup/extensions/#extensions","text":"Markdown is a very small language with a kind-of reference implementation called John Gruber's Markdown . Python Markdown and Python Markdown Extensions are two packages that enhance the Markdown writing experience, adding useful syntax extensions for technical writing.","title":"Extensions"},{"location":"setup/extensions/#supported-extensions","text":"The following extensions are all supported by Material for MkDocs and therefore strongly recommended. Click on each extension to learn about its purpose and configuration: Abbreviations Admonition Arithmatex Attribute Lists BetterEm Caret, Mark & Tilde Critic Definition Lists Details Emoji Footnotes Highlight Keys Metadata Markdown in HTML SmartSymbols Snippets SuperFences Tabbed Table of Contents Tables Tasklist","title":"Supported extensions"},{"location":"setup/extensions/#configuration","text":"Extensions are configured as part of mkdocs.yml \u2013 the MkDocs configuration file. The following sections contain two example configurations to bootstrap your documentation project.","title":"Configuration"},{"location":"setup/extensions/#minimal-configuration","text":"This configuration is a good starting point for when you're using Material for MkDocs for the first time. The best idea is to explore the reference , and gradually add what you want to use: markdown_extensions : # Python Markdown - meta - toc : permalink : true # Python Markdown Extensions - pymdownx.highlight - pymdownx.superfences","title":"Minimal configuration"},{"location":"setup/extensions/#recommended-configuration","text":"This configuration enables all Markdown-related features of Material for MkDocs and is great for experienced users bootstrapping a new documentation project: markdown_extensions : # Python Markdown - abbr - admonition - attr_list - def_list - footnotes - meta - md_in_html - toc : permalink : true # Python Markdown Extensions - pymdownx.arithmatex : generic : true - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : alternate_style : true - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Recommended configuration"},{"location":"setup/extensions/python-markdown-extensions/","text":"Python Markdown Extensions \u00b6 The Python Markdown Extensions package is an excellent collection of additional extensions perfectly suited for advanced technical writing. Material for MkDocs lists this package as an explicit dependency, so it's automatically installed with a supported version. Supported extensions \u00b6 Arithmatex \u00b6 1.0.0 \u00b7 Extension The Arithmatex extension allows for rendering of block and inline block equations and integrates seamlessly with MathJax 1 \u2013 a library for mathematical typesetting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with a few lines of additional JavaScript : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using block syntax Using inline block syntax BetterEm \u00b6 0.1.0 \u00b7 Extension The BetterEm extension improves the detection of Markup to emphasize text in Markdown using special characters, i.e. for **bold** and _italic_ formatting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.betterem The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the BetterEm documentation for more information. Caret, Mark & Tilde \u00b6 1.0.0 \u00b7 Extension The Caret , Mark and Tilde extensions add the ability to highlight text and define sub- and superscript using a simple syntax. Enable them together via mkdocs.yml : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Caret , Mark and Tilde documentation for guidance. See reference for usage: Highlighting text Sub- and superscripts Critic \u00b6 1.0.0 \u00b7 Extension The Critic extension allows for the usage of Critic Markup to highlight added, deleted or updated sections in a document, i.e. for tracking changes in Markdown syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.critic The following configuration options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggested changes, or alternatively accept or reject them: View changes Accept changes Reject changes markdown_extensions : - pymdownx.critic : mode : view markdown_extensions : - pymdownx.critic : mode : accept markdown_extensions : - pymdownx.critic : mode : reject See reference for usage: Highlighting changes Details \u00b6 1.9.0 \u00b7 Extension The Details extension supercharges the Admonition extension, making the resulting call-outs collapsible, allowing them to be opened and closed by the user. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.details No configuration options are available. See reference for usage: Collapsible blocks Emoji \u00b6 1.0.0 \u00b7 Extension The Emoji extension automatically inlines bundled and custom icons and emojis in *.svg file format into the resulting HTML page. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji # (1)! emoji_generator : !!python/name:materialx.emoji.to_svg Python Markdown Extensions uses the pymdownx namespace, but in order to support the inlining of icons, the materialx namespace must be used, as it extends the functionality of pymdownx . The following configuration options are supported: emoji_index Default: emojione \u2013 This option defines which set of emojis is used for rendering. Note that the use of emojione is not recommended due to restrictions in licensing : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator Default: to_png \u2013 This option defines how the resolved emoji or icon shortcode is render. Note that icons can only be used together with the to_svg configuration: markdown_extensions : - pymdownx.emoji : emoji_generator : !!python/name:materialx.emoji.to_svg options.custom_icons Default: none \u2013 This option allows to list folders with additional icon sets to be used in Markdown or mkdocs.yml , which is explained in more detail in the icon customization guide : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using emojis Using icons Using icons in templates Highlight \u00b6 5.0.0 \u00b7 Extension \u00b7 Supersedes CodeHilite The Highlight extension adds support for syntax highlighting of code blocks (with the help of SuperFences ) and inline code blocks (with the help of InlineHilite ). Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.superfences # (1)! Highlight is used by the SuperFences extension to perform syntax highlighting on code blocks, not the other way round, which is why this extension also needs to be enabled. The following configuration options are supported: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time using Pygments or in the browser with a JavaScript syntax highlighter: Pygments JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : true - pymdownx.superfences markdown_extensions : - pymdownx.highlight : use_pygments : false As an example, Highlight.js , a JavaScript syntax highlighter, can be integrated with some additional JavaScript and additional CSS in mkdocs.yml : docs/javascripts/highlight.js mkdocs.yml document $ . subscribe (() => { hljs . highlightAll () }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/highlight.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. All following configuration options are only compatible with build-time syntax highlighting using Pygments , so they don't apply if use_pygments is set to false . auto_title Default: false \u2013 This option will automatically add a title to all code blocks that shows the name of the language being used, e.g. Python is printed for a py block: markdown_extensions : - pymdownx.highlight : auto_title : true linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers in the code block reference, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, two of which are supported by Material for MkDocs. While table wraps a code block in a <table> element, pymdownx-inline renders line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of either table or pymdownx-inline is recommended. anchor_linenums 8.1.0 \u00b7 Default: false \u2013 If a code blocks contains line numbers, enabling this setting will wrap them with anchor links, so they can be hyperlinked and shared more easily: markdown_extensions : - pymdownx.highlight : anchor_linenums : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using code blocks Adding a title Adding line numbers Highlighting specific lines Custom syntax theme InlineHilite \u00b6 5.0.0 \u00b7 Extension The InlineHilite extension add support for syntax highlighting of inline code blocks. It's built on top of the Highlight extension, from which it sources its configuration. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight - pymdownx.inlinehilite The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the css_class option, which must not be changed. See the InlineHilite documentation for guidance. See reference for usage: Highlighting inline code blocks Keys \u00b6 1.0.0 \u00b7 Extension The Keys extension adds a simple syntax to allow for the rendering of keyboard keys and combinations, e.g. Ctrl + Alt + Del . Enable it via mkdocs.yml : markdown_extensions : - pymdownx.keys The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the class option, which must not be changed. See the Keys documentation for more information. See reference for usage: Adding keyboard keys SmartSymbols \u00b6 0.1.0 \u00b7 Extension The SmartSymbols extension converts some sequences of characters into their corresponding symbols, e.h. copyright symbols or fractions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the SmartSymbols documentation for guidance. Snippets \u00b6 0.1.0 \u00b7 Extension The Snippets extension adds the ability to embed content from arbitrary files into a document, including other documents or source files, by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.snippets The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Snippets documentation for more information. See reference for usage: Adding a glossary Embedding external files SuperFences \u00b6 0.1.0 \u00b7 Extension \u00b7 Supersedes Fenced Code Blocks The SuperFences extension allows for arbitrary nesting of code and content blocks inside each other, including admonitions, tabs, lists and all other elements. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.superfences The following configuration options are supported: custom_fences Default: none \u2013 This option allows to define a handler for custom fences, e.g. to preserve the definitions of Mermaid.js diagrams to be interpreted in the browser: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format Note that this will primarily prevent syntax highlighting from being applied. See the reference on diagrams to learn how Mermaid.js is integrated with Material for MkDocs. The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Annotations Using flowcharts Using sequence diagrams Using state diagrams Using class diagrams Using entity-relationship diagrams Tabbed \u00b6 5.0.0 \u00b7 Extension The Tabbed extension allows the usage of content tabs, a simple way to group related content and code blocks under accessible tabs. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tabbed : alternate_style : true The following configuration options are supported: alternate_style 7.3.1 \u00b7 Default: false \u00b7 Required \u2013 This option enables the content tabs alternate style , which has better behavior on mobile viewports , and is the only supported style: markdown_extensions : - pymdownx.tabbed : alternate_style : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Grouping code blocks Grouping other content Embedded content Tasklist \u00b6 1.0.0 \u00b7 Extension The Tasklist extension allows for the usage of GitHub Flavored Markdown inspired task lists , following the same syntactical conventions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true The following configuration options are supported: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore recommended: markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using task lists Other libraries like KaTeX are also supported and can be integrated with some additional effort. See the Arithmatex documentation on KaTeX for further guidance, as this is beyond the scope of Material for MkDocs. \u21a9","title":"Python Markdown Extensions"},{"location":"setup/extensions/python-markdown-extensions/#python-markdown-extensions","text":"The Python Markdown Extensions package is an excellent collection of additional extensions perfectly suited for advanced technical writing. Material for MkDocs lists this package as an explicit dependency, so it's automatically installed with a supported version.","title":"Python Markdown Extensions"},{"location":"setup/extensions/python-markdown-extensions/#supported-extensions","text":"","title":"Supported extensions"},{"location":"setup/extensions/python-markdown-extensions/#arithmatex","text":"1.0.0 \u00b7 Extension The Arithmatex extension allows for rendering of block and inline block equations and integrates seamlessly with MathJax 1 \u2013 a library for mathematical typesetting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with a few lines of additional JavaScript : docs/javascripts/mathjax.js mkdocs.yml window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using block syntax Using inline block syntax","title":"Arithmatex"},{"location":"setup/extensions/python-markdown-extensions/#betterem","text":"0.1.0 \u00b7 Extension The BetterEm extension improves the detection of Markup to emphasize text in Markdown using special characters, i.e. for **bold** and _italic_ formatting. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.betterem The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the BetterEm documentation for more information.","title":"BetterEm"},{"location":"setup/extensions/python-markdown-extensions/#caret-mark-tilde","text":"1.0.0 \u00b7 Extension The Caret , Mark and Tilde extensions add the ability to highlight text and define sub- and superscript using a simple syntax. Enable them together via mkdocs.yml : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Caret , Mark and Tilde documentation for guidance. See reference for usage: Highlighting text Sub- and superscripts","title":"Caret, Mark &amp; Tilde"},{"location":"setup/extensions/python-markdown-extensions/#critic","text":"1.0.0 \u00b7 Extension The Critic extension allows for the usage of Critic Markup to highlight added, deleted or updated sections in a document, i.e. for tracking changes in Markdown syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.critic The following configuration options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggested changes, or alternatively accept or reject them: View changes Accept changes Reject changes markdown_extensions : - pymdownx.critic : mode : view markdown_extensions : - pymdownx.critic : mode : accept markdown_extensions : - pymdownx.critic : mode : reject See reference for usage: Highlighting changes","title":"Critic"},{"location":"setup/extensions/python-markdown-extensions/#details","text":"1.9.0 \u00b7 Extension The Details extension supercharges the Admonition extension, making the resulting call-outs collapsible, allowing them to be opened and closed by the user. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.details No configuration options are available. See reference for usage: Collapsible blocks","title":"Details"},{"location":"setup/extensions/python-markdown-extensions/#emoji","text":"1.0.0 \u00b7 Extension The Emoji extension automatically inlines bundled and custom icons and emojis in *.svg file format into the resulting HTML page. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji # (1)! emoji_generator : !!python/name:materialx.emoji.to_svg Python Markdown Extensions uses the pymdownx namespace, but in order to support the inlining of icons, the materialx namespace must be used, as it extends the functionality of pymdownx . The following configuration options are supported: emoji_index Default: emojione \u2013 This option defines which set of emojis is used for rendering. Note that the use of emojione is not recommended due to restrictions in licensing : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator Default: to_png \u2013 This option defines how the resolved emoji or icon shortcode is render. Note that icons can only be used together with the to_svg configuration: markdown_extensions : - pymdownx.emoji : emoji_generator : !!python/name:materialx.emoji.to_svg options.custom_icons Default: none \u2013 This option allows to list folders with additional icon sets to be used in Markdown or mkdocs.yml , which is explained in more detail in the icon customization guide : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg options : custom_icons : - overrides/.icons The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using emojis Using icons Using icons in templates","title":"Emoji"},{"location":"setup/extensions/python-markdown-extensions/#highlight","text":"5.0.0 \u00b7 Extension \u00b7 Supersedes CodeHilite The Highlight extension adds support for syntax highlighting of code blocks (with the help of SuperFences ) and inline code blocks (with the help of InlineHilite ). Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.superfences # (1)! Highlight is used by the SuperFences extension to perform syntax highlighting on code blocks, not the other way round, which is why this extension also needs to be enabled. The following configuration options are supported: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time using Pygments or in the browser with a JavaScript syntax highlighter: Pygments JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : true - pymdownx.superfences markdown_extensions : - pymdownx.highlight : use_pygments : false As an example, Highlight.js , a JavaScript syntax highlighter, can be integrated with some additional JavaScript and additional CSS in mkdocs.yml : docs/javascripts/highlight.js mkdocs.yml document $ . subscribe (() => { hljs . highlightAll () }) extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/highlight.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. All following configuration options are only compatible with build-time syntax highlighting using Pygments , so they don't apply if use_pygments is set to false . auto_title Default: false \u2013 This option will automatically add a title to all code blocks that shows the name of the language being used, e.g. Python is printed for a py block: markdown_extensions : - pymdownx.highlight : auto_title : true linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers in the code block reference, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, two of which are supported by Material for MkDocs. While table wraps a code block in a <table> element, pymdownx-inline renders line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of either table or pymdownx-inline is recommended. anchor_linenums 8.1.0 \u00b7 Default: false \u2013 If a code blocks contains line numbers, enabling this setting will wrap them with anchor links, so they can be hyperlinked and shared more easily: markdown_extensions : - pymdownx.highlight : anchor_linenums : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using code blocks Adding a title Adding line numbers Highlighting specific lines Custom syntax theme","title":"Highlight"},{"location":"setup/extensions/python-markdown-extensions/#inlinehilite","text":"5.0.0 \u00b7 Extension The InlineHilite extension add support for syntax highlighting of inline code blocks. It's built on top of the Highlight extension, from which it sources its configuration. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.highlight - pymdownx.inlinehilite The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the css_class option, which must not be changed. See the InlineHilite documentation for guidance. See reference for usage: Highlighting inline code blocks","title":"InlineHilite"},{"location":"setup/extensions/python-markdown-extensions/#keys","text":"1.0.0 \u00b7 Extension The Keys extension adds a simple syntax to allow for the rendering of keyboard keys and combinations, e.g. Ctrl + Alt + Del . Enable it via mkdocs.yml : markdown_extensions : - pymdownx.keys The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. The only exception is the class option, which must not be changed. See the Keys documentation for more information. See reference for usage: Adding keyboard keys","title":"Keys"},{"location":"setup/extensions/python-markdown-extensions/#smartsymbols","text":"0.1.0 \u00b7 Extension The SmartSymbols extension converts some sequences of characters into their corresponding symbols, e.h. copyright symbols or fractions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the SmartSymbols documentation for guidance.","title":"SmartSymbols"},{"location":"setup/extensions/python-markdown-extensions/#snippets","text":"0.1.0 \u00b7 Extension The Snippets extension adds the ability to embed content from arbitrary files into a document, including other documents or source files, by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.snippets The configuration options of this extension are not specific to Material for MkDocs, as they only impact the Markdown parsing stage. See the Snippets documentation for more information. See reference for usage: Adding a glossary Embedding external files","title":"Snippets"},{"location":"setup/extensions/python-markdown-extensions/#superfences","text":"0.1.0 \u00b7 Extension \u00b7 Supersedes Fenced Code Blocks The SuperFences extension allows for arbitrary nesting of code and content blocks inside each other, including admonitions, tabs, lists and all other elements. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.superfences The following configuration options are supported: custom_fences Default: none \u2013 This option allows to define a handler for custom fences, e.g. to preserve the definitions of Mermaid.js diagrams to be interpreted in the browser: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format Note that this will primarily prevent syntax highlighting from being applied. See the reference on diagrams to learn how Mermaid.js is integrated with Material for MkDocs. The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Annotations Using flowcharts Using sequence diagrams Using state diagrams Using class diagrams Using entity-relationship diagrams","title":"SuperFences"},{"location":"setup/extensions/python-markdown-extensions/#tabbed","text":"5.0.0 \u00b7 Extension The Tabbed extension allows the usage of content tabs, a simple way to group related content and code blocks under accessible tabs. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tabbed : alternate_style : true The following configuration options are supported: alternate_style 7.3.1 \u00b7 Default: false \u00b7 Required \u2013 This option enables the content tabs alternate style , which has better behavior on mobile viewports , and is the only supported style: markdown_extensions : - pymdownx.tabbed : alternate_style : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Grouping code blocks Grouping other content Embedded content","title":"Tabbed"},{"location":"setup/extensions/python-markdown-extensions/#tasklist","text":"1.0.0 \u00b7 Extension The Tasklist extension allows for the usage of GitHub Flavored Markdown inspired task lists , following the same syntactical conventions. Enable it via mkdocs.yml : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true The following configuration options are supported: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore recommended: markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. See reference for usage: Using task lists Other libraries like KaTeX are also supported and can be integrated with some additional effort. See the Arithmatex documentation on KaTeX for further guidance, as this is beyond the scope of Material for MkDocs. \u21a9","title":"Tasklist"},{"location":"setup/extensions/python-markdown/","text":"Python Markdown \u00b6 Material for MkDocs supports a large number of Python Markdown extensions, which is part of what makes it so attractive for technical writing. Following is a list of all supported extensions, linking to the relevant sections of the reference for which features they need to be enabled. Supported extensions \u00b6 Abbreviations \u00b6 1.0.0 \u00b7 Extension The Abbreviations extension adds the ability to add a small tooltip to an element, by wrapping it with an abbr tag. Only plain text (no markup) is supported. Enable it via mkdocs.yml : markdown_extensions : - abbr No configuration options are available. See reference for usage: Adding abbreviations Adding a glossary Admonition \u00b6 0.1.0 \u00b7 Extension The Admonition extension adds support for admonitions, more commonly known as call-outs , which can be defined in Markdown by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - admonition No configuration options are available. See reference for usage: Adding admonitions Changing the title Removing the title Supported types Attribute Lists \u00b6 0.1.0 \u00b7 Extension The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax. Enable it via mkdocs.yml : markdown_extensions : - attr_list No configuration options are available. See reference for usage: Annotations Adding buttons Adding icons with colors Image alignment Image lazy-loading Definition Lists \u00b6 1.1.0 \u00b7 Extension The Definition Lists extension adds the ability to add definition lists (more commonly known as description lists \u2013 dl in HTML) via Markdown to a document. Enable it via mkdocs.yml : markdown_extensions : - def_list No configuration options are available. See reference for usage: Using definition lists Footnotes \u00b6 1.0.0 \u00b7 Extension The Footnotes extension allows to define inline footnotes, which are then rendered below all Markdown content of a document. Enable it via mkdocs.yml : markdown_extensions : - footnotes No configuration options are supported. See reference for usage: Adding footnote references Adding footnote content Metadata \u00b6 1.0.0 \u00b7 Extension The Metadata extension adds the ability to attach arbitrary key-value pairs to a document via front matter written in YAML syntax before the Markdown. Enable it via mkdocs.yml : markdown_extensions : - meta No configuration options are available. See reference for usage: Setting the page title Setting the page description Setting the page icon Setting the page template Adding tags Hiding the tags Hiding the sidebars Hiding the feedback widget Markdown in HTML \u00b6 0.1.0 \u00b7 Extension The Markdown in HTML extension allows for writing Markdown inside of HTML, which is useful for wrapping Markdown content with custom elements. Enable it via mkdocs.yml : markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md_in_html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. No configuration options are available. See reference for usage: Annotations Image captions Table of Contents \u00b6 0.1.0 \u00b7 Extension The Table of Contents extension automatically generates a table of contents from a document, which Material for MkDocs will render as part of the resulting page. Enable it via mkdocs.yml : markdown_extensions : - toc : permalink : true The following configuration options are supported: title 7.3.5 \u00b7 Default: automatically set \u2013 This option sets the title of the table of contents in the right navigation sidebar, which is normally automatically sourced from the translations for the site language as set in mkdocs.yml : markdown_extensions : - toc : title : On this page permalink Default: false \u2013 This option adds an anchor link containing the paragraph symbol \u00b6 or another custom symbol at the end of each headline, exactly like on the page you're currently viewing, which Material for MkDocs will make appear on hover: \u00b6 \u2693\ufe0e markdown_extensions : - toc : permalink : true markdown_extensions : - toc : permalink : \u2693\ufe0e permalink_title Default: Permanent link \u2013 This option sets the title of the anchor link which is shown on hover and read by screen readers. For accessibility reasons, it might be beneficial to change it to a more discernable name, stating that the anchor links to the section itself: markdown_extensions : - toc : permalink_title : Anchor link to this section for reference slugify Default: headerid.slugify \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions : Unicode Unicode, case-sensitive markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify_cased toc_depth Default: 6 \u2013 Define the range of levels to be included in the table of contents. This may be useful for project documentation with deeply structured headings to decrease the length of the table of contents, or to remove the table of contents altogether: Hide levels 4-6 Hide table of contents markdown_extensions : - toc : toc_depth : 3 markdown_extensions : - toc : toc_depth : 0 The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Tables \u00b6 0.1.0 \u00b7 Extension The Tables extension adds the ability to create tables in Markdown by using a simple syntax. Enable it via mkdocs.yml (albeit it should be enabled by default): markdown_extensions : - tables No configuration options are available. See reference for usage: Using data tables Column alignment Superseded extensions \u00b6 The following Python Markdown extensions are not (or might not be) supported anymore, and are therefore not recommended for use. Instead, the alternatives should be considered. Fenced Code Blocks \u00b6 0.1.0 \u00b7 Extension Superseded by SuperFences . This extension might still work, but the SuperFences extension is superior in many ways, as it allows for arbitrary nesting, and is therefore recommended. CodeHilite \u00b6 0.1.0 ... 5.5.14 \u00b7 Extension Superseded by Highlight . Support for CodeHilite was dropped in 6.0.0, as Highlight has a better integration with other essential extensions like SuperFences and InlineHilite .","title":"Python Markdown"},{"location":"setup/extensions/python-markdown/#python-markdown","text":"Material for MkDocs supports a large number of Python Markdown extensions, which is part of what makes it so attractive for technical writing. Following is a list of all supported extensions, linking to the relevant sections of the reference for which features they need to be enabled.","title":"Python Markdown"},{"location":"setup/extensions/python-markdown/#supported-extensions","text":"","title":"Supported extensions"},{"location":"setup/extensions/python-markdown/#abbreviations","text":"1.0.0 \u00b7 Extension The Abbreviations extension adds the ability to add a small tooltip to an element, by wrapping it with an abbr tag. Only plain text (no markup) is supported. Enable it via mkdocs.yml : markdown_extensions : - abbr No configuration options are available. See reference for usage: Adding abbreviations Adding a glossary","title":"Abbreviations"},{"location":"setup/extensions/python-markdown/#admonition","text":"0.1.0 \u00b7 Extension The Admonition extension adds support for admonitions, more commonly known as call-outs , which can be defined in Markdown by using a simple syntax. Enable it via mkdocs.yml : markdown_extensions : - admonition No configuration options are available. See reference for usage: Adding admonitions Changing the title Removing the title Supported types","title":"Admonition"},{"location":"setup/extensions/python-markdown/#attribute-lists","text":"0.1.0 \u00b7 Extension The Attribute Lists extension allows to add HTML attributes and CSS classes to almost every Markdown inline- and block-level element with a special syntax. Enable it via mkdocs.yml : markdown_extensions : - attr_list No configuration options are available. See reference for usage: Annotations Adding buttons Adding icons with colors Image alignment Image lazy-loading","title":"Attribute Lists"},{"location":"setup/extensions/python-markdown/#definition-lists","text":"1.1.0 \u00b7 Extension The Definition Lists extension adds the ability to add definition lists (more commonly known as description lists \u2013 dl in HTML) via Markdown to a document. Enable it via mkdocs.yml : markdown_extensions : - def_list No configuration options are available. See reference for usage: Using definition lists","title":"Definition Lists"},{"location":"setup/extensions/python-markdown/#footnotes","text":"1.0.0 \u00b7 Extension The Footnotes extension allows to define inline footnotes, which are then rendered below all Markdown content of a document. Enable it via mkdocs.yml : markdown_extensions : - footnotes No configuration options are supported. See reference for usage: Adding footnote references Adding footnote content","title":"Footnotes"},{"location":"setup/extensions/python-markdown/#metadata","text":"1.0.0 \u00b7 Extension The Metadata extension adds the ability to attach arbitrary key-value pairs to a document via front matter written in YAML syntax before the Markdown. Enable it via mkdocs.yml : markdown_extensions : - meta No configuration options are available. See reference for usage: Setting the page title Setting the page description Setting the page icon Setting the page template Adding tags Hiding the tags Hiding the sidebars Hiding the feedback widget","title":"Metadata"},{"location":"setup/extensions/python-markdown/#markdown-in-html","text":"0.1.0 \u00b7 Extension The Markdown in HTML extension allows for writing Markdown inside of HTML, which is useful for wrapping Markdown content with custom elements. Enable it via mkdocs.yml : markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md_in_html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. No configuration options are available. See reference for usage: Annotations Image captions","title":"Markdown in HTML"},{"location":"setup/extensions/python-markdown/#table-of-contents","text":"0.1.0 \u00b7 Extension The Table of Contents extension automatically generates a table of contents from a document, which Material for MkDocs will render as part of the resulting page. Enable it via mkdocs.yml : markdown_extensions : - toc : permalink : true The following configuration options are supported: title 7.3.5 \u00b7 Default: automatically set \u2013 This option sets the title of the table of contents in the right navigation sidebar, which is normally automatically sourced from the translations for the site language as set in mkdocs.yml : markdown_extensions : - toc : title : On this page permalink Default: false \u2013 This option adds an anchor link containing the paragraph symbol \u00b6 or another custom symbol at the end of each headline, exactly like on the page you're currently viewing, which Material for MkDocs will make appear on hover: \u00b6 \u2693\ufe0e markdown_extensions : - toc : permalink : true markdown_extensions : - toc : permalink : \u2693\ufe0e permalink_title Default: Permanent link \u2013 This option sets the title of the anchor link which is shown on hover and read by screen readers. For accessibility reasons, it might be beneficial to change it to a more discernable name, stating that the anchor links to the section itself: markdown_extensions : - toc : permalink_title : Anchor link to this section for reference slugify Default: headerid.slugify \u2013 This option allows for customization of the slug function. For some languages, the default may not produce good and readable identifiers \u2013 consider using another slug function like for example those from Python Markdown Extensions : Unicode Unicode, case-sensitive markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify markdown_extensions : - toc : slugify : !!python/name:pymdownx.slugs.uslugify_cased toc_depth Default: 6 \u2013 Define the range of levels to be included in the table of contents. This may be useful for project documentation with deeply structured headings to decrease the length of the table of contents, or to remove the table of contents altogether: Hide levels 4-6 Hide table of contents markdown_extensions : - toc : toc_depth : 3 markdown_extensions : - toc : toc_depth : 0 The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Table of Contents"},{"location":"setup/extensions/python-markdown/#tables","text":"0.1.0 \u00b7 Extension The Tables extension adds the ability to create tables in Markdown by using a simple syntax. Enable it via mkdocs.yml (albeit it should be enabled by default): markdown_extensions : - tables No configuration options are available. See reference for usage: Using data tables Column alignment","title":"Tables"},{"location":"setup/extensions/python-markdown/#superseded-extensions","text":"The following Python Markdown extensions are not (or might not be) supported anymore, and are therefore not recommended for use. Instead, the alternatives should be considered.","title":"Superseded extensions"},{"location":"setup/extensions/python-markdown/#fenced-code-blocks","text":"0.1.0 \u00b7 Extension Superseded by SuperFences . This extension might still work, but the SuperFences extension is superior in many ways, as it allows for arbitrary nesting, and is therefore recommended.","title":"Fenced Code Blocks"},{"location":"setup/extensions/python-markdown/#codehilite","text":"0.1.0 ... 5.5.14 \u00b7 Extension Superseded by Highlight . Support for CodeHilite was dropped in 6.0.0, as Highlight has a better integration with other essential extensions like SuperFences and InlineHilite .","title":"CodeHilite"}]}